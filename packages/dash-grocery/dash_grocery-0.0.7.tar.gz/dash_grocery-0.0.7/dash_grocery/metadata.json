{
  "src/lib/components/barcode/Barcode.jsx": {
    "description": "Wrapped from [react-barcode](https://github.com/kciter/react-barcode).",
    "displayName": "DashBarcode",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "value": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "The value of the barcode."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width option is the width of a single bar.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the barcode.",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Select which barcode type to use.\nPlease check the wikipage of the different barcode types for more information.",
        "defaultValue": {
          "value": "'CODE128'",
          "computed": false
        }
      },
      "displayValue": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to display the barcode value.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Overide the text that is diplayed"
      },
      "fontOptions": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "With fontOptions you can add bold or italic text to the barcode.",
        "defaultValue": {
          "value": "''",
          "computed": false
        }
      },
      "font": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Define the font used for the text in the generated barcode.\nThis can be any default font or a font defined by a @font-face rule.",
        "defaultValue": {
          "value": "'monospace'",
          "computed": false
        }
      },
      "textAlign": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the horizontal alignment of the text. Can be left / center / right.",
        "defaultValue": {
          "value": "'center'",
          "computed": false
        }
      },
      "textPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the vertical position of the text. Can be bottom / top.",
        "defaultValue": {
          "value": "'bottom'",
          "computed": false
        }
      },
      "textMargin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the space between the barcode and the text.",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "fontSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the size of the text.",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "background": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the background of the barcode.",
        "defaultValue": {
          "value": "'#ffffff'",
          "computed": false
        }
      },
      "lineColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Set the color of the bars and the text.",
        "defaultValue": {
          "value": "'#000000'",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set the space margin around the barcode.\nIf nothing else is set, all side will inherit the margins property but can be replaced if you want to set them separably.",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "marginTop": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "margins"
      },
      "marginBottom": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "margins"
      },
      "marginLeft": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "margins"
      },
      "marginRight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "margins"
      },
      "flat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Only for EAN8/EAN13"
      }
    }
  },
  "src/lib/components/clock/Clock.jsx": {
    "description": "Wrapped from [react-live-clock](https://github.com/pvoznyuk/react-live-clock).",
    "displayName": "DashClock",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "date can be set as a children prop."
      },
      "date": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "custom",
              "raw": "PropTypes.date"
            }
          ]
        },
        "required": false,
        "description": "Date to output, If nothing is set then it take current date."
      },
      "format": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Formatting from moment.js library."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Changes the language of the component via prop"
      },
      "filter": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Filtering the value before the output ."
      },
      "timezone": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If timezone is set, the date is show in this timezone.\nYou can find the list. here, the TZ column."
      },
      "ticking": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If you want the clock to be auto-updated every interval seconds."
      },
      "blinking": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "If you want the clock's last colon to blink.\nSet it to all to make them all blink."
      },
      "interval": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Auto-updating period for the clock. 1 second is a default value."
      },
      "onChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "callback function on each output update"
      }
    }
  },
  "src/lib/components/games/Snake.jsx": {
    "description": "Wrapped from [react-snake](https://github.com/derrmru/react-snake).",
    "displayName": "DashSnake",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "color1": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Snake's color.",
        "defaultValue": {
          "value": "'#248ec2'",
          "computed": false
        }
      },
      "color2": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Apple's color.",
        "defaultValue": {
          "value": "'#1d355e'",
          "computed": false
        }
      },
      "backgroundColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "background.",
        "defaultValue": {
          "value": "'#ebebeb'",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/lazy_load/LazyLoad.jsx": {
    "description": "Wrapped from [react-lazyload](https://github.com/twobin/react-lazyload).\nLazyload your Components, Images or anything matters the performance.",
    "displayName": "DashLazyLoad",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Type: Node Default: undefined\n**NOTICE**\nOnly one child is allowed to be passed."
      },
      "scrollContainer": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "node"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Type: String/DOM node Default: undefined\nPass a query selector string or DOM node. LazyLoad will attach to the window object's scroll  events *if no container is passed."
      },
      "height": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Type: Number/String Default: undefined\nIn the first round of render, LazyLoad will render a placeholder for your component if no  *placeholder is provided and measure if this component is visible. Set `height` properly will make  *LazyLoad calculate more precisely. The value can be number or string like `'100%'`. You can also  *use css to set the height of the placeholder instead of using `height`."
      },
      "once": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Type: Bool Default: false\nOnce the lazy loaded component is loaded, do not detect scroll/resize event anymore. Useful for  *images or simple components.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "array"
            }
          ]
        },
        "required": false,
        "description": "Type: Number/Array(Number) Default: 0\nSay if you want to preload a component even if it's 100px below the viewport (user have to scroll  *100px more to see this component), you can set `offset` props to `100`. On the other hand, if you  *want to delay loading a component even if it's top edge has already appeared at viewport, set  *`offset` to negative number.\nLibrary supports horizontal lazy load out of the box. So when you provide this prop with number  *like `100` it will automatically set left edge offset to `100` and top edge to `100`;\nIf you provide this prop with array like `[100, 200]`, it will set left edge offset to `100` and  *top offset to `200`.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "scroll": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Type: Bool Default: true\nListen and react to scroll event.",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "resize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Type: Bool Default: false\nRespond to `resize` event, set it to `true` if you do need LazyLoad listen resize event.\n**NOTICE** If you tend to support legacy IE, set this props carefully, refer to [this question]* (http://stackoverflow.com/questions/1852751/window-resize-event-firing-in-internet-explorer) for  *further reading.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "overflow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Type: Bool Default: false\nIf lazy loading components inside a overflow container, set this to `true`. Also make sure a  *`position` property other than `static` has been set to your overflow container.\n[demo](https://twobin.github.io/react-lazyload/examples/#/overflow)",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Type: Any Default: undefined\nSpecify a placeholder for your lazy loaded component.\n[demo](https://twobin.github.io/react-lazyload/examples/#/placeholder)\n**If you provide your own placeholder, do remember add appropriate `height` or `minHeight` to your  *placeholder element for better lazyload performance.**"
      },
      "unmountIfInvisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Type: Bool Default: false\nThe lazy loaded component is unmounted and replaced by the placeholder when it is no longer  visible *in the viewport.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "debounce": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "Type: Bool / Number Default: undefined\nLazyload will try to use [passive event](https://github.com/WICG/EventListenerOptions/blob/ gh-pages/*explainer.md) by default to improve scroll/resize event handler's performance. If you  prefer *control this behaviour by yourself, you can set `debounce` or `throttle` to enable built in  delay *feature.\nIf you provide a number, that will be how many `ms` to wait; if you provide `true`, the wait time  *defaults to `300ms`.\n**NOTICE** Set `debounce` / `throttle` to all lazy loaded components unanimously, if you don't,  the *first occurrence is respected.\n[demo](https://twobin.github.io/react-lazyload/examples/#/debounce)"
      },
      "throttle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "bool"
            }
          ]
        },
        "required": false,
        "description": "Type: Bool / Number Default: undefined\nLazyload will try to use [passive event](https://github.com/WICG/EventListenerOptions/blob/ gh-pages/*explainer.md) by default to improve scroll/resize event handler's performance. If you  prefer *control this behaviour by yourself, you can set `debounce` or `throttle` to enable built in  delay *feature.\nIf you provide a number, that will be how many `ms` to wait; if you provide `true`, the wait time  *defaults to `300ms`.\n**NOTICE** Set `debounce` / `throttle` to all lazy loaded components unanimously, if you don't,  the *first occurrence is respected.\n[demo](https://twobin.github.io/react-lazyload/examples/#/debounce)"
      },
      "classNamePrefix": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type: String Default: `lazyload`\nWhile rendering, Lazyload will add some elements to the component tree in addition to the wrapped  *component children.\nThe `classNamePrefix` prop allows the user to supply their own custom class prefix to help:\n# Avoid class conflicts on an implementing app\n# Allow easier custom styling\nThese being:\n# A wrapper div, which is present at all times (default )",
        "defaultValue": {
          "value": "'lazyload'",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Type: Object Default: undefined\nSimilar to [classNamePrefix](#classNamePrefix), the `style` prop allows users to pass custom CSS  *styles to wrapper div."
      }
    }
  },
  "src/lib/components/masonry/Masonry.jsx": {
    "description": "Wrapped from [react-masonry-component](https://github.com/eiriklv/react-masonry-component).",
    "displayName": "DashMasonry",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "children"
      },
      "elementType": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "default 'div'"
      },
      "options": {
        "type": {
          "name": "shape",
          "value": {
            "itemSelector": {
              "name": "string",
              "description": "Specifies which child elements will be used as item elements in the layout.",
              "required": false
            },
            "columnWidth": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "description": "Aligns items to a horizontal grid.",
              "required": false
            },
            "gutter": {
              "name": "number",
              "description": "Adds horizontal space between item elements.",
              "required": false
            },
            "horizontalOrder": {
              "name": "bool",
              "description": "Lays out items to (mostly) maintain horizontal left-to-right order.",
              "required": false
            },
            "percentPosition": {
              "name": "bool",
              "description": "Sets item positions in percent values, rather than pixel values.\npercentPosition: true works well with percent-width items,\nas items will not transition their position on resize.",
              "required": false
            },
            "stamp": {
              "name": "string",
              "description": "Specifies which elements are stamped within the layout.\nMasonry will layout items below stamped elements.",
              "required": false
            },
            "fitWidth": {
              "name": "bool",
              "description": "Sets the width of the container to fit the available number of columns,\nbased the size of container's parent element.\nWhen enabled, you can center the container with CSS.",
              "required": false
            },
            "originLeft": {
              "name": "bool",
              "description": "Controls the horizontal flow of the layout.\nBy default, item elements start positioning at the left,\nwith originLeft: true. Set originLeft: false for right-to-left layouts.",
              "required": false
            },
            "originTop": {
              "name": "bool",
              "description": "Controls the vertical flow of the layout.\nBy default, item elements start positioning at the top,\nwith originTop: true.\nSet originTop: false for bottom-up layouts.",
              "required": false
            },
            "containerStyle": {
              "name": "object",
              "description": "CSS styles that are applied to the container element.",
              "required": false
            },
            "transitionDuration": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "description": "Duration of the transition when items change position or appearance,\nset in a CSS time format. Default: transitionDuration: '0.4s'",
              "required": false
            },
            "stagger": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "string"
                }
              ],
              "description": "Staggers item transitions, so items transition incrementally after one another.\nSet as a CSS time format, '0.03s', or as a number in milliseconds, 30.",
              "required": false
            },
            "resize": {
              "name": "bool",
              "description": "Adjusts sizes and positions when window is resized. Enabled by default resize: true.",
              "required": false
            },
            "initLayout": {
              "name": "bool",
              "description": "Enables layout on initialization. Enabled by default initLayout: true.",
              "required": false
            }
          }
        },
        "required": false,
        "description": "masonry options"
      },
      "disableImagesLoaded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "default false"
      },
      "updateOnEachImageLoad": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "default false and works only if disableImagesLoaded is false"
      },
      "imagesLoadedOptions": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "default {}"
      },
      "onImagesLoaded": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "onImagesLoaded"
      },
      "enableResizableChildren": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "enableResizableChildren"
      },
      "onLayoutComplete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "func onLayoutComplete"
      },
      "onRemoveComplete": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "func onRemoveComplete"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "style"
      }
    }
  },
  "src/lib/components/particles/MouseParticles.jsx": {
    "description": "Wrapped from [react-mouse-particles](https://github.com/lindelof/react-mouse-particles).",
    "displayName": "DashMouseParticles",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "g": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether to add gravity",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "num": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of particles emitted each time",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The radius of every particle",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "alpha": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The alpha of every particle",
        "defaultValue": {
          "value": "0.1",
          "computed": false
        }
      },
      "tha": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The Particle emitter angle",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "v": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The Particle emitter Particle velocity",
        "defaultValue": {
          "value": "0.5",
          "computed": false
        }
      },
      "life": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The life of every particle",
        "defaultValue": {
          "value": "1.2",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Particle color",
        "defaultValue": {
          "value": "'random'",
          "computed": false
        }
      },
      "cull": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Eliminate dom's className without triggering animation"
      },
      "level": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Detect levels of culling animation",
        "defaultValue": {
          "value": "6",
          "computed": false
        }
      }
    }
  },
  "src/lib/components/particles/ParticlesBg.jsx": {
    "description": "Wrapped from [particles-bg](https://github.com/lindelof/particles-bg).",
    "displayName": "DashParticlesBg",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The type of particle animation.\n\"color\", \"ball\", \"lines\", \"thick\", \"circle\", \"cobweb\" ,\"polygon\", \"square\", \"tadpole\", \"fountain\", \"random\", \"custom\"",
        "defaultValue": {
          "value": "'random'",
          "computed": false
        }
      },
      "num": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The number of particles emitted each time, generally not set"
      },
      "color": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "The background color or particle color of the particle scene",
        "defaultValue": {
          "value": "'random'",
          "computed": false
        }
      },
      "bg": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "object"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Eliminate dom's className without triggering animation",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "config": {
        "type": {
          "name": "shape",
          "value": {
            "num": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "rps": {
              "name": "number",
              "required": false
            },
            "radius": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "life": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "v": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "tha": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "body": {
              "name": "string",
              "required": false
            },
            "rotate": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "alpha": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "scale": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "position": {
              "name": "string",
              "required": false
            },
            "color": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "arrayOf",
                  "value": {
                    "name": "string"
                  }
                }
              ],
              "required": false
            },
            "cross": {
              "name": "string",
              "required": false
            },
            "random": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "bool"
                }
              ],
              "required": false
            },
            "g": {
              "name": "number",
              "required": false
            },
            "f": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "func": {
              "name": "func",
              "required": false
            }
          }
        },
        "required": false,
        "description": "You can use type=\"custom\" to achieve a higher degree of freedom for the particle background."
      }
    }
  },
  "src/lib/components/particles/PowerModeInput.jsx": {
    "description": "Wrapped from [power-mode-input](https://github.com/lindelof/power-mode-input).",
    "displayName": "DashPowerModeInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Type of the input tag.",
        "defaultValue": {
          "value": "'text'",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder of the input tag."
      },
      "value": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Value of the input tag."
      },
      "defaultValue": {
        "type": {
          "name": "any"
        },
        "required": false,
        "description": "Default value of the input tag."
      },
      "maxLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The length limit of the input.",
        "defaultValue": {
          "value": "128",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style of the input tag."
      },
      "config": {
        "type": {
          "name": "shape",
          "value": {
            "height": {
              "name": "number",
              "required": false
            },
            "num": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "radius": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "tha": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "alpha": {
              "name": "union",
              "value": [
                {
                  "name": "number"
                },
                {
                  "name": "array"
                }
              ],
              "required": false
            },
            "color": {
              "name": "union",
              "value": [
                {
                  "name": "string"
                },
                {
                  "name": "arrayOf",
                  "value": {
                    "name": "string"
                  }
                }
              ],
              "required": false
            },
            "g": {
              "name": "number",
              "required": false
            },
            "circle": {
              "name": "bool",
              "required": false
            }
          }
        },
        "required": false,
        "description": "You can use type=\"custom\" to achieve a higher degree of freedom for the particle background.",
        "defaultValue": {
          "value": "{\n    height: 5,\n    tha: [0, 360],\n    g: 0.5,\n    num: 5,\n    radius: 6,\n    circle: true,\n    alpha: [0.75, 0.1],\n    color: 'random',\n}",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/qrcode/QRCodeCanvas.jsx": {
    "description": "Wrapped from [qrcode.react](https://github.com/zpao/qrcode.react).",
    "displayName": "DashQRCodeCanvas",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the QR code."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "size"
      },
      "bgColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Background color. \"#FFFFFF\""
      },
      "fgColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Foreground color. \"#000000\""
      },
      "level": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "('L' 'M' 'Q' 'H')"
      },
      "includeMargin": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to include margins."
      },
      "imageSettings": {
        "type": {
          "name": "shape",
          "value": {
            "src": {
              "name": "string",
              "description": "The src of the image tag.",
              "required": false
            },
            "x": {
              "name": "number",
              "description": "none, will center",
              "required": false
            },
            "y": {
              "name": "number",
              "description": "none, will center",
              "required": false
            },
            "height": {
              "name": "number",
              "description": "height of the img",
              "required": false
            },
            "width": {
              "name": "number",
              "description": "width of the img",
              "required": false
            },
            "excavate": {
              "name": "bool",
              "description": "excavate",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Settings for pictures inserted in the QR code."
      }
    }
  },
  "src/lib/components/qrcode/QRCodeSVG.jsx": {
    "description": "Wrapped from [qrcode.react](https://github.com/zpao/qrcode.react).",
    "displayName": "DashQRCodeSVG",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The value of the QR code."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "size"
      },
      "bgColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Background color. \"#FFFFFF\""
      },
      "fgColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Foreground color. \"#000000\""
      },
      "level": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "('L' 'M' 'Q' 'H')"
      },
      "includeMargin": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to include margins."
      },
      "imageSettings": {
        "type": {
          "name": "shape",
          "value": {
            "src": {
              "name": "string",
              "description": "The src of the image tag.",
              "required": false
            },
            "x": {
              "name": "number",
              "description": "none, will center",
              "required": false
            },
            "y": {
              "name": "number",
              "description": "none, will center",
              "required": false
            },
            "height": {
              "name": "number",
              "description": "height of the img",
              "required": false
            },
            "width": {
              "name": "number",
              "description": "width of the img",
              "required": false
            },
            "excavate": {
              "name": "bool",
              "description": "excavate",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Settings for pictures inserted in the QR code."
      }
    }
  },
  "src/lib/components/stars/Stars.jsx": {
    "description": "Wrapped from [react-stars](https://github.com/n49/react-stars).",
    "displayName": "DashReactStars",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Set rating value."
      },
      "count": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "How many total stars you want"
      },
      "char": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which character you want to use as a star."
      },
      "color1": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of inactive star (this supports any CSS valid value)"
      },
      "color2": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of selected or active star"
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "Size of stars (in px)"
      },
      "edit": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should you be able to select rating or just see rating (for reusability)"
      },
      "half": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Should component use half stars, if not the decimal part will be dropped otherwise normal algebra rools will apply to round to half stars"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that should be called to report property changes\nto Dash, to make them available for callbacks."
      }
    }
  },
  "src/lib/components/textfit/Textfit.jsx": {
    "description": "Wrapped from [react-textfit](https://github.com/malte-wessel/react-textfit).",
    "displayName": "DashTextfit",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "children"
      },
      "mode": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "(single|multi) Algorithm to fit the text. Use single for headlines and multi for paragraphs.\nDefault is multi."
      },
      "forceSingleModeWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "(Boolean) When mode is single and forceSingleModeWidth is true, the element's height will be ignored.\nDefault is true."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(Number) Minimum font size in pixel. Default is 1."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(Number) Maximum font size in pixel. Default is 100."
      },
      "throttle": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "(Number) Window resize throttle in milliseconds. Default is 50."
      },
      "onReady": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "(Function) Will be called when text is fitted."
      }
    }
  },
  "src/lib/components/weather/Weather.jsx": {
    "description": "Wrapped from [react-open-weather](https://github.com/farahat80/react-open-weather).",
    "displayName": "DashWeather",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "class_name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Often used with CSS to style elements with common properties"
      },
      "api_key": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "your api key from the openweather, weatherbit or visual crossing websites"
      },
      "lat": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "latitude of the location",
        "defaultValue": {
          "value": "'48.137154'",
          "computed": false
        }
      },
      "lon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "string"
            }
          ]
        },
        "required": false,
        "description": "longitude of the location",
        "defaultValue": {
          "value": "'11.576124'",
          "computed": false
        }
      },
      "lang": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "the language to show \"humidity\" and \"wind speed\", feel free to open a PR to lang.js to add more languages\n\"en\", \"de\", \"es\"",
        "defaultValue": {
          "value": "'en'",
          "computed": false
        }
      },
      "unit": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "the unit will be passed to the openweather, weatherbit or visualcrossing \"units\" property, please check their documentation for more info",
        "defaultValue": {
          "value": "'metric'",
          "computed": false
        }
      },
      "locationLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The name of the location or city to show in the component",
        "defaultValue": {
          "value": "'Munich'",
          "computed": false
        }
      },
      "unitsLabels": {
        "type": {
          "name": "shape",
          "value": {
            "temperature": {
              "name": "string",
              "required": false
            },
            "windSpeed": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "the labels to be used for temprature and windspeed",
        "defaultValue": {
          "value": "{temperature: 'C', windSpeed: 'Km/h'}",
          "computed": false
        }
      },
      "showForecast": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "whether or not to show the forecast bottom part of the component",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "option": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "useOpenWeather, useWeatherBit and useVisualCrossing options",
        "defaultValue": {
          "value": "'OpenWeather'",
          "computed": false
        }
      },
      "theme": {
        "type": {
          "name": "shape",
          "value": {
            "fontFamily": {
              "name": "string",
              "required": false
            },
            "gradientStart": {
              "name": "string",
              "required": false
            },
            "gradientMid": {
              "name": "string",
              "required": false
            },
            "gradientEnd": {
              "name": "string",
              "required": false
            },
            "locationFontColor": {
              "name": "string",
              "required": false
            },
            "todayTempFontColor": {
              "name": "string",
              "required": false
            },
            "todayDateFontColor": {
              "name": "string",
              "required": false
            },
            "todayRangeFontColor": {
              "name": "string",
              "required": false
            },
            "todayDescFontColor": {
              "name": "string",
              "required": false
            },
            "todayInfoFontColor": {
              "name": "string",
              "required": false
            },
            "todayIconColor": {
              "name": "string",
              "required": false
            },
            "forecastBackgroundColor": {
              "name": "string",
              "required": false
            },
            "forecastSeparatorColor": {
              "name": "string",
              "required": false
            },
            "forecastDateColor": {
              "name": "string",
              "required": false
            },
            "forecastDescColor": {
              "name": "string",
              "required": false
            },
            "forecastRangeColor": {
              "name": "string",
              "required": false
            },
            "forecastIconColor": {
              "name": "string",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Custom styling",
        "defaultValue": {
          "value": "{\n    fontFamily: 'Helvetica, sans-serif',\n    gradientStart: '#0181C2',\n    gradientMid: '#04A7F9',\n    gradientEnd: '#4BC4F7',\n    locationFontColor: '#FFF',\n    todayTempFontColor: '#FFF',\n    todayDateFontColor: '#B5DEF4',\n    todayRangeFontColor: '#B5DEF4',\n    todayDescFontColor: '#B5DEF4',\n    todayInfoFontColor: '#B5DEF4',\n    todayIconColor: '#FFF',\n    forecastBackgroundColor: '#FFF',\n    forecastSeparatorColor: '#DDD',\n    forecastDateColor: '#777',\n    forecastDescColor: '#777',\n    forecastRangeColor: '#777',\n    forecastIconColor: '#4BC4F7',\n}",
          "computed": false
        }
      },
      "customData": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Custom weather data. Refer to the format of the data obtained through the API."
      },
      "func": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "For custom API or other. (experimental)",
        "defaultValue": {
          "value": "(...props) => ({\n    data: props.customData,\n    isLoading: null,\n    errorMessage: null,\n})",
          "computed": false
        }
      }
    }
  }
}