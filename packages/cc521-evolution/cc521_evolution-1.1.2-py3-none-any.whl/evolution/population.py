#!/usr/bin/env python3
#
# Population class - Just a group of individuals generated by an specific domain encoder

from typing import List, Type
from abc import ABC, abstractmethod
from .individual import Individual
from .encoding.base import DomainEncoder

class Population:
    """Just a group of individuals"""
    def __init__(self, individuals: List[Individual]):
        """
        IMPORTANT: If initial_individuals field is passed, them must have the same domain encoder with which is being creating this population"""
        self.individuals = individuals

    @property
    def size(self):
        return len(self.individuals)

    def __iter__(self):
        for individual in self.individuals:
            yield individual


class PopulationGenerator:
    def __init__(self, domain_encoder: DomainEncoder,
                 individual_cls: Type[Individual] = Individual):
        self.domain_encoder = domain_encoder
        self.individual_cls = individual_cls

		# initial_individuals attribute is added to support micro-AG evolution schema (transfer best individuals from a micro-AG to other AG to continue the evolution)
    def random(self, size: int = 10,
               initial_individuals: List[Individual] = None) -> Population:
        n = size # random individuals to be created
        initial_individuals = [] if initial_individuals is None else initial_individuals

        if (init:=len(initial_individuals)) > n:
            individuals = initial_individuals[:population]
        else:
            n -= init
            individuals = initial_individuals + \
                [self.individual_cls(self.domain_encoder.random(), self.domain_encoder) for _ in range(n)]

        return Population(individuals = individuals)
