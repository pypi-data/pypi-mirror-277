# coding: utf-8

"""
    CardScan API

    The official documentation for the CardScan API.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr

class Address(BaseModel):
    """
    Address: N3 and N4  # noqa: E501
    """
    address1: Optional[constr(strict=True, max_length=55, min_length=0)] = Field(default=None, description="Segment: N3, Element: N301, Notes: Required, Address Information")
    address2: Optional[constr(strict=True, max_length=55, min_length=0)] = Field(default=None, description="Segment: N3, Element: N302, Notes: Address Information")
    city: Optional[constr(strict=True, max_length=30, min_length=0)] = Field(default=None, description="Segment: N4, Element: N401, Notes: Required, city")
    state: Optional[constr(strict=True, max_length=2, min_length=0)] = Field(default=None, description="Segment: N4, Element: N402, Notes: state example: TN, WA")
    postal_code: Optional[constr(strict=True, max_length=15, min_length=0)] = Field(default=None, alias="postalCode", description="Segment: N4, Element: N403")
    country_code: Optional[StrictStr] = Field(default=None, alias="countryCode", description="Segment: N4, Element: N404")
    location_identifier: Optional[StrictStr] = Field(default=None, alias="locationIdentifier", description="Segment: N4, Element: N406")
    country_sub_division_code: Optional[StrictStr] = Field(default=None, alias="countrySubDivisionCode", description="Segment: N4, Element: N407, Notes: Country SubDivision Code")
    __properties = ["address1", "address2", "city", "state", "postalCode", "countryCode", "locationIdentifier", "countrySubDivisionCode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Address:
        """Create an instance of Address from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Address:
        """Create an instance of Address from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Address.parse_obj(obj)

        _obj = Address.parse_obj({
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "postal_code": obj.get("postalCode"),
            "country_code": obj.get("countryCode"),
            "location_identifier": obj.get("locationIdentifier"),
            "country_sub_division_code": obj.get("countrySubDivisionCode")
        })
        return _obj


