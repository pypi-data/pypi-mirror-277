name: Releaser

on:
  workflow_dispatch:
    inputs:
      push:
        description: Should this push a new release? 
        required: false
        default: false
        type: boolean
      tag:
        description: Tag to release
        required: false
        type: string
      version:
        description: The true version of the package
        required: false
        type: string
  workflow_call:
    inputs:
      push:
        description: Should this push a new release? 
        required: false
        default: false
        type: boolean
      tag:
        description: Tag to release
        required: false
        type: string
    secrets:
      GH_APP_KEY:
        description: GitHub App private key
        required: true

jobs:
  releaser:
    runs-on: ubuntu-latest
    steps:

    - name: Dist Dir
      id: dist_dir
      run: mkdir -p dist artifacts

    - name: Get Tag Name
      id: set_tag
      env:
        GIT_TAG: ${{ inputs.tag }}
        REPO_URL: ${{ github.server_url }}/${{ github.repository }}
      run: |
        if [ -z "$GIT_TAG" ]; then
          GIT_TAG=${GITHUB_REF#refs/*/}
        fi
        VERSION=$(echo $GIT_TAG | cut -d'v' -f2)
        NAME="duploctl-${VERSION}"
        PACKAGE_NAME="duplocloud_client-${VERSION}"
        RELEASE_URL="${REPO_URL}/releases/download/${GIT_TAG}"
        echo "NOTES_ARTIFACT=notes-${GIT_TAG}" >> $GITHUB_OUTPUT
        echo "GIT_TAG=${GIT_TAG}" >> $GITHUB_OUTPUT
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "NAME=${NAME}" >> $GITHUB_OUTPUT
        echo "PACKAGE_NAME=${PACKAGE_NAME}" >> $GITHUB_OUTPUT
        echo "RELEASE_URL=${RELEASE_URL}" >> $GITHUB_OUTPUT
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_OUTPUT
    
    - name: Download Installer Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.set_tag.outputs.NAME }}-*
        path: artifacts
        merge-multiple: false
    
    - name: Download Package Artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: duplocloud_client-*
        path: artifacts
    
    - name: Download Notes
      uses: actions/download-artifact@v4
      with:
        pattern: ${{ steps.set_tag.outputs.NOTES_ARTIFACT }}

    # turn notes into multi line env var
    - name: Prep Notes
      env:
        NOTES_ARTIFACT: ${{ steps.set_tag.outputs.NOTES_ARTIFACT }}
      run: |
        RELEASE_NOTES="$(cat ${NOTES_ARTIFACT}/notes.md)"
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
        echo "$RELEASE_NOTES" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Stage Release Artifacts
      shell: bash
      env:
        PACKAGE_NAME: ${{ steps.set_tag.outputs.PACKAGE_NAME }}
      run: |
        ls -l artifacts
        for d in artifacts/*; do
          name=$(basename $d)
          dest="dist/${name}.tar.gz"
          tar -czvf "$dest" -C $d .
        done
        package="$(find artifacts -type f -name "duplocloud_client-*.tar.gz")"
        echo "Package: $package"
        pkg_name="$(basename $package)"
        cp "$package" "dist/${pkg_name}"
        find dist -type f -name "*.tar.gz" -execdir shasum -a 256 {} \; >> dist/checksums.txt
        echo "Created Release Artifacts"
        ls -l dist

    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v2
      if: inputs.push == true
      with:
        name: ${{ steps.set_tag.outputs.GIT_TAG }}
        tag_name: ${{ steps.set_tag.outputs.GIT_TAG }}
        prerelease: false
        files: |
          dist/*
        body: |

          [[![Publish](https://github.com/duplocloud/duploctl/actions/workflows/publish.yml/badge.svg)](https://github.com/duplocloud/duploctl/actions/workflows/publish.yml)](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ${{ env.RELEASE_NOTES }}

          ### Installation

          PIP PyPi: 
          [duplocloud-client](https://pypi.org/project/duplocloud-client/${{ steps.set_tag.outputs.VERSION }}/)
          ```sh
          pip install duplocloud-client==${{ steps.set_tag.outputs.VERSION }}
          ```

          PIP Sdist:
          The dowload below named `${{ steps.set_tag.outputs.PACKAGE_NAME }}.tar.gz` is the sdist of the package. 
          ```sh
          pip install ${{ steps.set_tag.outputs.RELEASE_URL }}/${{ steps.set_tag.outputs.PACKAGE_NAME }}.tar.gz
          ```
          
          PIP From Source:  
          Install directly from the version tag on GitHub. 
          ```sh
          pip install git+${{ steps.set_tag.outputs.REPO_URL }}.git@${{ steps.set_tag.outputs.GIT_TAG }}
          ```

          Dockerhub:  
          [duplocloud/duploctl:${{ steps.set_tag.outputs.GIT_TAG }}](https://hub.docker.com/r/duplocloud/duploctl)
          ```sh
          docker pull duplocloud/duploctl:${{ steps.set_tag.outputs.GIT_TAG }}
          ```

          Install CLI to Path Linux:
          ```sh
          curl -s -L ${{ steps.set_tag.outputs.RELEASE_URL }}/duploctl-${{ steps.set_tag.outputs.VERSION }}-linux-amd64.tar.gz | tar xvz - -C /usr/local/bin
          ```

          Homebrew single binary:
          ```sh
          brew install duplocloud/tap/duploctl
          ```

          Homebrew with PIP:
          ```sh
          brew install duplocloud/tap/duploctl --with-pip
          ```
          
          Build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

    - name: Post to a Slack channel
      id: slack
      uses: slackapi/slack-github-action@v1.25.0
      if: inputs.push == true
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      with:
        channel-id: ${{ vars.SLACK_CHANNEL_ID }}
        slack-message: |
          duploctl ${{ steps.set_tag.outputs.GIT_TAG }} is out! 
          ${{ steps.release.outputs.url }}

    - name: Job Summary
      env:
        GIT_TAG: ${{ steps.set_tag.outputs.GIT_TAG }}
        URL: ${{ steps.release.outputs.url }}
        VERSION: ${{ steps.set_tag.outputs.VERSION }}
      run: |
        cat <<EOF >> $GITHUB_STEP_SUMMARY
        Tag: $GIT_TAG
        Release: $URL
        Docker: duplocloud/duploctl:${GIT_TAG}
        PyPi: duplocloud-client==${VERSION}
        EOF
    