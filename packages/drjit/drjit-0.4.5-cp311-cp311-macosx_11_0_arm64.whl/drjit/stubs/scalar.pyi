from typing import Any, Callable, Iterable, Iterator, Tuple, List, TypeVar, Union, overload
import drjit
import drjit as dr

class Array0b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0b, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0f, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0f64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0i, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0i64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0i64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0u, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array0u64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array0u64, *args) -> None: ...
    label = ...

    def assign(self, other): ...
    ...

class Array1b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1b, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1f, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1f64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1i, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1i64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1i64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1u, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array1u64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array1u64, *args) -> None: ...
    label = ...
    x = ...

    def assign(self, other): ...
    ...

class Array21b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array21b, *args) -> None: ...
    class Array1b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1b, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array22b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array22b, *args) -> None: ...
    class Array2b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array2b, *args) -> None: ...
        label = ...
        x = ...
        y = ...

        def assign(self, other): ...
        ...

    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array23b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array23b, *args) -> None: ...
    class Array3b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3b, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array24b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array24b, *args) -> None: ...
    class Array4b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4b, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2b, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2f, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2f64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2i, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2i64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2i64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2u, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array2u64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array2u64, *args) -> None: ...
    label = ...
    x = ...
    y = ...

    def assign(self, other): ...
    ...

class Array33b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array33b, *args) -> None: ...
    class Array3b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3b, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3b, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3i, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3i64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3i64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3u, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array3u64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array3u64, *args) -> None: ...
    label = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array41b, *args) -> None: ...
    class Array1b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1b, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array41f, *args) -> None: ...
    class Array1f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1f, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array41f64, *args) -> None: ...
    class Array1f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1f64, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array41i, *args) -> None: ...
    class Array1i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1i, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array41u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array41u, *args) -> None: ...
    class Array1u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1u, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array43b, *args) -> None: ...
    class Array3b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3b, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array43f, *args) -> None: ...
    class Array3f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array43f64, *args) -> None: ...
    class Array3f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array43i, *args) -> None: ...
    class Array3i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3i, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array43u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array43u, *args) -> None: ...
    class Array3u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3u, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array441b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array441b, *args) -> None: ...
    class Array41b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array41b, *args) -> None: ...
        class Array1b(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array1b, *args) -> None: ...
            label = ...
            x = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array443b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array443b, *args) -> None: ...
    class Array43b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array43b, *args) -> None: ...
        class Array3b(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array3b, *args) -> None: ...
            label = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array444b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array444b, *args) -> None: ...
    class Array44b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array44b, *args) -> None: ...
        class Array4b(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array4b, *args) -> None: ...
            label = ...
            w = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array44b, *args) -> None: ...
    class Array4b(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4b, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array44f, *args) -> None: ...
    class Array4f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array44f64, *args) -> None: ...
    class Array4f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f64, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array44i, *args) -> None: ...
    class Array4i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4i, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array44u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array44u, *args) -> None: ...
    class Array4u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4u, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4b(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4b, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4f, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4f64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4i, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4i64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4i64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4u, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Array4u64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Array4u64, *args) -> None: ...
    label = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class ArrayXb(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXb, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXb, arg0: bool) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXb, arg0: drjit.scalar.ArrayXb) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXb, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXb, arg0: drjit.scalar.ArrayXb) -> None: ...
    ...

class ArrayXf(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXf, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: float) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf) -> None: ...
    ...

class ArrayXf64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: float) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXf64, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf64) -> None: ...
    ...

class ArrayXi(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXi, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi) -> None: ...
    ...

class ArrayXi64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXi64, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi64) -> None: ...
    ...

class ArrayXu(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
    ...

class ArrayXu64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, *args) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: int) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.ArrayXu64, *args) -> None: ...
    label = ...

    def assign(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu64) -> None: ...
    ...

class Complex21f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex21f, *args) -> None: ...
    class Array1f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1f, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex21f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex21f64, *args) -> None: ...
    class Array1f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array1f64, *args) -> None: ...
        label = ...
        x = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex23f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex23f, *args) -> None: ...
    class Array3f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex23f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex23f64, *args) -> None: ...
    class Array3f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex24f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex24f, *args) -> None: ...
    class Array4f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex24f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex24f64, *args) -> None: ...
    class Array4f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f64, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex2f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex2f, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Complex2f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Complex2f64, *args) -> None: ...
    imag = ...
    label = ...
    real = ...

    def assign(self, other): ...
    ...

class Loop:
    def __init__(self: drjit.scalar.Loop, arg0: str, *args) -> None: ...
    def __call__(self: drjit.scalar.Loop, arg0: bool) -> bool: ...
    def init(self: drjit.scalar.Loop) -> None: ...
    def put(self: drjit.scalar.Loop, *args) -> None: ...
    def set_max_iterations(self: drjit.scalar.Loop, arg0: bool) -> None: ...
    def set_uniform(self: drjit.scalar.Loop, arg0: bool) -> None: ...
    ...

class Matrix2f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix2f, *args) -> None: ...
    class Array2f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array2f, *args) -> None: ...
        label = ...
        x = ...
        y = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix2f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix2f64, *args) -> None: ...
    class Array2f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array2f64, *args) -> None: ...
        label = ...
        x = ...
        y = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix2i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix2i, *args) -> None: ...
    class Array2i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array2i, *args) -> None: ...
        label = ...
        x = ...
        y = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix2u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix2u, *args) -> None: ...
    class Array2u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array2u, *args) -> None: ...
        label = ...
        x = ...
        y = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix3f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix3f, *args) -> None: ...
    class Array3f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix3f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix3f64, *args) -> None: ...
    class Array3f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix3i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix3i, *args) -> None: ...
    class Array3i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3i, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix3u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix3u, *args) -> None: ...
    class Array3u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3u, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix41f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix41f, *args) -> None: ...
    class Array41f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array41f, *args) -> None: ...
        class Array1f(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array1f, *args) -> None: ...
            label = ...
            x = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix41f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix41f64, *args) -> None: ...
    class Array41f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array41f64, *args) -> None: ...
        class Array1f64(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array1f64, *args) -> None: ...
            label = ...
            x = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix41i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix41i, *args) -> None: ...
    class Array41i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array41i, *args) -> None: ...
        class Array1i(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array1i, *args) -> None: ...
            label = ...
            x = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix41u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix41u, *args) -> None: ...
    class Array41u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array41u, *args) -> None: ...
        class Array1u(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array1u, *args) -> None: ...
            label = ...
            x = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix43f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix43f, *args) -> None: ...
    class Array43f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array43f, *args) -> None: ...
        class Array3f(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
            label = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix43f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix43f64, *args) -> None: ...
    class Array43f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array43f64, *args) -> None: ...
        class Array3f64(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
            label = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix43i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix43i, *args) -> None: ...
    class Array43i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array43i, *args) -> None: ...
        class Array3i(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array3i, *args) -> None: ...
            label = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix43u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix43u, *args) -> None: ...
    class Array43u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array43u, *args) -> None: ...
        class Array3u(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array3u, *args) -> None: ...
            label = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix44f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix44f, *args) -> None: ...
    class Array44f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array44f, *args) -> None: ...
        class Array4f(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array4f, *args) -> None: ...
            label = ...
            w = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix44f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix44f64, *args) -> None: ...
    class Array44f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array44f64, *args) -> None: ...
        class Array4f64(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array4f64, *args) -> None: ...
            label = ...
            w = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix44i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix44i, *args) -> None: ...
    class Array44i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array44i, *args) -> None: ...
        class Array4i(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array4i, *args) -> None: ...
            label = ...
            w = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix44u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix44u, *args) -> None: ...
    class Array44u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array44u, *args) -> None: ...
        class Array4u(drjit.ArrayBase):
            def __init__(self: drjit.scalar.Array4u, *args) -> None: ...
            label = ...
            w = ...
            x = ...
            y = ...
            z = ...

            def assign(self, other): ...
            ...

        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix4f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix4f, *args) -> None: ...
    class Array4f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix4f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix4f64, *args) -> None: ...
    class Array4f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4f64, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix4i(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix4i, *args) -> None: ...
    class Array4i(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4i, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class Matrix4u(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Matrix4u, *args) -> None: ...
    class Array4u(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array4u, *args) -> None: ...
        label = ...
        w = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    label = ...

    def assign(self, other): ...
    ...

class PCG32:
    @overload
    def __init__(self: drjit.scalar.PCG32, size: int = 1, initstate: int = 9600629759793949339, initseq: int = 15726070495360670683) -> None: ...
    @overload
    def __init__(self: drjit.scalar.PCG32, arg0: drjit.scalar.PCG32) -> None: ...
    inc = ...
    state = ...

    @overload
    def next_float32(self: drjit.scalar.PCG32) -> float: ...
    @overload
    def next_float32(self: drjit.scalar.PCG32, arg0: bool) -> float: ...
    @overload
    def next_float64(self: drjit.scalar.PCG32) -> float: ...
    @overload
    def next_float64(self: drjit.scalar.PCG32, arg0: bool) -> float: ...
    @overload
    def next_uint32(self: drjit.scalar.PCG32) -> int: ...
    @overload
    def next_uint32(self: drjit.scalar.PCG32, arg0: bool) -> int: ...
    def next_uint32_bounded(self: drjit.scalar.PCG32, bound: int, mask: bool = True) -> int: ...
    @overload
    def next_uint64(self: drjit.scalar.PCG32) -> int: ...
    @overload
    def next_uint64(self: drjit.scalar.PCG32, arg0: bool) -> int: ...
    def next_uint64_bounded(self: drjit.scalar.PCG32, bound: int, mask: bool = True) -> int: ...
    def seed(self: drjit.scalar.PCG32, size: int = 1, initstate: int = 9600629759793949339, initseq: int = 15726070495360670683) -> None: ...
    ...

class Quaternion4f(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Quaternion4f, *args) -> None: ...
    class Complex2f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Complex2f, *args) -> None: ...
        imag = ...
        label = ...
        real = ...

        def assign(self, other): ...
        ...

    class Array3f(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class Quaternion4f64(drjit.ArrayBase):
    def __init__(self: drjit.scalar.Quaternion4f64, *args) -> None: ...
    class Complex2f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Complex2f64, *args) -> None: ...
        imag = ...
        label = ...
        real = ...

        def assign(self, other): ...
        ...

    class Array3f64(drjit.ArrayBase):
        def __init__(self: drjit.scalar.Array3f64, *args) -> None: ...
        label = ...
        x = ...
        y = ...
        z = ...

        def assign(self, other): ...
        ...

    imag = ...
    label = ...
    real = ...
    w = ...
    x = ...
    y = ...
    z = ...

    def assign(self, other): ...
    ...

class TensorXb(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXb) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXb, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXb, array: drjit.scalar.ArrayXb) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXb, array: drjit.scalar.ArrayXb, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXb, arg0: drjit.scalar.TensorXb) -> None: ...
    class ArrayXb(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXb, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXb, arg0: bool) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXb, arg0: drjit.scalar.ArrayXb) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXb, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXb, arg0: drjit.scalar.ArrayXb) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXb, arg0: drjit.scalar.TensorXb) -> None: ...
    ...

class TensorXf(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, array: drjit.scalar.ArrayXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, array: drjit.scalar.ArrayXf, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXf(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXf, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: float) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXf, arg0: drjit.scalar.ArrayXf) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXf, arg0: drjit.scalar.TensorXf) -> None: ...
    ...

class TensorXf64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, array: drjit.scalar.ArrayXf64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, array: drjit.scalar.ArrayXf64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXf64(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: float) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXf64, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXf64, arg0: drjit.scalar.ArrayXf64) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXf64, arg0: drjit.scalar.TensorXf64) -> None: ...
    ...

class TensorXi(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, array: drjit.scalar.ArrayXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, array: drjit.scalar.ArrayXi, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXi(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXi, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXi, arg0: drjit.scalar.ArrayXi) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXi, arg0: drjit.scalar.TensorXi) -> None: ...
    ...

class TensorXi64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, array: drjit.scalar.ArrayXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, array: drjit.scalar.ArrayXi64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXi64(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXi64, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXi64, arg0: drjit.scalar.ArrayXi64) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXi64, arg0: drjit.scalar.TensorXi64) -> None: ...
    ...

class TensorXu(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, array: drjit.scalar.ArrayXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, array: drjit.scalar.ArrayXu, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXu, arg0: drjit.scalar.TensorXu) -> None: ...
    ...

class TensorXu64(drjit.ArrayBase):
    @overload
    def __init__(self: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, array: object) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, array: drjit.scalar.ArrayXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, array: drjit.scalar.ArrayXu64, shape: List[int]) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXi) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXu) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXi64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXu64) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXf) -> None: ...
    @overload
    def __init__(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXf64) -> None: ...
    class ArrayXu64(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu64, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu64, arg0: drjit.scalar.ArrayXu64) -> None: ...
        ...

    class ArrayXu(drjit.ArrayBase):
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: int) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXi64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXf64) -> None: ...
        @overload
        def __init__(self: drjit.scalar.ArrayXu, *args) -> None: ...
        label = ...

        def assign(self: drjit.scalar.ArrayXu, arg0: drjit.scalar.ArrayXu) -> None: ...
        ...

    array = ...
    label = ...
    ndim = ...
    shape = ...

    def assign(self: drjit.scalar.TensorXu64, arg0: drjit.scalar.TensorXu64) -> None: ...
    ...

class Texture1f:
    @overload
    def __init__(self: drjit.scalar.Texture1f, shape: List[int[1]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture1f, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array1f]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True): ...
    def eval_cuda(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[List[float][2]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[List[float][2]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[List[float][2]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture1f, pos: drjit.scalar.Array1f, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture1f) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture1f) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture1f, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture1f, value: drjit.scalar.ArrayXf, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture1f): ...
    def use_accel(self: drjit.scalar.Texture1f) -> bool: ...
    def value(self: drjit.scalar.Texture1f) -> drjit.scalar.ArrayXf: ...
    def wrap_mode(self: drjit.scalar.Texture1f) -> drjit.WrapMode: ...
    ...

class Texture1f64:
    @overload
    def __init__(self: drjit.scalar.Texture1f64, shape: List[int[1]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture1f64, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array1f64]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True): ...
    def eval_cuda(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[List[float][2]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[List[float][2]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[List[float][2]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture1f64, pos: drjit.scalar.Array1f64, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture1f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture1f64) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture1f64, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture1f64, value: drjit.scalar.ArrayXf64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture1f64): ...
    def use_accel(self: drjit.scalar.Texture1f64) -> bool: ...
    def value(self: drjit.scalar.Texture1f64) -> drjit.scalar.ArrayXf64: ...
    def wrap_mode(self: drjit.scalar.Texture1f64) -> drjit.WrapMode: ...
    ...

class Texture2f:
    @overload
    def __init__(self: drjit.scalar.Texture2f, shape: List[int[2]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture2f, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array2f]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array2f], List[drjit.scalar.Matrix2f]]: ...
    def eval_cuda(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[List[float][4]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[List[float][4]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[List[float][4]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture2f, pos: drjit.scalar.Array2f, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture2f) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture2f) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture2f, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture2f, value: drjit.scalar.ArrayXf, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture2f): ...
    def use_accel(self: drjit.scalar.Texture2f) -> bool: ...
    def value(self: drjit.scalar.Texture2f) -> drjit.scalar.ArrayXf: ...
    def wrap_mode(self: drjit.scalar.Texture2f) -> drjit.WrapMode: ...
    ...

class Texture2f64:
    @overload
    def __init__(self: drjit.scalar.Texture2f64, shape: List[int[2]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture2f64, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array2f64]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array2f64], List[drjit.scalar.Matrix2f64]]: ...
    def eval_cuda(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[List[float][4]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[List[float][4]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[List[float][4]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture2f64, pos: drjit.scalar.Array2f64, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture2f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture2f64) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture2f64, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture2f64, value: drjit.scalar.ArrayXf64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture2f64): ...
    def use_accel(self: drjit.scalar.Texture2f64) -> bool: ...
    def value(self: drjit.scalar.Texture2f64) -> drjit.scalar.ArrayXf64: ...
    def wrap_mode(self: drjit.scalar.Texture2f64) -> drjit.WrapMode: ...
    ...

class Texture3f:
    @overload
    def __init__(self: drjit.scalar.Texture3f, shape: List[int[3]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture3f, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array3f]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array3f], List[drjit.scalar.Matrix3f]]: ...
    def eval_cuda(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[List[float][8]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[List[float][8]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[List[float][8]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture3f, pos: drjit.scalar.Array3f, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture3f) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture3f) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture3f, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture3f, value: drjit.scalar.ArrayXf, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture3f): ...
    def use_accel(self: drjit.scalar.Texture3f) -> bool: ...
    def value(self: drjit.scalar.Texture3f) -> drjit.scalar.ArrayXf: ...
    def wrap_mode(self: drjit.scalar.Texture3f) -> drjit.WrapMode: ...
    ...

class Texture3f64:
    @overload
    def __init__(self: drjit.scalar.Texture3f64, shape: List[int[3]], channels: int, use_accel: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    @overload
    def __init__(self: drjit.scalar.Texture3f64, tensor, use_accel: bool = True, migrate: bool = True, filter_mode: drjit.FilterMode = FilterMode.Linear, wrap_mode: drjit.WrapMode = WrapMode.Clamp) -> None: ...
    shape = ...

    def eval(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[float]: ...
    def eval_cubic(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True, force_drjit: bool = False) -> List[float]: ...
    def eval_cubic_grad(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array3f64]]: ...
    def eval_cubic_hessian(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> Tuple[List[float], List[drjit.scalar.Array3f64], List[drjit.scalar.Matrix3f64]]: ...
    def eval_cuda(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[float]: ...
    def eval_fetch(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[List[float][8]]: ...
    def eval_fetch_cuda(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[List[float][8]]: ...
    def eval_fetch_drjit(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[List[float][8]]: ...
    def eval_nonaccel(self: drjit.scalar.Texture3f64, pos: drjit.scalar.Array3f64, active: bool = True) -> List[float]: ...
    def filter_mode(self: drjit.scalar.Texture3f64) -> drjit.FilterMode: ...
    def migrated(self: drjit.scalar.Texture3f64) -> bool: ...
    def set_tensor(self: drjit.scalar.Texture3f64, tensor, migrate: bool = False) -> None: ...
    def set_value(self: drjit.scalar.Texture3f64, value: drjit.scalar.ArrayXf64, migrate: bool = False) -> None: ...
    def tensor(self: drjit.scalar.Texture3f64): ...
    def use_accel(self: drjit.scalar.Texture3f64) -> bool: ...
    def value(self: drjit.scalar.Texture3f64) -> drjit.scalar.ArrayXf64: ...
    def wrap_mode(self: drjit.scalar.Texture3f64) -> drjit.WrapMode: ...
    ...

