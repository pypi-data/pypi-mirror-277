# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1ClusterSecurityOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'encrypt_instance_volumes': 'bool',
        'kms_key_id': 'str',
        'protect_instance_metadata': 'bool'
    }

    attribute_map = {
        'encrypt_instance_volumes': 'encryptInstanceVolumes',
        'kms_key_id': 'kmsKeyId',
        'protect_instance_metadata': 'protectInstanceMetadata'
    }

    def __init__(self, encrypt_instance_volumes: 'bool' =None, kms_key_id: 'str' =None, protect_instance_metadata: 'bool' =None):  # noqa: E501
        """V1ClusterSecurityOptions - a model defined in Swagger"""  # noqa: E501
        self._encrypt_instance_volumes = None
        self._kms_key_id = None
        self._protect_instance_metadata = None
        self.discriminator = None
        if encrypt_instance_volumes is not None:
            self.encrypt_instance_volumes = encrypt_instance_volumes
        if kms_key_id is not None:
            self.kms_key_id = kms_key_id
        if protect_instance_metadata is not None:
            self.protect_instance_metadata = protect_instance_metadata

    @property
    def encrypt_instance_volumes(self) -> 'bool':
        """Gets the encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._encrypt_instance_volumes

    @encrypt_instance_volumes.setter
    def encrypt_instance_volumes(self, encrypt_instance_volumes: 'bool'):
        """Sets the encrypt_instance_volumes of this V1ClusterSecurityOptions.


        :param encrypt_instance_volumes: The encrypt_instance_volumes of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._encrypt_instance_volumes = encrypt_instance_volumes

    @property
    def kms_key_id(self) -> 'str':
        """Gets the kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id: 'str'):
        """Sets the kms_key_id of this V1ClusterSecurityOptions.


        :param kms_key_id: The kms_key_id of this V1ClusterSecurityOptions.  # noqa: E501
        :type: str
        """

        self._kms_key_id = kms_key_id

    @property
    def protect_instance_metadata(self) -> 'bool':
        """Gets the protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501


        :return: The protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501
        :rtype: bool
        """
        return self._protect_instance_metadata

    @protect_instance_metadata.setter
    def protect_instance_metadata(self, protect_instance_metadata: 'bool'):
        """Sets the protect_instance_metadata of this V1ClusterSecurityOptions.


        :param protect_instance_metadata: The protect_instance_metadata of this V1ClusterSecurityOptions.  # noqa: E501
        :type: bool
        """

        self._protect_instance_metadata = protect_instance_metadata

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ClusterSecurityOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1ClusterSecurityOptions') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterSecurityOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1ClusterSecurityOptions') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
