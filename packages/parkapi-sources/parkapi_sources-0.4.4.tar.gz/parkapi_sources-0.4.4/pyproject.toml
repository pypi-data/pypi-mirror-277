[project]
name = "parkapi_sources"
dynamic = ["version"]
authors = [
    {name="Ernesto Ruge, binary butterfly GmbH", email="ernesto.ruge@binary-butterfly.de"},
]
maintainers = [
    {name="Ernesto Ruge, binary butterfly GmbH", email="ernesto.ruge@binary-butterfly.de"},
]
description = "ParkAPI Sources is a collection of converters from several different data sources to normalized ParkAPI data."
readme = "README.md"
requires-python = ">=3.10"
keywords = [
    "data",
    "parking",
    "converter",
    "mobility",
    "car",
    "bike"
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]

dependencies = [
    "validataclass~=0.10.0",
    "pyproj~=3.6.1",
    "lxml~=5.2.1",
    "openpyxl~=3.1.2",
    "requests~=2.32.2",
    "beautifulsoup4~=4.12.3",
]

[project.optional-dependencies]
testing = [
    "black~=24.4.2",
    "ruff~=0.4.1",
    "pytest~=8.2.0",
    "pytest-cov~=5.0.0",
    "requests-mock~=1.12.1",
]

[build-system]
requires = [
    "setuptools",
    "setuptools_scm",
    "wheel",
]
build-backend = "setuptools.build_meta"

[tool.setuptools.package-data]
"pkgname" = ["py.typed"]

[tool.setuptools_scm]
write_to = "src/parkapi_sources/_version.py"
version_scheme = "post-release"

[tool.pytest.ini_options]
addopts = "-ra --import-mode=importlib --cov-context=test --cov-report="
testpaths = ["tests"]
python_files = ["*_test.py", "*Test.py"]
python_classes = ["*Test"]
pythonpath = ["src"]

# Fail on warnings
filterwarnings = "error"

[tool.ruff]
lint.select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "Q", # pydocstyle
    "T", # mypy
    "R", # pylint
    "S", # flake8
    "I", # isort
    "C", # flake8-comprehensions
    "B", # flake8-bugbear
]

lint.ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "S101", # use of assert detected
]

lint.fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]

exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "temp",
]

line-length = 140

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S105"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"
docstring-quotes = "double"

[tool.black]
line-length = 140
skip-string-normalization = true
