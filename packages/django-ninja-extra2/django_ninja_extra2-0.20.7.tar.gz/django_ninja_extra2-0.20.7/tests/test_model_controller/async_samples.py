from asgiref.sync import sync_to_async
from ninja.pagination import LimitOffsetPagination

from ninja_extra import (
    ModelAsyncEndpointFactory,
    ModelConfig,
    ModelControllerBase,
    ModelPagination,
    ModelSchemaConfig,
    ModelService,
    api_controller,
)
from ninja_extra.schemas import NinjaPaginationResponseSchema

from ..models import Event
from .samples import CreateEventSchema, EventSchema


@api_controller("/event")
class AsyncEventModelControllerAutoGeneratedSchema(ModelControllerBase):
    model_config = ModelConfig(
        model=Event,
        async_routes=True,
        schema_config=ModelSchemaConfig(read_only_fields=["id", "category"]),
    )


@api_controller("/event-case-2")
class AsyncEventModelControllerWithDefinedSchema(ModelControllerBase):
    model_config = ModelConfig(
        model=Event,
        async_routes=True,
        create_schema=CreateEventSchema,
        retrieve_schema=EventSchema,
        update_schema=CreateEventSchema,
        patch_schema=CreateEventSchema,
        pagination=None,  # turn off pagination
    )


@api_controller("/event-case-3")
class AsyncEventModelControllerDifferentPagination(ModelControllerBase):
    model_config = ModelConfig(
        allowed_routes=[
            "list",
        ],
        model=Event,
        async_routes=True,
        retrieve_schema=EventSchema,
        pagination=ModelPagination(
            klass=LimitOffsetPagination, pagination_schema=NinjaPaginationResponseSchema
        ),
    )


@api_controller("/event-case-4")
class AsyncEventModelControllerRetrieveAndList(ModelControllerBase):
    model_config = ModelConfig(
        allowed_routes=[
            "find_one",
            "list",
        ],
        model=Event,
        async_routes=True,
        retrieve_schema=EventSchema,
    )


@api_controller("/event-custom")
class AsyncEventController(ModelService):
    def __init__(self):
        ModelService.__init__(self, model=Event)

    create_event = ModelAsyncEndpointFactory.create(
        schema_in=CreateEventSchema,
        schema_out=EventSchema,
        custom_handler=lambda self, schema, **kw: self.create_async(schema, **kw),
    )

    update_event = ModelAsyncEndpointFactory.update(
        path="/{int:event_id}",
        lookup_param="event_id",
        schema_in=CreateEventSchema,
        schema_out=EventSchema,
        object_getter=lambda self, pk, **kw: self.get_one_async(pk),
        custom_handler=lambda self, **kw: self.update_async(**kw),
    )

    patch_event = ModelAsyncEndpointFactory.patch(
        path="/{int:event_id}",
        lookup_param="event_id",
        schema_in=CreateEventSchema,
        schema_out=EventSchema,
        object_getter=lambda self, pk, **kw: self.get_one_async(pk),
        custom_handler=lambda self, **kw: self.patch_async(**kw),
    )

    retrieve_event = ModelAsyncEndpointFactory.find_one(
        path="/{int:event_id}",
        lookup_param="event_id",
        schema_out=EventSchema,
        object_getter=lambda self, pk, **kw: self.get_one_async(pk),
    )

    list_events = ModelAsyncEndpointFactory.list(
        path="/?event_id=str",
        schema_out=EventSchema,
        queryset_getter=lambda self, **kw: sync_to_async(
            Event.objects.filter, thread_sensitive=True
        )(id=kw["event_id"]),
    )

    list_event_names = ModelAsyncEndpointFactory.list(
        path="/event-names",
        schema_out=str,
        queryset_getter=lambda self, **kw: ["event1", "event2", "event3"],
    )

    delete_event = ModelAsyncEndpointFactory.delete(
        path="/{int:event_id}",
        lookup_param="event_id",
        object_getter=lambda self, pk, **kw: self.get_one_async(pk),
        custom_handler=lambda self, **kw: self.delete_async(**kw),
    )
