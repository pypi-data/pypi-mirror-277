import pytest
from asgiref.sync import sync_to_async

from ninja_extra.testing import TestAsyncClient

from ..models import Event
from .async_samples import (
    AsyncEventController,
    AsyncEventModelControllerAutoGeneratedSchema,
    AsyncEventModelControllerDifferentPagination,
    AsyncEventModelControllerRetrieveAndList,
    AsyncEventModelControllerWithDefinedSchema,
)


async def run_model_action_in_async(func, **kwargs):
    return await sync_to_async(func, thread_sensitive=True)(**kwargs)


@pytest.mark.django_db
@pytest.mark.asyncio
async def test_event_model_controller_with_retrieve_and_list_async():
    event = await run_model_action_in_async(
        Event.objects.create,
        title="Testing",
        end_date="2020-01-02",
        start_date="2020-01-01",
    )

    client = TestAsyncClient(AsyncEventModelControllerRetrieveAndList)
    # POST
    res = await client.post(
        "/",
        json={"start_date": "2020-01-01", "end_date": "2020-01-02", "title": "test"},
    )
    assert res.status_code == 405

    res = await client.delete(f"/{event.id}")
    assert res.status_code == 405

    res = await client.get(f"/{event.id}")
    data = res.json()
    data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "Testing",
    }
    assert res.status_code == 200

    # LIST
    res = await client.get("/")
    assert res.status_code == 200
    data = res.json()
    assert data["results"]
    assert data["count"]

    await run_model_action_in_async(event.delete)


@pytest.mark.django_db
@pytest.mark.asyncio
async def test_event_model_controller_with_different_pagination_async():
    event = await run_model_action_in_async(
        Event.objects.create,
        title="Testing",
        end_date="2020-01-02",
        start_date="2020-01-01",
    )

    client = TestAsyncClient(AsyncEventModelControllerDifferentPagination)
    # POST
    res = await client.post(
        "/",
        json={"start_date": "2020-01-01", "end_date": "2020-01-02", "title": "test"},
    )
    assert res.status_code == 405

    res = await client.delete("/")
    assert res.status_code == 405

    # LIST
    res = await client.get("/")
    assert res.status_code == 200
    data = res.json()
    assert data["items"]
    assert data["count"]

    await run_model_action_in_async(event.delete)


@pytest.mark.django_db
@pytest.mark.asyncio
async def test_event_model_controller_auto_gen_schema_async():
    test_item = {"start_date": "2020-01-01", "end_date": "2020-01-02", "title": "test"}

    client = TestAsyncClient(AsyncEventModelControllerAutoGeneratedSchema)
    # POST
    res = await client.post("/", json=test_item)
    assert res.status_code == 201
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "category": None,
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }
    # GET
    res = await client.get(f"/{working_id}")
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "category": None,
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }

    # LIST
    res = await client.get("/")
    assert res.status_code == 200
    data = res.json()
    assert data["count"]
    assert data["results"]

    # PUT
    test_item.update(title="test updated")
    res = await client.put(f"/{working_id}", json=test_item)
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "category": None,
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated",
    }
    # PATCH
    test_item.update(title="test updated patch")
    res = await client.patch(f"/{working_id}", json={"title": "test updated patch"})
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "category": None,
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated patch",
    }
    # DELETE
    res = await client.delete(f"/{working_id}")
    assert res.status_code == 204


@pytest.mark.django_db
@pytest.mark.asyncio
async def test_event_model_controller_with_schema_async():
    test_item = {"start_date": "2020-01-01", "end_date": "2020-01-02", "title": "test"}

    client = TestAsyncClient(AsyncEventModelControllerWithDefinedSchema)
    # POST
    res = await client.post("/", json=test_item)
    assert res.status_code == 201
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }
    # GET
    res = await client.get(f"/{working_id}")
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }
    # LIST
    res = await client.get("/")
    assert res.status_code == 200
    data = res.json()
    assert len(data) == 1

    # PUT
    test_item.update(title="test updated")
    res = await client.put(f"/{working_id}", json=test_item)
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated",
    }
    # PATCH
    test_item.update(title="test updated patch")
    res = await client.patch(f"/{working_id}", json=test_item)
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated patch",
    }
    # DELETE
    res = await client.delete(f"/{working_id}")
    assert res.status_code == 204


@pytest.mark.django_db
@pytest.mark.asyncio
async def test_event_model_controller_manual_control_async():
    test_item = {"start_date": "2020-01-01", "end_date": "2020-01-02", "title": "test"}

    client = TestAsyncClient(AsyncEventController)
    # POST
    res = await client.post("/", json=test_item)
    assert res.status_code == 201
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }
    # GET
    res = await client.get(f"/{working_id}")
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test",
    }
    # LIST
    res = await client.get("/", query={"event_id": working_id})
    assert res.status_code == 200
    data = res.json()
    assert data["count"]
    assert data["results"]
    # LIST Event Names
    res = await client.get("/event-names", query={"event_id": working_id})
    assert res.status_code == 200
    data = res.json()
    assert data["count"] == 3
    assert data["results"] == ["event1", "event2", "event3"]
    # PUT
    test_item.update(title="test updated")
    res = await client.put(f"/{working_id}", json=test_item)
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated",
    }
    # PATCH
    test_item.update(title="test updated patch")
    res = await client.patch(f"/{working_id}", json=test_item)
    assert res.status_code == 200
    data = res.json()
    working_id = data.pop("id")
    assert data == {
        "end_date": "2020-01-02",
        "start_date": "2020-01-01",
        "title": "test updated patch",
    }
    # DELETE
    res = await client.delete(f"/{working_id}")
    assert res.status_code == 204
