# coding: utf-8

"""
    everai/apps/v1/worker.proto

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: version not set
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from generated.apps.models.app_route_auth_status import AppRouteAuthStatus
from generated.apps.models.v1_app_revision import V1AppRevision
from generated.apps.models.v1_app_status import V1AppStatus
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class V1App(BaseModel):
    """
    V1App
    """
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    route_path: Optional[StrictStr] = Field(default=None, description="default route path is same with app_name. While app_name has conflict, route_path is required.", alias="routePath")
    status: Optional[V1AppStatus] = None
    error_msg: Optional[StrictStr] = Field(default=None, alias="errorMsg")
    username: Optional[StrictStr] = None
    route_auth_status: Optional[AppRouteAuthStatus] = Field(default=None, alias="routeAuthStatus")
    route_public_key: Optional[StrictStr] = Field(default=None, alias="routePublicKey")
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    modified_at: Optional[datetime] = Field(default=None, alias="modifiedAt")
    labels: Optional[Dict[str, StrictStr]] = None
    current_revision: Optional[StrictStr] = Field(default=None, alias="currentRevision")
    revision: Optional[V1AppRevision] = None
    deployed: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "name", "userId", "routePath", "status", "errorMsg", "username", "routeAuthStatus", "routePublicKey", "createdAt", "modifiedAt", "labels", "currentRevision", "revision", "deployed"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of V1App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "current_revision",
                "deployed",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of revision
        if self.revision:
            _dict['revision'] = self.revision.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of V1App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "userId": obj.get("userId"),
            "routePath": obj.get("routePath"),
            "status": obj.get("status"),
            "errorMsg": obj.get("errorMsg"),
            "username": obj.get("username"),
            "routeAuthStatus": obj.get("routeAuthStatus"),
            "routePublicKey": obj.get("routePublicKey"),
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "labels": obj.get("labels"),
            "currentRevision": obj.get("currentRevision"),
            "revision": V1AppRevision.from_dict(obj.get("revision")) if obj.get("revision") is not None else None,
            "deployed": obj.get("deployed")
        })
        return _obj


