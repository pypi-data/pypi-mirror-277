# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ValueGraph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ValueGraph()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsValueGraph(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ValueGraph
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ValueGraph
    def Nodes(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from NodeKVP import NodeKVP
            obj = NodeKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ValueGraph
    def NodesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ValueGraph
    def NodesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ValueGraph
    def Leaves(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ValueGraph
    def LeavesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ValueGraph
    def LeavesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

def ValueGraphStart(builder):
    builder.StartObject(2)

def Start(builder):
    ValueGraphStart(builder)

def ValueGraphAddNodes(builder, nodes):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodes), 0)

def AddNodes(builder, nodes):
    ValueGraphAddNodes(builder, nodes)

def ValueGraphStartNodesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNodesVector(builder, numElems):
    return ValueGraphStartNodesVector(builder, numElems)

def ValueGraphAddLeaves(builder, leaves):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(leaves), 0)

def AddLeaves(builder, leaves):
    ValueGraphAddLeaves(builder, leaves)

def ValueGraphStartLeavesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartLeavesVector(builder, numElems):
    return ValueGraphStartLeavesVector(builder, numElems)

def ValueGraphEnd(builder):
    return builder.EndObject()

def End(builder):
    return ValueGraphEnd(builder)
