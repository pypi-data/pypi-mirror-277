# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FBBacktest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FBBacktest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFBBacktest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FBBacktest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FBBacktest
    def Indicators(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DataKVP import DataKVP
            obj = DataKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBBacktest
    def IndicatorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def IndicatorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # FBBacktest
    def Portfolio(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DataKVP import DataKVP
            obj = DataKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBBacktest
    def PortfolioLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def PortfolioIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # FBBacktest
    def Actions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DataKVP import DataKVP
            obj = DataKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FBBacktest
    def ActionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def ActionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FBBacktest
    def Cash(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBBacktest
    def CashAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBBacktest
    def CashLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def CashIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # FBBacktest
    def Pv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBBacktest
    def PvAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBBacktest
    def PvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def PvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # FBBacktest
    def Nv(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FBBacktest
    def NvAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # FBBacktest
    def NvLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FBBacktest
    def NvIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def FBBacktestStart(builder):
    builder.StartObject(6)

def Start(builder):
    FBBacktestStart(builder)

def FBBacktestAddIndicators(builder, indicators):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(indicators), 0)

def AddIndicators(builder, indicators):
    FBBacktestAddIndicators(builder, indicators)

def FBBacktestStartIndicatorsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIndicatorsVector(builder, numElems):
    return FBBacktestStartIndicatorsVector(builder, numElems)

def FBBacktestAddPortfolio(builder, portfolio):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(portfolio), 0)

def AddPortfolio(builder, portfolio):
    FBBacktestAddPortfolio(builder, portfolio)

def FBBacktestStartPortfolioVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPortfolioVector(builder, numElems):
    return FBBacktestStartPortfolioVector(builder, numElems)

def FBBacktestAddActions(builder, actions):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(actions), 0)

def AddActions(builder, actions):
    FBBacktestAddActions(builder, actions)

def FBBacktestStartActionsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartActionsVector(builder, numElems):
    return FBBacktestStartActionsVector(builder, numElems)

def FBBacktestAddCash(builder, cash):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cash), 0)

def AddCash(builder, cash):
    FBBacktestAddCash(builder, cash)

def FBBacktestStartCashVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartCashVector(builder, numElems):
    return FBBacktestStartCashVector(builder, numElems)

def FBBacktestAddPv(builder, pv):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(pv), 0)

def AddPv(builder, pv):
    FBBacktestAddPv(builder, pv)

def FBBacktestStartPvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPvVector(builder, numElems):
    return FBBacktestStartPvVector(builder, numElems)

def FBBacktestAddNv(builder, nv):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(nv), 0)

def AddNv(builder, nv):
    FBBacktestAddNv(builder, nv)

def FBBacktestStartNvVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartNvVector(builder, numElems):
    return FBBacktestStartNvVector(builder, numElems)

def FBBacktestEnd(builder):
    return builder.EndObject()

def End(builder):
    return FBBacktestEnd(builder)
