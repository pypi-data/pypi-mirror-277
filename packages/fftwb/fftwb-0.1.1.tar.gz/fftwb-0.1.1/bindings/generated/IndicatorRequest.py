# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class IndicatorRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = IndicatorRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsIndicatorRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # IndicatorRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # IndicatorRequest
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # IndicatorRequest
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .DataKVP import DataKVP
            obj = DataKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IndicatorRequest
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IndicatorRequest
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # IndicatorRequest
    def Parameters(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Parameter import Parameter
            obj = Parameter()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # IndicatorRequest
    def ParametersLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # IndicatorRequest
    def ParametersIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def IndicatorRequestStart(builder):
    builder.StartObject(3)

def Start(builder):
    IndicatorRequestStart(builder)

def IndicatorRequestAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    IndicatorRequestAddName(builder, name)

def IndicatorRequestAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    IndicatorRequestAddData(builder, data)

def IndicatorRequestStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return IndicatorRequestStartDataVector(builder, numElems)

def IndicatorRequestAddParameters(builder, parameters):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parameters), 0)

def AddParameters(builder, parameters):
    IndicatorRequestAddParameters(builder, parameters)

def IndicatorRequestStartParametersVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartParametersVector(builder, numElems):
    return IndicatorRequestStartParametersVector(builder, numElems)

def IndicatorRequestEnd(builder):
    return builder.EndObject()

def End(builder):
    return IndicatorRequestEnd(builder)
