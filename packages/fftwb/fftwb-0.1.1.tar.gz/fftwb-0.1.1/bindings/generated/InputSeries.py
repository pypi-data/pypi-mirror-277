# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class InputSeries(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = InputSeries()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsInputSeries(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # InputSeries
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # InputSeries
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # InputSeries
    def C0(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 100000.0

    # InputSeries
    def Dates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # InputSeries
    def DatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InputSeries
    def DatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # InputSeries
    def Data(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from DataKVP import DataKVP
            obj = DataKVP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # InputSeries
    def DataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # InputSeries
    def DataIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def InputSeriesStart(builder):
    builder.StartObject(4)

def Start(builder):
    InputSeriesStart(builder)

def InputSeriesAddType(builder, type):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)

def AddType(builder, type):
    InputSeriesAddType(builder, type)

def InputSeriesAddC0(builder, c0):
    builder.PrependFloat32Slot(1, c0, 100000.0)

def AddC0(builder, c0):
    InputSeriesAddC0(builder, c0)

def InputSeriesAddDates(builder, dates):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dates), 0)

def AddDates(builder, dates):
    InputSeriesAddDates(builder, dates)

def InputSeriesStartDatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDatesVector(builder, numElems):
    return InputSeriesStartDatesVector(builder, numElems)

def InputSeriesAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def AddData(builder, data):
    InputSeriesAddData(builder, data)

def InputSeriesStartDataVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartDataVector(builder, numElems):
    return InputSeriesStartDataVector(builder, numElems)

def InputSeriesEnd(builder):
    return builder.EndObject()

def End(builder):
    return InputSeriesEnd(builder)
