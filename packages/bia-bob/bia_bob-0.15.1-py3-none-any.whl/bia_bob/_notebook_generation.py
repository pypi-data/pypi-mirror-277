def generate_notebook(prompt, filename=None, modify_existing_notebook=False):
    """
    Generates a notebook from a given prompt and saves it to a file.
    If the filename is not specified, a filename will be generated by the language model.
    If the specified file exists already, it will be overwritten.

    Parameters
    ----------
    prompt
    filename, optional

    Returns
    -------
    filename
    """
    from ._utilities import create_system_prompt, generate_response
    from ._machinery import Context, init_assistant
    import os
    import json

    if Context.model is None:
        init_assistant()

    system_prompt = create_system_prompt().split("## Todos")[0] + f"""
    You have been asked to generate a notebook in the ipynb format. 
    Start the notebook with an introduction of the task.
    List the steps your are planning to do in the notebook. Do not use Python yet.
    Also labeling is an individual processing step. 
    Before starting to write code cells, add the disclaimer "This code is generated by an AI model using the [bia-bob project](https://github.com/haesleinhuepf/bia-bob). It is good scientific practice to check the code and results it produces carefully.".
    Import the libraries you are planning to use.
    Write one code cell for each processing step in the analysis. 
    For each individual processing step, write a markdown cell explaining what you are doing.
    By the end of each cell write code for showing the intermediate result:
    * Use stackview.insight() for showing images.
    * Use display() for showing dataframes.
    * Use print() for any other results.
    In the ipynb-json format you write, there is no output in any of the cells you write.
    There are no images displayed in the notebook you write.
    Your answer is in ipynb format.
    """

    if modify_existing_notebook:
        filename_extraction_prompt = f"""
        Extract the filename of the notebook that should be modified from the following prompt:

        ```json
        {prompt}
        ```

        Respond with the filename and nothing else.
        """
        filename = generate_response(chat_history=[], image=None, model=Context.model, system_prompt="", user_prompt=filename_extraction_prompt, vision_system_prompt="")

        # Load the notebook as a JSON object
        with open(filename, 'r', encoding='utf-8') as f:
            notebook_content = json.load(f)

        # Iterate through the cells and erase the outputs
        for cell in notebook_content['cells']:
            if cell['cell_type'] == 'code':
                cell['outputs'] = []
                cell['execution_count'] = None

        notebook_text = json.dumps(notebook_content, indent=1)

        prompt = prompt + f"""
        The Notebook {filename} is given here:
        ```json
        {notebook_text}
        ```
        """

    full_response = generate_response(chat_history=[], image=None, model=Context.model, system_prompt=system_prompt, user_prompt=prompt, vision_system_prompt="")


    if filename is None:
        filename_prompt = f"""
        What would be a good filename for a notebook that answers the following prompt?
        
        Prompt:
        {prompt}
        
        Respond with the filename and nothing else.
        """

        filename = generate_response(chat_history=[], image=None, model=Context.model, system_prompt="", user_prompt=filename_prompt, vision_system_prompt="")
        if not filename.endswith(".ipynb"):
            filename += ".ipynb"

    # check if file not exists and suffix a number if it does
    if os.path.exists(filename):
        i = 1
        while os.path.exists(filename):
            filename = filename.replace(".ipynb", f"_{i}.ipynb")
            i += 1

    full_response = full_response.strip().strip("\n").strip()

    if full_response.startswith("```python"):
        full_response = full_response[9:]
    if full_response.startswith("```json"):
        full_response = full_response[7:]
    if full_response.startswith("```"):
        full_response = full_response[3:]
    if full_response.endswith("```"):
        full_response = full_response[:-3]

    # write the response to a file in utf-8 encoding
    with open(filename, "w", encoding="utf-8") as file:
        file.write(full_response)

    return filename


def modify_notebook(prompt, filename=None):



        filename_prompt = f"""
        What would be a good filename for a notebook that answers the following prompt?

        Prompt:
        {prompt}

        Respond with the filename and nothing else.
        """

        filename = generate_response(chat_history=[], image=None, model=Context.model, system_prompt="",
                                     user_prompt=filename_prompt, vision_system_prompt="")
        if not filename.endswith(".ipynb"):
            filename += ".ipynb"

        # check if file not exists and suffix a number if it does
        if os.path.exists(filename):
            i = 1
            while os.path.exists(filename):
                filename = filename.replace(".ipynb", f"_{i}.ipynb")
                i += 1