# coding: utf-8

"""
    Songtradr API

    This is the Songtradr API. Use it to retrieve deep music metadata and trigger processes like auto-tagging.  You can also use the API to manage your account and musicube cloud data.  **Authentication**  1. Reach out to support@songtradr.com to receive a free account or use your login data if you are already signed up.  2. To authenticate, you need to login via the POST /api/v1/user/login endpoint.  3. The endpoint responds with a jwtToken which you can use in all following API requests as a bearer token.  **Rate Limiting**  The current limit is 120 Requests per minute. Reach out to us via support@songtradr.com if you need to request more.  **Getting Started with auto-tagging**  1. If you want to get your own files auto-tagged, use the POST /api/v1/user/file/{name}/initUpload endpoint. It responds with a presigned S3 link where you can upload your file. 2. You can check the processing status of your file via the GET /api/v1/user/file/{name}/filesStatus endpoint. 3. As soon as processing is done, you can request the generated data via the GET /api/v1/user/files endpoint.  **Getting Started with search**  You can either search the released music via the /public/recording endpoints or your own private uploaded music via the /user/file/ endpoints.  1. If you want to search the world's released music, a good starting point is the GET /api/v1/public/recording/search endpoint. Please find the extensive list of parameters that serve as semantic search filters. 2. If you want to search your own previously uploaded music, a good starting point is the GET GET /api/v1/user/files endpoint. It has the same extensive list of parameters that serve as semantic search filters.

    The version of the OpenAPI document: 3.0.0
    Contact: info@songtradr.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from songtradr_api_client_python.models.recording_medium_dto import RecordingMediumDTO
from typing import Optional, Set
from typing_extensions import Self

class FileDTO(BaseModel):
    """
    Details on a file that has been uploaded for auto-tagging or audio-recognition purposes.
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    object_key: StrictStr = Field(alias="objectKey")
    folder: StrictStr
    extension: StrictStr = Field(description="extension of the file")
    url: Optional[StrictStr] = None
    upload_start_time: Optional[datetime] = Field(default=None, alias="uploadStartTime")
    upload_end_time: Optional[datetime] = Field(default=None, alias="uploadEndTime")
    fingerprint_status: Optional[StrictStr] = Field(default=None, description="status of the audio recognition", alias="fingerprintStatus")
    fingerprint_start_time: Optional[datetime] = Field(default=None, alias="fingerprintStartTime")
    fingerprint_end_time: Optional[datetime] = Field(default=None, alias="fingerprintEndTime")
    inference_status: Optional[StrictStr] = Field(default=None, description="status of the auto-tagging", alias="inferenceStatus")
    inference_start_time: Optional[datetime] = Field(default=None, alias="inferenceStartTime")
    inference_end_time: Optional[datetime] = Field(default=None, alias="inferenceEndTime")
    recording: Optional[RecordingMediumDTO] = None
    error_time: Optional[datetime] = None
    error_message: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "objectKey", "folder", "extension", "url", "uploadStartTime", "uploadEndTime", "fingerprintStatus", "fingerprintStartTime", "fingerprintEndTime", "inferenceStatus", "inferenceStartTime", "inferenceEndTime", "recording", "error_time", "error_message"]

    @field_validator('extension')
    def extension_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['mp3', 'wav', 'flac']):
            raise ValueError("must be one of enum values ('mp3', 'wav', 'flac')")
        return value

    @field_validator('fingerprint_status')
    def fingerprint_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['processing', 'error', 'found', 'not_found', 'not_started']):
            raise ValueError("must be one of enum values ('processing', 'error', 'found', 'not_found', 'not_started')")
        return value

    @field_validator('inference_status')
    def inference_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['processing', 'error', 'done', 'not_started']):
            raise ValueError("must be one of enum values ('processing', 'error', 'done', 'not_started')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recording
        if self.recording:
            _dict['recording'] = self.recording.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "objectKey": obj.get("objectKey"),
            "folder": obj.get("folder"),
            "extension": obj.get("extension"),
            "url": obj.get("url"),
            "uploadStartTime": obj.get("uploadStartTime"),
            "uploadEndTime": obj.get("uploadEndTime"),
            "fingerprintStatus": obj.get("fingerprintStatus"),
            "fingerprintStartTime": obj.get("fingerprintStartTime"),
            "fingerprintEndTime": obj.get("fingerprintEndTime"),
            "inferenceStatus": obj.get("inferenceStatus"),
            "inferenceStartTime": obj.get("inferenceStartTime"),
            "inferenceEndTime": obj.get("inferenceEndTime"),
            "recording": RecordingMediumDTO.from_dict(obj["recording"]) if obj.get("recording") is not None else None,
            "error_time": obj.get("error_time"),
            "error_message": obj.get("error_message")
        })
        return _obj


