Metadata-Version: 2.1
Name: azureenergylabelerlib
Version: 3.3.3
Summary: A python library that generates energy labels based on findings in Azure subscriptions
Home-page: https://github.com/schubergphilis/azureenergylabelerlib
Author: Sayantan Khanra
Author-email: skhanra@schubergphilis.com
License: MIT
Keywords: azureenergylabelerlib
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3.7
License-File: LICENSE
License-File: AUTHORS.rst
Requires-Dist: azure-mgmt-security>=1.0.0
Requires-Dist: azure-identity>=1.16.0; python_version >= "3.8"
Requires-Dist: azure-cli-core>=2.61.0; python_full_version >= "3.8.0"
Requires-Dist: azure-mgmt-resourcegraph>=8.0.0
Requires-Dist: azure-mgmt-resource>=21.2.1; python_version >= "3.7"
Requires-Dist: azure-storage-blob>=12.20.0; python_version >= "3.8"
Requires-Dist: schema>=0.7.7
Requires-Dist: cachetools>=5.3.3; python_version >= "3.7"
Requires-Dist: opnieuw>=1.2.1; python_version >= "3.7"

=====================
azureenergylabelerlib
=====================

A python library that generates energy labels based on findings in Azure subscriptions


* Documentation: https://azureenergylabelerlib.readthedocs.org/en/latest


Development Workflow
====================

The workflow supports the following steps

 * lint
 * test
 * build
 * document
 * upload
 * graph

These actions are supported out of the box by the corresponding scripts under _CI/scripts directory with sane defaults based on best practices.
Sourcing setup_aliases.ps1 for windows powershell or setup_aliases.sh in bash on Mac or Linux will provide with handy aliases for the shell of all those commands prepended with an underscore.

The bootstrap script creates a .venv directory inside the project directory hosting the virtual environment. It uses pipenv for that.
It is called by all other scripts before they do anything. So one could simple start by calling _lint and that would set up everything before it tried to actually lint the project

Once the code is ready to be delivered the _tag script should be called accepting one of three arguments, patch, minor, major following the semantic versioning scheme.
So for the initial delivery one would call

    $ _tag --minor

which would bump the version of the project to 0.1.0 tag it in git and do a push and also ask for the change and automagically update HISTORY.rst with the version and the change provided.


So the full workflow after git is initialized is:

 * repeat as necessary (of course it could be test - code - lint :) )

   * code
   * lint
   * test
 * commit and push
 * develop more through the code-lint-test cycle
 * tag (with the appropriate argument)
 * build
 * upload (if you want to host your package in pypi)
 * document (of course this could be run at any point)


Important Information
=====================

This template is based on pipenv. In order to be compatible with requirements.txt so the actual created package can be used by any part of the existing python ecosystem some hacks were needed.
So when building a package out of this **do not** simple call

    $ python setup.py sdist bdist_egg

**as this will produce an unusable artifact with files missing.**
Instead use the provided build and upload scripts that create all the necessary files in the artifact.



Project Features
================

* TODO




History
-------

0.0.1 (22-04-2022)
---------------------

* First code creation


0.1.0 (22-06-2022)
------------------

* First release


0.2.0 (23-06-2022)
------------------

* First Release


0.2.1 (23-06-2022)
------------------

* Changed export all parameter


1.0.0 (15-09-2022)
------------------

* - Removed pandas dependency in favor of native python functionality
* - Added support for SAS URLs to export results to a Storage Account
* - Fixed a bug where open days would show as 9999 for subscriptions scoring an A
* - Fixed a typo on the exempted findings json file


1.1.0 (21-09-2022)
------------------

* Added more information to the --export-metrics option output


1.1.1 (22-09-2022)
------------------

* Fixed a bug where Resource Groups lack the exempted_findings property


2.0.0 (04-10-2022)
------------------

* Removed ExemptedPolicy class


3.0.0 (18-10-2022)
------------------

* Microsoft renamed "Azure Security Benchmark" to "Microsoft cloud security benchmark", changing the interface


3.1.0 (07-03-2023)
------------------

* Bump dependencies.


3.1.1 (21-03-2023)
------------------

* Check subscription tenant id on Tenant init


3.2.0 (11-05-2023)
------------------

* Improved how findings are filtered


3.2.1 (07-06-2023)
------------------

* Fixed pagination
* Fixed typos


3.3.0 (22-09-2023)
------------------

* feat: ability added to exclude resource groups from reporting.


3.3.1 (02-10-2023)
------------------

* fix: denied_resource_group_names is optional in the rest of the code, so also should be in Subscription.


3.3.2 (05-10-2023)
------------------

* feat: added validation for azure resource group names.


3.3.3 (06-06-2024)
------------------

* Pin policy api version.
