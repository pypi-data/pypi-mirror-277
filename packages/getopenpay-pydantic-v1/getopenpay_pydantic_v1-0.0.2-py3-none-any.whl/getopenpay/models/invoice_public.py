# coding: utf-8

"""
    OpenPay API

    super charge your subscription management.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, Dict, List, Optional

from getopenpay.models.credit_card_type import CreditCardType
from getopenpay.models.invoice_item_public import InvoiceItemPublic
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist


class InvoicePublic(BaseModel):
  """
    InvoicePublic
    """
  id: StrictStr = Field(..., description='Unique identifier of the invoice.')
  paid_at: datetime = Field(..., description="When the invoice is paid, in 'ISO 8601' format.")
  paid_amount_atom: StrictInt = Field(
    ..., description='Total amount paid. It is in atomic units (in USD this is cents).'
  )
  billed_to: Optional[StrictStr] = None
  billing_address: Optional[StrictStr] = None
  card_type: Optional[CreditCardType] = None
  last_four: Optional[StrictStr] = None
  lines: Optional[conlist(InvoiceItemPublic)] = None
  branding: Dict[str,
                 Any] = Field(..., description='The branding settings associated with the account')
  invoice_pdf_url: StrictStr = Field(..., description='The URL for the Invoice PDF')
  receipt_pdf_url: StrictStr = Field(..., description='The URL for the Receipt PDF')
  __properties = [
    'id', 'paid_at', 'paid_amount_atom', 'billed_to', 'billing_address', 'card_type', 'last_four',
    'lines', 'branding', 'invoice_pdf_url', 'receipt_pdf_url'
  ]

  class Config:
    """Pydantic configuration"""
    allow_population_by_field_name = True
    validate_assignment = True

  def to_str(self) -> str:
    """Returns the string representation of the model using alias"""
    return pprint.pformat(self.dict(by_alias=True))

  def to_json(self) -> str:
    """Returns the JSON representation of the model using alias"""
    return json.dumps(self.to_dict())

  @classmethod
  def from_json(cls, json_str: str) -> InvoicePublic:
    """Create an instance of InvoicePublic from a JSON string"""
    return cls.from_dict(json.loads(json_str))

  def to_dict(self):
    """Returns the dictionary representation of the model using alias"""
    _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
    # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
    _items = []
    if self.lines:
      for _item in self.lines:
        if _item:
          _items.append(_item.to_dict())
      _dict['lines'] = _items
    # set to None if billed_to (nullable) is None
    # and __fields_set__ contains the field
    if self.billed_to is None and 'billed_to' in self.__fields_set__:
      _dict['billed_to'] = None

    # set to None if billing_address (nullable) is None
    # and __fields_set__ contains the field
    if self.billing_address is None and 'billing_address' in self.__fields_set__:
      _dict['billing_address'] = None

    # set to None if card_type (nullable) is None
    # and __fields_set__ contains the field
    if self.card_type is None and 'card_type' in self.__fields_set__:
      _dict['card_type'] = None

    # set to None if last_four (nullable) is None
    # and __fields_set__ contains the field
    if self.last_four is None and 'last_four' in self.__fields_set__:
      _dict['last_four'] = None

    return _dict

  @classmethod
  def from_dict(cls, obj: dict) -> InvoicePublic:
    """Create an instance of InvoicePublic from a dict"""
    if obj is None:
      return None

    if not isinstance(obj, dict):
      return InvoicePublic.parse_obj(obj)

    _obj = InvoicePublic.parse_obj(
      {
        'id': obj.get('id'),
        'paid_at': obj.get('paid_at'),
        'paid_amount_atom': obj.get('paid_amount_atom'),
        'billed_to': obj.get('billed_to'),
        'billing_address': obj.get('billing_address'),
        'card_type': obj.get('card_type'),
        'last_four': obj.get('last_four'),
        'lines':
          [InvoiceItemPublic.from_dict(_item) for _item in obj.get('lines')]
          if obj.get('lines') is not None else None,
        'branding': obj.get('branding'),
        'invoice_pdf_url': obj.get('invoice_pdf_url'),
        'receipt_pdf_url': obj.get('receipt_pdf_url')
      }
    )
    return _obj
