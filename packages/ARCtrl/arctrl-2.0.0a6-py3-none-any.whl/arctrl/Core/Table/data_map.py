from __future__ import annotations
from collections.abc import Callable
from typing import Any
from ...fable_modules.fable_library.array_ import iterate
from ...fable_modules.fable_library.list import (of_array, FSharpList, exists as exists_1)
from ...fable_modules.fable_library.mutable_map import Dictionary
from ...fable_modules.fable_library.reflection import (TypeInfo, class_type)
from ...fable_modules.fable_library.seq import exists
from ...fable_modules.fable_library.string_ import (to_fail, printf)
from ...fable_modules.fable_library.types import Array
from ...fable_modules.fable_library.util import (equals, safe_hash, equal_arrays, array_hash, ignore)
from ..ontology_annotation import OntologyAnnotation
from .arc_table import ArcTable
from .arc_table_aux import SanityChecks_validate
from .composite_cell import CompositeCell
from .composite_column import CompositeColumn
from .composite_header import (IOType, CompositeHeader)

DataMapAux_dataHeader: CompositeHeader = CompositeHeader(11, IOType(2))

DataMapAux_explication: OntologyAnnotation = OntologyAnnotation("Clarification", "NCIT", "http://purl.obolibrary.org/obo/NCIT_C94778")

DataMapAux_explicationHeader: CompositeHeader = CompositeHeader(3, DataMapAux_explication)

DataMapAux_unit: OntologyAnnotation = OntologyAnnotation("Unit", "UO", "http://purl.obolibrary.org/obo/UO_0000000")

DataMapAux_unitHeader: CompositeHeader = CompositeHeader(3, DataMapAux_unit)

DataMapAux_objectType: OntologyAnnotation = OntologyAnnotation("Data Type", "NCIT", "http://purl.obolibrary.org/obo/NCIT_C42645")

DataMapAux_objectTypeHeader: CompositeHeader = CompositeHeader(3, DataMapAux_objectType)

DataMapAux_descriptionHeader: CompositeHeader = CompositeHeader(13, "Description")

DataMapAux_generatedByHeader: CompositeHeader = CompositeHeader(13, "Generated By")

DataMapAux_allowedHeaders: FSharpList[CompositeHeader] = of_array([DataMapAux_dataHeader, DataMapAux_explicationHeader, DataMapAux_unitHeader, DataMapAux_objectTypeHeader, DataMapAux_descriptionHeader, DataMapAux_generatedByHeader])

def DataMapAux_validate(headers: Array[CompositeHeader], values: Any, raise_exception: bool) -> bool:
    def predicate_1(h: CompositeHeader, headers: Any=headers, values: Any=values, raise_exception: Any=raise_exception) -> bool:
        def predicate(ah: CompositeHeader, h: Any=h) -> bool:
            return equals(ah, h)

        has_foreign_header: bool = not exists_1(predicate, DataMapAux_allowedHeaders)
        if has_foreign_header if raise_exception else False:
            to_fail(printf("Header %O is not allowed in DataMap"))(h)

        return has_foreign_header

    if exists(predicate_1, headers):
        return SanityChecks_validate(headers, values, raise_exception)

    else: 
        return False



def _expr428() -> TypeInfo:
    return class_type("ARCtrl.DataMap", None, DataMap)


class DataMap:
    def __init__(self, headers: Array[CompositeHeader], values: Any) -> None:
        DataMapAux_validate(headers, values, True)
        self.table: ArcTable = ArcTable("DataMap", headers, values)
        self.static_hash: int = 0

    def __eq__(self, obj: Any=None) -> bool:
        this: DataMap = self
        return equals(DataMap__get_Table(this), DataMap__get_Table(obj)) if isinstance(obj, DataMap) else False

    def __hash__(self, __unit: None=None) -> int:
        this: DataMap = self
        return safe_hash(DataMap__get_Table(this))


DataMap_reflection = _expr428

def DataMap__ctor_ZD0829CB(headers: Array[CompositeHeader], values: Any) -> DataMap:
    return DataMap(headers, values)


def DataMap__get_Headers(this: DataMap) -> Array[CompositeHeader]:
    return this.table.Headers


def DataMap__get_Values(this: DataMap) -> Any:
    return this.table.Values


def DataMap__get_StaticHash(this: DataMap) -> int:
    return this.static_hash


def DataMap__set_StaticHash_Z524259A4(this: DataMap, value: int) -> None:
    this.static_hash = value or 0


def DataMap_init(__unit: None=None) -> DataMap:
    class ObjectExpr429:
        @property
        def Equals(self) -> Callable[[tuple[int, int], tuple[int, int]], bool]:
            return equal_arrays

        @property
        def GetHashCode(self) -> Callable[[tuple[int, int]], int]:
            return array_hash

    return DataMap__ctor_ZD0829CB([], Dictionary([], ObjectExpr429()))


def DataMap__AddColumns_6369C010(this: DataMap, columns: Array[CompositeColumn], skip_fill_missing: bool | None=None) -> None:
    def action(c: CompositeColumn, this: Any=this, columns: Any=columns, skip_fill_missing: Any=skip_fill_missing) -> None:
        ignore(c.Validate(True))

    iterate(action, columns)
    this.table.AddColumns(columns, None, None, skip_fill_missing)
    ignore(DataMapAux_validate(this.table.Headers, this.table.Values, True))


def DataMap_addColumns_6369C010(columns: Array[CompositeColumn], skip_fill_missing: bool | None=None) -> Callable[[DataMap], DataMap]:
    def _arrow430(dm: DataMap, columns: Any=columns, skip_fill_missing: Any=skip_fill_missing) -> DataMap:
        dm_1: DataMap = DataMap__Copy(dm)
        DataMap__AddColumns_6369C010(dm_1, columns, skip_fill_missing)
        return dm_1

    return _arrow430


def DataMap__get_Table(this: DataMap) -> ArcTable:
    return this.table


def DataMap__TryGetCellAt_Z37302880(this: DataMap, row: int, column: int) -> CompositeCell | None:
    return this.table.TryGetCellAt(row, column)


def DataMap__GetExplicationColumn(this: DataMap) -> CompositeColumn:
    return this.table.GetColumnByHeader(DataMapAux_explicationHeader)


def DataMap__AddExplicationColumn_C98E589(this: DataMap, cells: Array[CompositeCell]) -> None:
    this.table.AddColumn(DataMapAux_explicationHeader, cells)


def DataMap__GetUnitColumn(this: DataMap) -> CompositeColumn:
    return this.table.GetColumnByHeader(DataMapAux_unitHeader)


def DataMap__AddUnitColumn_C98E589(this: DataMap, cells: Array[CompositeCell]) -> None:
    this.table.AddColumn(DataMapAux_unitHeader, cells)


def DataMap__GetDataTypeColumn(this: DataMap) -> CompositeColumn:
    return this.table.GetColumnByHeader(DataMapAux_objectTypeHeader)


def DataMap__AddDataTypeColumn_C98E589(this: DataMap, cells: Array[CompositeCell]) -> None:
    this.table.AddColumn(DataMapAux_objectTypeHeader, cells)


def DataMap__GetDescriptionColumn(this: DataMap) -> CompositeColumn:
    return this.table.GetColumnByHeader(DataMapAux_descriptionHeader)


def DataMap__AddDescriptionColumn_C98E589(this: DataMap, cells: Array[CompositeCell]) -> None:
    this.table.AddColumn(DataMapAux_descriptionHeader, cells)


def DataMap__GetRow_ABCEF95(this: DataMap, row: int, SkipValidation: bool | None=None) -> Array[CompositeCell]:
    return this.table.GetRow(row, SkipValidation)


def DataMap_getRow_ABCEF95(row: int, SkipValidation: bool | None=None) -> Callable[[DataMap], Array[CompositeCell]]:
    def _arrow431(dm: DataMap, row: Any=row, SkipValidation: Any=SkipValidation) -> Array[CompositeCell]:
        return DataMap__GetRow_ABCEF95(dm, row, SkipValidation)

    return _arrow431


def DataMap__Copy(this: DataMap) -> DataMap:
    class ObjectExpr432:
        @property
        def Equals(self) -> Callable[[tuple[int, int], tuple[int, int]], bool]:
            return equal_arrays

        @property
        def GetHashCode(self) -> Callable[[tuple[int, int]], int]:
            return array_hash

    return DataMap__ctor_ZD0829CB(list(DataMap__get_Headers(this)), Dictionary(DataMap__get_Values(this), ObjectExpr432()))


__all__ = ["DataMapAux_dataHeader", "DataMapAux_explication", "DataMapAux_explicationHeader", "DataMapAux_unit", "DataMapAux_unitHeader", "DataMapAux_objectType", "DataMapAux_objectTypeHeader", "DataMapAux_descriptionHeader", "DataMapAux_generatedByHeader", "DataMapAux_allowedHeaders", "DataMapAux_validate", "DataMap_reflection", "DataMap__get_Headers", "DataMap__get_Values", "DataMap__get_StaticHash", "DataMap__set_StaticHash_Z524259A4", "DataMap_init", "DataMap__AddColumns_6369C010", "DataMap_addColumns_6369C010", "DataMap__get_Table", "DataMap__TryGetCellAt_Z37302880", "DataMap__GetExplicationColumn", "DataMap__AddExplicationColumn_C98E589", "DataMap__GetUnitColumn", "DataMap__AddUnitColumn_C98E589", "DataMap__GetDataTypeColumn", "DataMap__AddDataTypeColumn_C98E589", "DataMap__GetDescriptionColumn", "DataMap__AddDescriptionColumn_C98E589", "DataMap__GetRow_ABCEF95", "DataMap_getRow_ABCEF95", "DataMap__Copy"]

