{"version":3,"file":"reviewGroupModel.js","names":["GroupMember","RB","BaseResource","extend","defaults","_","username","added","loaded","prototype","serializedAttrs","url","get","isNew","parse","ReviewGroup","name","rspNamespace","SITE_ROOT","setStarred","starred","options","context","undefined","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","watched","UserSession","instance","watchedGroups","addImmediately","removeImmediately","addUser","member","baseURL","save","Promise","reject","BackboneError","errorText","removeUser","destroy"],"sources":["../../../../../../static/rb/js/resources/models/reviewGroupModel.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * A member of a review group.\n *\n * This is used to handle adding a user to a group or removing from a group.\n */\nconst GroupMember = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            username: null,\n            added: false,\n            loaded: true\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    serializedAttrs: ['username'],\n\n    /**\n     * Return a URL for this resource.\n     *\n     * If this represents an added user, the URL will point to\n     * <groupname>/<username>/. Otherwise, it just points to <groupname>/.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('added')) {\n            url += this.get('username') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the group membership is \"new\".\n     *\n     * A non-added user is new, meaning the save operation will trigger\n     * a POST to add the user.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether this member is newly-added to the group.\n     */\n    isNew() {\n        return !this.get('added');\n    },\n\n    /**\n     * Parse the result payload.\n     *\n     * We don't really care about the result, so we don't bother doing any\n     * work to parse.\n     */\n    parse() {}\n});\n\n\n/**\n * A review group.\n *\n * This provides some utility functions for working with an existing\n * review group.\n *\n * At the moment, this consists of marking a review group as\n * starred/unstarred.\n */\nRB.ReviewGroup = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            name: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'group',\n\n    /**\n     * Return the URL to the review group.\n     *\n     * If this is a new group, the URL will point to the base groups/ URL.\n     * Otherwise, it points to the URL for the group itself.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                  'api/groups/';\n\n        if (!this.isNew()) {\n            url += this.get('name') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Mark a review group as starred or unstarred.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether or not the group is starred.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    setStarred(starred, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.setStarred was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.setStarred(starred));\n        }\n\n        const watched = RB.UserSession.instance.watchedGroups;\n        return starred ? watched.addImmediately(this)\n                       : watched.removeImmediately(this);\n    },\n\n    /**\n     * Add a user to this group.\n     *\n     * Sends the request to the server to add the user, and notifies on\n     * success or failure.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    addUser(username, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.addUser was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.addUser(username));\n        }\n\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url\n            });\n\n            return member.save();\n        } else {\n            return Promise.reject(new BackboneError(this, {\n                errorText: 'Unable to add to the group.',\n            }, options));\n        }\n    },\n\n    /*\n     * Remove a user from this group.\n     *\n     * Sends the request to the server to remove the user, and notifies on\n     * success or failure.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    removeUser(username, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.removeUser was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.removeUser(username));\n        }\n\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url,\n                added: true\n            });\n\n            return member.destroy();\n        } else {\n            return Promise.reject(new BackboneError(this, {\n                errorText: 'Unable to remove from the group.',\n            }, options));\n        }\n    }\n});\n\n\n})();\n"],"mappings":"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","ignoreList":[]}