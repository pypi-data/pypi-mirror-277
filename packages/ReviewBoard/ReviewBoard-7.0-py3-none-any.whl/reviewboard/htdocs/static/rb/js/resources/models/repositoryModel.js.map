{"version":3,"file":"repositoryModel.js","names":["RB","Repository","BaseResource","extend","defaults","_","filesOnly","localSitePrefix","name","requiresBasedir","requiresChangeNumber","scmtoolName","supportsPostCommit","prototype","rspNamespace","listKey","attrToJsonMap","deserializedAttrs","initialize","apply","arguments","branches","RepositoryBranches","url","result","getCommits","options","RepositoryCommits","urlBase","start","branch","SITE_ROOT","get","isNew","id"],"sources":["../../../../../../static/rb/js/resources/models/repositoryModel.es6.js"],"sourcesContent":["/**\n * A client-side representation of a repository on the server.\n *\n * Model Attributes:\n *     filesOnly (boolean):\n *         Whether this repository is the fake \"file attachments only\" entry.\n *\n *     localSitePrefix (string):\n *         The URL prefix for the local site, if any.\n *\n *     name (string):\n *         The name of the repository.\n *\n *     requiresBasedir (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of a \"base directory\" (the relative path between the\n *         repository root and the filenames in the diff file).\n *\n *     requiresChangeNumber (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of the associated change number.\n *\n *     scmtoolName (string):\n *         The name of the SCM that this repository uses.\n *\n *     supportsPostCommit (boolean):\n *         Whether this repository supports the APIs necessary to enable the\n *         post-commit UI.\n */\nRB.Repository = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            filesOnly: false,\n            localSitePrefix: null,\n            name: null,\n            requiresBasedir: false,\n            requiresChangeNumber: false,\n            scmtoolName: null,\n            supportsPostCommit: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'repository',\n    listKey: 'repositories',\n\n    attrToJsonMap: {\n        name: 'name',\n        requiresBasedir: 'requires_basedir',\n        requiresChangeNumber: 'requires_change_number',\n        scmtoolName: 'tool',\n        supportsPostCommit: 'supports_post_commit',\n    },\n\n    deserializedAttrs: [\n        'name',\n        'requiresBasedir',\n        'requiresChangeNumber',\n        'scmtoolName',\n        'supportsPostCommit',\n    ],\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        RB.BaseResource.prototype.initialize.apply(this, arguments);\n\n        this.branches = new RB.RepositoryBranches();\n        this.branches.url = _.result(this, 'url') + 'branches/';\n    },\n\n    /**\n     * Get a collection of commits from a given starting point.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the commits collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The starting commit (which will be the most recent commit\n     *         listed).\n     *\n     *     branch (string):\n     *         The branch to fetch commits from.\n     *\n     * Returns:\n     *     RB.RepositoryCommits:\n     *     The commits collection.\n     */\n    getCommits(options) {\n        return new RB.RepositoryCommits([], {\n            urlBase: _.result(this, 'url') + 'commits/',\n            start: options.start,\n            branch: options.branch\n        });\n    },\n\n    /**\n     * Return the URL for syncing the model.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/repositories/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    }\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,UAAU,GAAGD,EAAE,CAACE,YAAY,CAACC,MAAM,CAAC;EACnCC,QAAQA,CAAA,EAAG;IACP,OAAOC,CAAC,CAACD,QAAQ,CAAC;MACdE,SAAS,EAAE,KAAK;MAChBC,eAAe,EAAE,IAAI;MACrBC,IAAI,EAAE,IAAI;MACVC,eAAe,EAAE,KAAK;MACtBC,oBAAoB,EAAE,KAAK;MAC3BC,WAAW,EAAE,IAAI;MACjBC,kBAAkB,EAAE;IACxB,CAAC,EAAEZ,EAAE,CAACE,YAAY,CAACW,SAAS,CAACT,QAAQ,CAAC,CAAC,CAAC;EAC5C,CAAC;EAEDU,YAAY,EAAE,YAAY;EAC1BC,OAAO,EAAE,cAAc;EAEvBC,aAAa,EAAE;IACXR,IAAI,EAAE,MAAM;IACZC,eAAe,EAAE,kBAAkB;IACnCC,oBAAoB,EAAE,wBAAwB;IAC9CC,WAAW,EAAE,MAAM;IACnBC,kBAAkB,EAAE;EACxB,CAAC;EAEDK,iBAAiB,EAAE,CACf,MAAM,EACN,iBAAiB,EACjB,sBAAsB,EACtB,aAAa,EACb,oBAAoB,CACvB;EAED;AACJ;AACA;EACIC,UAAUA,CAAA,EAAG;IACTlB,EAAE,CAACE,YAAY,CAACW,SAAS,CAACK,UAAU,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAE3D,IAAI,CAACC,QAAQ,GAAG,IAAIrB,EAAE,CAACsB,kBAAkB,CAAC,CAAC;IAC3C,IAAI,CAACD,QAAQ,CAACE,GAAG,GAAGlB,CAAC,CAACmB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,WAAW;EAC3D,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,OAAO,EAAE;IAChB,OAAO,IAAI1B,EAAE,CAAC2B,iBAAiB,CAAC,EAAE,EAAE;MAChCC,OAAO,EAAEvB,CAAC,CAACmB,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,UAAU;MAC3CK,KAAK,EAAEH,OAAO,CAACG,KAAK;MACpBC,MAAM,EAAEJ,OAAO,CAACI;IACpB,CAAC,CAAC;EACN,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,GAAGA,CAAA,EAAG;IACF,MAAMA,GAAG,GAAGQ,SAAS,IAAI,IAAI,CAACC,GAAG,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,GAC/C,mBAAmB;IAE/B,OAAO,IAAI,CAACC,KAAK,CAAC,CAAC,GAAGV,GAAG,GAAI,GAAEA,GAAI,GAAE,IAAI,CAACW,EAAG,GAAE;EACnD;AACJ,CAAC,CAAC","ignoreList":[]}