# Copyright (C) 2024 qBraid
#
# This file is part of the qBraid-SDK
#
# The qBraid-SDK is free software released under the GNU General Public License v3
# or later. You can redistribute and/or modify it under the terms of the GPL v3.
# See the LICENSE file in the project root or <https://www.gnu.org/licenses/gpl-3.0.html>.
#
# THERE IS NO WARRANTY for the qBraid-SDK, as per Section 15 of the GPL v3.

"""
Module for providing transforamtions to ensure OpenQASM 3 compatibility
across various other quantum software frameworks.

"""
import math
import re

GATE_DEFINITIONS = {
    "iswap": """
gate iswap _gate_q_0, _gate_q_1 {
  s _gate_q_0;
  s _gate_q_1;
  h _gate_q_0;
  cx _gate_q_0, _gate_q_1;
  cx _gate_q_1, _gate_q_0;
  h _gate_q_1;
}""",
    "sxdg": """
gate sxdg _gate_q_0 {
  s _gate_q_0;
  h _gate_q_0;
  s _gate_q_0;
}""",
}


def replace_commands(qasm: str, replacements: dict[str, str]) -> str:
    """Replace commands in a QASM string with their replacements."""
    for old, new in replacements.items():
        qasm = qasm.replace(old, new)
    return qasm


def convert_qasm_pi_to_decimal(qasm_str: str) -> str:
    """Convert all instances of 'pi' in the QASM string to their decimal value."""

    pattern = r"(\d*\.?\d*\s*[*/+-]\s*)?pi(\s*[*/+-]\s*\d*\.?\d*)?"

    def replace_with_decimal(match):
        expr = match.group()
        try:
            value = eval(expr.replace("pi", str(math.pi)))  # pylint: disable=eval-used
        except SyntaxError:
            return expr
        return str(value)

    return re.sub(pattern, replace_with_decimal, qasm_str)


def _insert_gate_defs(qasm3_str: str) -> str:
    """Add gate definitions to a QASM 3.0 string.

    Args:
        qasm3_str (str): QASM 3.0 string.
    Returns:
        str: QASM 3.0 string with gate definitions.
    """
    lines = qasm3_str.splitlines()

    insert_index = 0
    for i, line in enumerate(lines):
        if "include" in line or "OPENQASM" in line:
            insert_index = i + 1

    for gate, defn in GATE_DEFINITIONS.items():
        if gate in qasm3_str:
            lines.insert(insert_index, defn.strip())

    return "\n".join(lines)


def _add_stdgates_include(qasm_str: str) -> str:
    """Add 'include "stdgates.inc";' to the QASM string if it is missing."""
    if 'include "stdgates.inc";' in qasm_str:
        return qasm_str

    lines = qasm_str.splitlines()

    for i, line in enumerate(lines):
        if "OPENQASM" in line:
            lines.insert(i + 1, 'include "stdgates.inc";')
            break

    return "\n".join(lines)


def transform_notation_from_external(qasm3: str) -> str:
    """Process an OpenQASM 3 program that was generated by Amazon Braket."""
    # extra trailing space is intentional
    replacements = {
        "cnot ": "cx ",
        "si ": "sdg ",
        "ti ": "tdg ",
        "v ": "sx ",
        "vi ": "sxdg ",
        "phaseshift": "p",
        "cphaseshift": "cp",
    }

    qasm3 = replace_commands(qasm3, replacements)
    qasm3 = _add_stdgates_include(qasm3)
    qasm3 = _insert_gate_defs(qasm3)

    return qasm3


def transform_notation_to_external(qasm3: str) -> str:
    """Preprocess QASM3 code before conversion to Braket."""
    replacements = {
        "cx ": "cnot ",
        "sdg ": "si ",
        "tdg ": "ti ",
        "sx ": "v ",
        "sxdg ": "vi ",
        "p(": "phaseshift(",
        "cp(": "cphaseshift(",
    }

    qasm3 = qasm3.replace('include "stdgates.inc";', "")
    qasm3 = replace_commands(qasm3, replacements)
    qasm3 = convert_qasm_pi_to_decimal(qasm3)
    return qasm3
