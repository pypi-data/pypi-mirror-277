# coding: utf-8

"""
    Montelo

    Documentation for the Montelo API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from montelo.client.openapi_client.models.generate_input import GenerateInput

class TestGenerateInput(unittest.TestCase):
    """GenerateInput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GenerateInput:
        """Test GenerateInput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GenerateInput`
        """
        model = GenerateInput()
        if include_optional:
            return GenerateInput(
                generation = openapi_client.models.generation_input.GenerationInput(
                    prompts = openapi_client.models.prompt.Prompt(
                        system = '', 
                        user = '', ), 
                    model_config = openapi_client.models.model_config.ModelConfig(
                        model = '', 
                        temperature = 1.337, 
                        maximum_tokens = 1.337, 
                        json_mode = True, ), ),
                variables = openapi_client.models.variables_input.VariablesInput(
                    system = [
                        openapi_client.models.config.Config(
                            prompts = openapi_client.models.prompt.Prompt(
                                system = '', 
                                user = '', ), 
                            model_config = openapi_client.models.model_config.ModelConfig(
                                model = '', 
                                temperature = 1.337, 
                                maximum_tokens = 1.337, 
                                json_mode = True, ), )
                        ], 
                    user = [
                        openapi_client.models.config.Config(
                            prompts = openapi_client.models.prompt.Prompt(
                                system = '', 
                                user = '', ), 
                            model_config = openapi_client.models.model_config.ModelConfig(
                                model = '', 
                                temperature = 1.337, 
                                maximum_tokens = 1.337, 
                                json_mode = True, ), )
                        ], ),
                dataset = openapi_client.models.dataset_input.DatasetInput(
                    samples = 10, 
                    name = '', 
                    description = '', 
                    train_split_ratio = 1.337, )
            )
        else:
            return GenerateInput(
                generation = openapi_client.models.generation_input.GenerationInput(
                    prompts = openapi_client.models.prompt.Prompt(
                        system = '', 
                        user = '', ), 
                    model_config = openapi_client.models.model_config.ModelConfig(
                        model = '', 
                        temperature = 1.337, 
                        maximum_tokens = 1.337, 
                        json_mode = True, ), ),
                variables = openapi_client.models.variables_input.VariablesInput(
                    system = [
                        openapi_client.models.config.Config(
                            prompts = openapi_client.models.prompt.Prompt(
                                system = '', 
                                user = '', ), 
                            model_config = openapi_client.models.model_config.ModelConfig(
                                model = '', 
                                temperature = 1.337, 
                                maximum_tokens = 1.337, 
                                json_mode = True, ), )
                        ], 
                    user = [
                        openapi_client.models.config.Config(
                            prompts = openapi_client.models.prompt.Prompt(
                                system = '', 
                                user = '', ), 
                            model_config = openapi_client.models.model_config.ModelConfig(
                                model = '', 
                                temperature = 1.337, 
                                maximum_tokens = 1.337, 
                                json_mode = True, ), )
                        ], ),
                dataset = openapi_client.models.dataset_input.DatasetInput(
                    samples = 10, 
                    name = '', 
                    description = '', 
                    train_split_ratio = 1.337, ),
        )
        """

    def testGenerateInput(self):
        """Test GenerateInput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
