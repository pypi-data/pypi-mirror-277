# coding: utf-8

"""
    Montelo

    Documentation for the Montelo API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from montelo.client.openapi_client.models.dataset_dto import DatasetDto
from montelo.client.openapi_client.models.full_datapoint_run_dto import FullDatapointRunDto
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ExperimentWithDatapointRunsDto(BaseModel):
    """
    ExperimentWithDatapointRunsDto
    """ # noqa: E501
    id: StrictStr
    dataset_id: StrictStr = Field(alias="datasetId")
    name: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    created_at: StrictStr = Field(alias="createdAt")
    dataset: DatasetDto
    datapoint_runs: List[FullDatapointRunDto] = Field(alias="datapointRuns")
    __properties: ClassVar[List[str]] = ["id", "datasetId", "name", "description", "createdAt", "dataset", "datapointRuns"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ExperimentWithDatapointRunsDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dataset
        if self.dataset:
            _dict['dataset'] = self.dataset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in datapoint_runs (list)
        _items = []
        if self.datapoint_runs:
            for _item in self.datapoint_runs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['datapointRuns'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ExperimentWithDatapointRunsDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "datasetId": obj.get("datasetId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "createdAt": obj.get("createdAt"),
            "dataset": DatasetDto.from_dict(obj.get("dataset")) if obj.get("dataset") is not None else None,
            "datapointRuns": [FullDatapointRunDto.from_dict(_item) for _item in obj.get("datapointRuns")] if obj.get("datapointRuns") is not None else None
        })
        return _obj


