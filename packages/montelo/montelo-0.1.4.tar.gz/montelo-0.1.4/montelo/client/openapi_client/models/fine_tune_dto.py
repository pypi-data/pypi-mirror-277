# coding: utf-8

"""
    Montelo

    Documentation for the Montelo API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FineTuneDto(BaseModel):
    """
    FineTuneDto
    """ # noqa: E501
    id: StrictStr
    provider: StrictStr
    model: StrictStr
    identifier: Optional[StrictStr]
    status: StrictStr
    started_at: Optional[StrictStr] = Field(alias="startedAt")
    ended_at: Optional[StrictStr] = Field(alias="endedAt")
    metadata: Optional[Dict[str, Any]]
    dataset_id: Optional[StrictStr] = Field(alias="datasetId")
    __properties: ClassVar[List[str]] = ["id", "provider", "model", "identifier", "status", "startedAt", "endedAt", "metadata", "datasetId"]

    @field_validator('provider')
    def provider_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('OPENAI', 'COHERE', 'MONTELO'):
            raise ValueError("must be one of enum values ('OPENAI', 'COHERE', 'MONTELO')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PENDING', 'RUNNING', 'DEPLOYING', 'COMPLETED', 'FAILED', 'CANCELLED'):
            raise ValueError("must be one of enum values ('PENDING', 'RUNNING', 'DEPLOYING', 'COMPLETED', 'FAILED', 'CANCELLED')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FineTuneDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if identifier (nullable) is None
        # and model_fields_set contains the field
        if self.identifier is None and "identifier" in self.model_fields_set:
            _dict['identifier'] = None

        # set to None if started_at (nullable) is None
        # and model_fields_set contains the field
        if self.started_at is None and "started_at" in self.model_fields_set:
            _dict['startedAt'] = None

        # set to None if ended_at (nullable) is None
        # and model_fields_set contains the field
        if self.ended_at is None and "ended_at" in self.model_fields_set:
            _dict['endedAt'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if dataset_id (nullable) is None
        # and model_fields_set contains the field
        if self.dataset_id is None and "dataset_id" in self.model_fields_set:
            _dict['datasetId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FineTuneDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "provider": obj.get("provider"),
            "model": obj.get("model"),
            "identifier": obj.get("identifier"),
            "status": obj.get("status"),
            "startedAt": obj.get("startedAt"),
            "endedAt": obj.get("endedAt"),
            "metadata": obj.get("metadata"),
            "datasetId": obj.get("datasetId")
        })
        return _obj


