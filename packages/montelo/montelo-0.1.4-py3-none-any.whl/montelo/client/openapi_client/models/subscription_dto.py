# coding: utf-8

"""
    Montelo

    Documentation for the Montelo API.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SubscriptionDto(BaseModel):
    """
    SubscriptionDto
    """ # noqa: E501
    id: StrictStr
    user_id: Optional[StrictStr] = Field(default=None, alias="userId")
    org_id: Optional[StrictStr] = Field(default=None, alias="orgId")
    stripe_customer_id: StrictStr = Field(alias="stripeCustomerId")
    stripe_subscription_id: Optional[StrictStr] = Field(default=None, alias="stripeSubscriptionId")
    details: Optional[Dict[str, Any]] = None
    created_at: StrictStr = Field(alias="createdAt")
    updated_at: StrictStr = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "userId", "orgId", "stripeCustomerId", "stripeSubscriptionId", "details", "createdAt", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SubscriptionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['userId'] = None

        # set to None if org_id (nullable) is None
        # and model_fields_set contains the field
        if self.org_id is None and "org_id" in self.model_fields_set:
            _dict['orgId'] = None

        # set to None if stripe_subscription_id (nullable) is None
        # and model_fields_set contains the field
        if self.stripe_subscription_id is None and "stripe_subscription_id" in self.model_fields_set:
            _dict['stripeSubscriptionId'] = None

        # set to None if details (nullable) is None
        # and model_fields_set contains the field
        if self.details is None and "details" in self.model_fields_set:
            _dict['details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SubscriptionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "orgId": obj.get("orgId"),
            "stripeCustomerId": obj.get("stripeCustomerId"),
            "stripeSubscriptionId": obj.get("stripeSubscriptionId"),
            "details": obj.get("details"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


