# coding: utf-8

"""
    GroupDocs.Rewriter API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.4.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, conlist
from groupdocs_rewriter_cloud.models.opt import Opt
from groupdocs_rewriter_cloud.models.tokenizer import Tokenizer

class Model(BaseModel):
    """
    Model
    """
    loaded: Optional[StrictBool] = None
    models_id: Optional[StrictInt] = None
    models: Optional[conlist(StrictStr)] = None
    opt: Optional[Opt] = None
    timeout: Optional[StrictInt] = None
    tokenizer: Optional[Tokenizer] = None
    __properties = ["loaded", "models_id", "models", "opt", "timeout", "tokenizer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Model:
        """Create an instance of Model from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of opt
        if self.opt:
            _dict['opt'] = self.opt.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tokenizer
        if self.tokenizer:
            _dict['tokenizer'] = self.tokenizer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Model:
        """Create an instance of Model from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Model.parse_obj(obj)

        _obj = Model.parse_obj({
            "loaded": obj.get("loaded"),
            "models_id": obj.get("models_id"),
            "models": obj.get("models"),
            "opt": Opt.from_dict(obj.get("opt")) if obj.get("opt") is not None else None,
            "timeout": obj.get("timeout"),
            "tokenizer": Tokenizer.from_dict(obj.get("tokenizer")) if obj.get("tokenizer") is not None else None
        })
        return _obj

