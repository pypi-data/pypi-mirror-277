# coding: utf-8

"""
    GroupDocs.Rewriter API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.4.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from groupdocs_rewriter_cloud.models.http_status_code import HttpStatusCode

class SimplifyTextResponse(BaseModel):
    """
    SimplifyTextResponse
    """
    status: Optional[HttpStatusCode] = None
    message: Optional[StrictStr] = Field(None, description="Information about process")
    simplify_reult: Optional[StrictStr] = Field(None, alias="simplifyReult")
    simplify_results: Optional[conlist(StrictStr)] = Field(None, alias="simplifyResults")
    __properties = ["status", "message", "simplifyReult", "simplifyResults"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimplifyTextResponse:
        """Create an instance of SimplifyTextResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if simplify_reult (nullable) is None
        # and __fields_set__ contains the field
        if self.simplify_reult is None and "simplify_reult" in self.__fields_set__:
            _dict['simplifyReult'] = None

        # set to None if simplify_results (nullable) is None
        # and __fields_set__ contains the field
        if self.simplify_results is None and "simplify_results" in self.__fields_set__:
            _dict['simplifyResults'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimplifyTextResponse:
        """Create an instance of SimplifyTextResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimplifyTextResponse.parse_obj(obj)

        _obj = SimplifyTextResponse.parse_obj({
            "status": obj.get("status"),
            "message": obj.get("message"),
            "simplify_reult": obj.get("simplifyReult"),
            "simplify_results": obj.get("simplifyResults")
        })
        return _obj

