# coding: utf-8

"""
    GroupDocs.Rewriter API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 24.4.0
    Contact: anton.perhunov@aspose.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from groupdocs_rewriter_cloud.models.cloud_text_request import CloudTextRequest
from groupdocs_rewriter_cloud.models.health_check_info import HealthCheckInfo
from groupdocs_rewriter_cloud.models.model import Model

class HealthCheckResponse(BaseModel):
    """
    HealthCheckResponse
    """
    initial_request: Optional[CloudTextRequest] = Field(None, alias="initialRequest")
    health_check_info: Optional[HealthCheckInfo] = Field(None, alias="healthCheckInfo")
    models: Optional[conlist(Model)] = None
    __properties = ["initialRequest", "healthCheckInfo", "models"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HealthCheckResponse:
        """Create an instance of HealthCheckResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of initial_request
        if self.initial_request:
            _dict['initialRequest'] = self.initial_request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of health_check_info
        if self.health_check_info:
            _dict['healthCheckInfo'] = self.health_check_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in models (list)
        _items = []
        if self.models:
            for _item in self.models:
                if _item:
                    _items.append(_item.to_dict())
            _dict['models'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HealthCheckResponse:
        """Create an instance of HealthCheckResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HealthCheckResponse.parse_obj(obj)

        _obj = HealthCheckResponse.parse_obj({
            "initial_request": CloudTextRequest.from_dict(obj.get("initialRequest")) if obj.get("initialRequest") is not None else None,
            "health_check_info": HealthCheckInfo.from_dict(obj.get("healthCheckInfo")) if obj.get("healthCheckInfo") is not None else None,
            "models": [Model.from_dict(_item) for _item in obj.get("models")] if obj.get("models") is not None else None
        })
        return _obj

