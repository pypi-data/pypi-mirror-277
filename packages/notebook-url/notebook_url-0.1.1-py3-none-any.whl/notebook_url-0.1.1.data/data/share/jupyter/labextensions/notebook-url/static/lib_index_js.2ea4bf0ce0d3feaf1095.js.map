{"version":3,"file":"lib_index_js.2ea4bf0ce0d3feaf1095.js","mappings":";;;;;;;;;;;;;;;;;;;AAAsC;AACiC;AAElB;AACJ;AAEjD,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;AAE9C,sDAAsD;AACtD,SAAS,uBAAuB,CAAC,aAA4B;IACzD,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;IAC7E,MAAM,iBAAiB,GAAG,oEAAsC,CAAC,eAAe,CAAC,CAAC;IAClF,MAAM,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,aAAa,iBAAiB,EAAE,CAAC;IACpG,2DAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC/B,KAAK,CAAC,yBAAyB,CAAC,CAAC;AACrC,CAAC;AAED,yDAAyD;AACzD,SAAS,yBAAyB;IAC9B,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACrE,MAAM,iBAAiB,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,iBAAiB,EAAE;QACnB,MAAM,mBAAmB,GAAG,wEAA0C,CAAC,iBAAiB,CAAC,CAAC;QAC1F,OAAO,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;KAC1C;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAED,mDAAmD;AACnD,SAAS,kBAAkB,CAAC,GAAoB,EAAE,eAAiC;IAC/E,MAAM,eAAe,GAAG,IAAI,+DAAa,CAAC;QACtC,KAAK,EAAE,aAAa;QACpB,OAAO,EAAE,GAAG,EAAE;YACV,MAAM,OAAO,GAAG,eAAe,CAAC,aAAa,CAAC;YAC9C,IAAI,OAAO,EAAE;gBACT,uBAAuB,CAAC,OAAO,CAAC,CAAC;aACpC;QACL,CAAC;QACD,OAAO,EAAE,oDAAoD;KAChE,CAAC,CAAC;IAEH,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;QAClD,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,EAAE,WAAW,EAAE,eAAe,CAAC,CAAC;IAC/D,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,SAAS,GAAgC;IAC3C,EAAE,EAAE,qBAAqB;IACzB,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,kEAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,GAAoB,EAAE,eAAiC,EAAE,EAAE;;QAClE,OAAO,CAAC,GAAG,CAAC,gCAAgC,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;QACpE,kBAAkB,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;QAEzC,MAAM,cAAc,GAAG,yBAAyB,EAAE,CAAC;QACnD,IAAI,cAAc,EAAE;YAChB,qBAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,aAAa,0CAAE,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;SAC1E;IACL,CAAC;CACJ,CAAC;AAEF,6BAA6B;AAC7B,+BAA+B;AAC/B,IAAI;AAEJ,yDAAyD;AAEzD,iEAAe,SAAS,EAAC","sources":["webpack://notebook-url/./src/index.ts"],"sourcesContent":["import * as LZString from 'lz-string';\nimport { NotebookPanel, INotebookTracker } from '@jupyterlab/notebook';\nimport { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { Clipboard } from '@jupyterlab/apputils';\n\nconsole.log('notebook_to_url_ext is loaded!');\n\n// Compress the notebook text and set as URL parameter\nfunction compressNotebookContent(notebookPanel: NotebookPanel): void {\n    const notebookContent = JSON.stringify(notebookPanel.context.model.toJSON());\n    const compressedContent = LZString.compressToEncodedURIComponent(notebookContent);\n    const newUrl = `${window.location.origin}${window.location.pathname}#notebook=${compressedContent}`;\n    Clipboard.copyToSystem(newUrl);\n    alert('URL copied to clipboard');\n}\n\n// Decompress the URL parameter and load notebook content\nfunction decompressNotebookContent(): any | null {\n    const urlParams = new URLSearchParams(window.location.hash.slice(1));\n    const compressedContent = urlParams.get('notebook');\n    if (compressedContent) {\n        const decompressedContent = LZString.decompressFromEncodedURIComponent(compressedContent);\n        return JSON.parse(decompressedContent);\n    }\n    return null;\n}\n\n// Add \"Save to URL\" button to the notebook toolbar\nfunction addSaveToUrlButton(app: JupyterFrontEnd, notebookTracker: INotebookTracker): void {\n    const saveToUrlButton = new ToolbarButton({\n        label: 'Save to URL',\n        onClick: () => {\n            const current = notebookTracker.currentWidget;\n            if (current) {\n                compressNotebookContent(current);\n            }\n        },\n        tooltip: 'Save notebook content to URL and copy to clipboard'\n    });\n\n    notebookTracker.widgetAdded.connect((sender, panel) => {\n        panel.toolbar.insertItem(10, 'saveToUrl', saveToUrlButton);\n    });\n}\n\nconst extension: JupyterFrontEndPlugin<void> = {\n    id: 'notebook_to_url_ext',\n    autoStart: true,\n    requires: [INotebookTracker],\n    activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n        console.log('Activating notebook_to_url_ext', app, notebookTracker);\n        addSaveToUrlButton(app, notebookTracker);\n\n        const initialContent = decompressNotebookContent();\n        if (initialContent) {\n            notebookTracker?.currentWidget?.context.model.fromJSON(initialContent);\n        }\n    }\n};\n\n// if (!window._JUPYTERLAB) {\n//     window._JUPYTERLAB = {};\n// }\n\n// window._JUPYTERLAB['notebook_to_url_ext'] = extension;\n\nexport default extension;\n"],"names":[],"sourceRoot":""}