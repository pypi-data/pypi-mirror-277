Metadata-Version: 2.1
Name: green-mbtools
Version: 0.2.2b0
Summary: Collection of tools for quantum many-body simulation using Green Software Package
Author-email: Sergei Iskakov <siskakov@umich.edu>, Chia-Nan Yeh <cyeh@flatironinstitute.org>, Gaurav Harsha <gharsha@umich.edu>, Vibin Abraham <avibin@umich.edu>, Pavel Pokhilko <pokhilko@umich.edu>
Project-URL: Homepage, https://green-phys.org
Project-URL: Issues, https://github.com/Green-Phys/green-python/issues
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: ase
Requires-Dist: spglib
Requires-Dist: numba
Requires-Dist: pyscf
Requires-Dist: scipy
Requires-Dist: h5py
Requires-Dist: irbasis
Requires-Dist: baryrat
Requires-Dist: cvxpy
Requires-Dist: clarabel
Requires-Dist: mosek
Provides-Extra: tests
Requires-Dist: coverage >=5.0.3 ; extra == 'tests'
Requires-Dist: pytest ; extra == 'tests'
Requires-Dist: pytest-benchmark[histogram] >=3.2.1 ; extra == 'tests'

[![Python application](https://github.com/Green-Phys/MB_analysis/actions/workflows/python-app.yml/badge.svg)](https://github.com/Green-Phys/MB_analysis/actions/workflows/python-app.yml)

mbanalysis
===================

Python package for post-processing of Green's-function-based many-body calculations. 
  
Installation
----------
* Install the dependencies (see below).
* Modify the `include_dirs` flag in the `setup.py` file. Two example setup files are already provided.
*  To install the `mbanalysis` package simply execute:
  ```bash
  python setup.py install
  ```
  This will automatically build the Nevanlinna and Caratheodory extensions, which are written in C++.

**Dependencies:**
1. Python packages: `numpy`, `scipy`, `h5py`, `pyscf`, `ase`, `spglib`, `irbasis`, `cvxpy`, and `baryrat`.
2. C++ libraries: `Eigen`, `GMP`, `MPFR`
3. `pytest` for testing
4. [Maxent external C++ librar](https://github.com/CQMP/Maxent) needs to be built separately to run analytic continuation tasks using the maxent method.

Features
----------
* Compute molecular/natural orbitals.
* Mulliken analyasis based on symmetrical atomic orbitals.
* Fourier transformation between real and reciprocal space.
* Fourier transformation between imaginary-time and Matsuabara frequency domain on IR grids.
* Wannier interpolation
* Maxent analytical continuation (External C++ library required: https://github.com/CQMP/Maxent) 
* Nevanlinna analytical continuation, based on Fei et.al. [Phys. Rev. Lett. 126, 056402 (2021)](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.126.056402).
* PES analytical continuation, based on [Phys. Rev. B 107, 075151 (2023)](https://journals.aps.org/prb/abstract/10.1103/PhysRevB.107.075151).
* Caratheodory analytical continuation for complex valued matrices (External C++ library in `Caratheodory`, authored by Fei et.al. [Phys. Rev. B 104, 165111 (2021)](https://journals.aps.org/prb/abstract/10.1103/PhysRevB.104.165111).

To-Do-List
-----------
* Migrate to newer IR grid format
* Improved README and documentation on where to find examples (perhaps a sub-README in the examples folder),
* Replace multiple setup files with one
* (for current implementation of Nevanlinna) re-integrate Hardy optimization
* Fix `examples/winter*.py`: The original example for Silicon has been modified to Hydrogen (for which test data is available). The high-symmetry points in the interpolation need to be readjusted accordingly.


Contirbutions to the code
-----------
* Most of the source code was written by @cnyeh
* Nevanlinna analytic continuation was implemented by @jianiOnly
* Clean up and packaging of the code and extension modules, including Nevanlinna and Caratheodory, was performed by by @gauravharsha
* ES analytic continuation implemented by @gauravharsha
* Example for spaghetti diagrams for occupation numbers added by @pavel-po
