# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/routes/appstudio.ipynb.

# %% auto 0
__all__ = [
    "AppStudioRetrieval_byId_Error",
    "get_apstudio_by_id",
    "get_appstudio_access",
    "get_appstudios_adminsummary",
    "add_page_owner",
]

# %% ../../nbs/routes/appstudio.ipynb 2
import httpx
from typing import List
import domolibrary.client.get_data as gd
import domolibrary.client.ResponseGetData as rgd
import domolibrary.client.DomoAuth as dmda
import domolibrary.client.DomoError as de


# %% ../../nbs/routes/appstudio.ipynb 5
class AppStudioRetrieval_byId_Error(de.DomoError):
    def __init__(
        self,
        status,
        domo_instance,
        appstudio_id,
        response,
        function_name=None,
        parent_class=None,
    ):
        super().__init__(
            status=status,
            function_name=function_name,
            parent_class=parent_class,
            message=f"failed to retrieve appstudio_id: {appstudio_id}",
            domo_instance=domo_instance,
        )


# %% ../../nbs/routes/appstudio.ipynb 8
async def get_apstudio_by_id(
    auth: dmda.DomoAuth,
    appstudio_id: str,
    debug_api: bool = False,
    session: httpx.AsyncClient = None,
    debug_num_stacks_to_drop: int = 1,  # for traceback_details.  use 1 for route functions, 2 for class method
    parent_class: str = None,  # pass in self.__class__.__name__ into function
) -> (
    rgd.ResponseGetData
):  # returns ResponseGetData on success or raise Exception on error
    """retrieves a page or throws an error"""

    # 9/21/2023 - the domo UI uses /cards to get page info
    url = f"https://{auth.domo_instance}.domo.com/api/content/v1/dataapps/{appstudio_id}?authoring=true&includeHiddenViews=true"

    res = await gd.get_data(
        auth=auth,
        url=url,
        method="GET",
        debug_api=debug_api,
        session=session,
        num_stacks_to_drop=debug_num_stacks_to_drop,
        parent_class=parent_class,
    )

    if (
        not res.is_success
        or not isinstance(res.response, dict)
        or not res.response.get("dataAppId", None)
    ):
        raise AppStudioRetrieval_byId_Error(
            status=res.status,
            appstudio_id=appstudio_id,
            function_name=res.traceback_details.function_name,
            parent_class=parent_class,
            domo_instance=auth.domo_instance,
            response=res.response,
        )

    return res


# %% ../../nbs/routes/appstudio.ipynb 12
async def get_appstudio_access(
    auth,
    appstudio_id,
    debug_api: bool = False,
    session: httpx.AsyncClient = None,
    parent_class: str = None,
    debug_num_stacks_to_drop: int = 1,
):
    """retrieves accesslist, which users and groups a page is shared with"""
    url = f"https://{auth.domo_instance}.domo.com/api/content/v1/dataapps/{appstudio_id}/access"

    res = await gd.get_data(
        url,
        method="GET",
        auth=auth,
        session=session,
        debug_api=debug_api,
        num_stacks_to_drop=debug_num_stacks_to_drop,
        parent_class=parent_class,
    )

    return res


# %% ../../nbs/routes/appstudio.ipynb 15
async def get_appstudios_adminsummary(
    auth: dmda.DomoAuth,
    debug_loop: bool = False,
    debug_api: bool = False,
    limit=35,
    session: httpx.AsyncClient = None,
):
    """retrieves all pages in instance user is able to see (but may not have been explicitly shared)"""

    url = f"https://{auth.domo_instance}.domo.com/api/content/v1/dataapps/adminsummary"

    offset_params = {
        "offset": "skip",
        "limit": "limit",
    }

    body = {"orderBy": "title", "ascending": True}

    def arr_fn(res) -> list[dict]:
        return res.response.get("dataAppAdminSummaries")

    res = await gd.looper(
        auth=auth,
        method="POST",
        url=url,
        arr_fn=arr_fn,
        offset_params=offset_params,
        session=session,
        loop_until_end=True,
        body=body,
        limit=limit,
        debug_loop=debug_loop,
        debug_api=debug_api,
    )
    return res


# %% ../../nbs/routes/appstudio.ipynb 17
async def add_page_owner(
    auth: dmda.DomoAuth,
    appstudio_id_ls: List[int],
    group_id_ls: List[int],
    user_id_ls: List[int],
    note: str = "",
    send_email: bool = False,
    session: httpx.AsyncClient = None,
    debug_api: bool = False,
) -> rgd.ResponseGetData:

    url = f"https://{auth.domo_instance}.domo.com/api/content/v1/dataapps/bulk/owners"

    owners = []
    for group in group_id_ls:
        owners.append({"id": group, "type": "GROUP"})
    for user in user_id_ls:
        owners.append({"id": user, "type": "USER"})

    body = {
        "entityIds": appstudio_id_ls,
        "owners": owners,
        "note": note,
        "sendEmail": send_email,
    }

    res = await gd.get_data(
        auth=auth,
        method="PUT",
        url=url,
        body=body,
        session=session,
        debug_api=debug_api,
    )
    return res
