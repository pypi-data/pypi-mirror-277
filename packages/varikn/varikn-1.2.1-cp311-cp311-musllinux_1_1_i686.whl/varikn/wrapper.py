# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _varikn
else:
    import _varikn

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _varikn.delete_SwigPyIterator

    def value(self):
        return _varikn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _varikn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _varikn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _varikn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _varikn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _varikn.SwigPyIterator_copy(self)

    def next(self):
        return _varikn.SwigPyIterator_next(self)

    def __next__(self):
        return _varikn.SwigPyIterator___next__(self)

    def previous(self):
        return _varikn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _varikn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _varikn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _varikn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _varikn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _varikn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _varikn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _varikn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _varikn:
_varikn.SwigPyIterator_swigregister(SwigPyIterator)
class stringvector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _varikn.stringvector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _varikn.stringvector___nonzero__(self)

    def __bool__(self):
        return _varikn.stringvector___bool__(self)

    def __len__(self):
        return _varikn.stringvector___len__(self)

    def __getslice__(self, i, j):
        return _varikn.stringvector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _varikn.stringvector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _varikn.stringvector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _varikn.stringvector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _varikn.stringvector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _varikn.stringvector___setitem__(self, *args)

    def pop(self):
        return _varikn.stringvector_pop(self)

    def append(self, x):
        return _varikn.stringvector_append(self, x)

    def empty(self):
        return _varikn.stringvector_empty(self)

    def size(self):
        return _varikn.stringvector_size(self)

    def swap(self, v):
        return _varikn.stringvector_swap(self, v)

    def begin(self):
        return _varikn.stringvector_begin(self)

    def end(self):
        return _varikn.stringvector_end(self)

    def rbegin(self):
        return _varikn.stringvector_rbegin(self)

    def rend(self):
        return _varikn.stringvector_rend(self)

    def clear(self):
        return _varikn.stringvector_clear(self)

    def get_allocator(self):
        return _varikn.stringvector_get_allocator(self)

    def pop_back(self):
        return _varikn.stringvector_pop_back(self)

    def erase(self, *args):
        return _varikn.stringvector_erase(self, *args)

    def __init__(self, *args):
        _varikn.stringvector_swiginit(self, _varikn.new_stringvector(*args))

    def push_back(self, x):
        return _varikn.stringvector_push_back(self, x)

    def front(self):
        return _varikn.stringvector_front(self)

    def back(self):
        return _varikn.stringvector_back(self)

    def assign(self, n, x):
        return _varikn.stringvector_assign(self, n, x)

    def resize(self, *args):
        return _varikn.stringvector_resize(self, *args)

    def insert(self, *args):
        return _varikn.stringvector_insert(self, *args)

    def reserve(self, n):
        return _varikn.stringvector_reserve(self, n)

    def capacity(self):
        return _varikn.stringvector_capacity(self)
    __swig_destroy__ = _varikn.delete_stringvector

# Register stringvector in _varikn:
_varikn.stringvector_swigregister(stringvector)
class floatvector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _varikn.floatvector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _varikn.floatvector___nonzero__(self)

    def __bool__(self):
        return _varikn.floatvector___bool__(self)

    def __len__(self):
        return _varikn.floatvector___len__(self)

    def __getslice__(self, i, j):
        return _varikn.floatvector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _varikn.floatvector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _varikn.floatvector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _varikn.floatvector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _varikn.floatvector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _varikn.floatvector___setitem__(self, *args)

    def pop(self):
        return _varikn.floatvector_pop(self)

    def append(self, x):
        return _varikn.floatvector_append(self, x)

    def empty(self):
        return _varikn.floatvector_empty(self)

    def size(self):
        return _varikn.floatvector_size(self)

    def swap(self, v):
        return _varikn.floatvector_swap(self, v)

    def begin(self):
        return _varikn.floatvector_begin(self)

    def end(self):
        return _varikn.floatvector_end(self)

    def rbegin(self):
        return _varikn.floatvector_rbegin(self)

    def rend(self):
        return _varikn.floatvector_rend(self)

    def clear(self):
        return _varikn.floatvector_clear(self)

    def get_allocator(self):
        return _varikn.floatvector_get_allocator(self)

    def pop_back(self):
        return _varikn.floatvector_pop_back(self)

    def erase(self, *args):
        return _varikn.floatvector_erase(self, *args)

    def __init__(self, *args):
        _varikn.floatvector_swiginit(self, _varikn.new_floatvector(*args))

    def push_back(self, x):
        return _varikn.floatvector_push_back(self, x)

    def front(self):
        return _varikn.floatvector_front(self)

    def back(self):
        return _varikn.floatvector_back(self)

    def assign(self, n, x):
        return _varikn.floatvector_assign(self, n, x)

    def resize(self, *args):
        return _varikn.floatvector_resize(self, *args)

    def insert(self, *args):
        return _varikn.floatvector_insert(self, *args)

    def reserve(self, n):
        return _varikn.floatvector_reserve(self, n)

    def capacity(self):
        return _varikn.floatvector_capacity(self)
    __swig_destroy__ = _varikn.delete_floatvector

# Register floatvector in _varikn:
_varikn.floatvector_swigregister(floatvector)
class intvector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _varikn.intvector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _varikn.intvector___nonzero__(self)

    def __bool__(self):
        return _varikn.intvector___bool__(self)

    def __len__(self):
        return _varikn.intvector___len__(self)

    def __getslice__(self, i, j):
        return _varikn.intvector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _varikn.intvector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _varikn.intvector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _varikn.intvector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _varikn.intvector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _varikn.intvector___setitem__(self, *args)

    def pop(self):
        return _varikn.intvector_pop(self)

    def append(self, x):
        return _varikn.intvector_append(self, x)

    def empty(self):
        return _varikn.intvector_empty(self)

    def size(self):
        return _varikn.intvector_size(self)

    def swap(self, v):
        return _varikn.intvector_swap(self, v)

    def begin(self):
        return _varikn.intvector_begin(self)

    def end(self):
        return _varikn.intvector_end(self)

    def rbegin(self):
        return _varikn.intvector_rbegin(self)

    def rend(self):
        return _varikn.intvector_rend(self)

    def clear(self):
        return _varikn.intvector_clear(self)

    def get_allocator(self):
        return _varikn.intvector_get_allocator(self)

    def pop_back(self):
        return _varikn.intvector_pop_back(self)

    def erase(self, *args):
        return _varikn.intvector_erase(self, *args)

    def __init__(self, *args):
        _varikn.intvector_swiginit(self, _varikn.new_intvector(*args))

    def push_back(self, x):
        return _varikn.intvector_push_back(self, x)

    def front(self):
        return _varikn.intvector_front(self)

    def back(self):
        return _varikn.intvector_back(self)

    def assign(self, n, x):
        return _varikn.intvector_assign(self, n, x)

    def resize(self, *args):
        return _varikn.intvector_resize(self, *args)

    def insert(self, *args):
        return _varikn.intvector_insert(self, *args)

    def reserve(self, n):
        return _varikn.intvector_reserve(self, n)

    def capacity(self):
        return _varikn.intvector_capacity(self)
    __swig_destroy__ = _varikn.delete_intvector

# Register intvector in _varikn:
_varikn.intvector_swigregister(intvector)
SHARED_PTR_DISOWN = _varikn.SHARED_PTR_DISOWN
class Vocabulary(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _varikn.Vocabulary_swiginit(self, _varikn.new_Vocabulary())

    def word(self, index):
        return _varikn.Vocabulary_word(self, index)

    def is_oov(self, index):
        return _varikn.Vocabulary_is_oov(self, index)

    def word_index(self, word):
        return _varikn.Vocabulary_word_index(self, word)

    def add_word(self, word):
        return _varikn.Vocabulary_add_word(self, word)

    def num_words(self):
        return _varikn.Vocabulary_num_words(self)

    def set_oov(self, word):
        return _varikn.Vocabulary_set_oov(self, word)

    def read(self, *args):
        return _varikn.Vocabulary_read(self, *args)

    def write(self, file):
        return _varikn.Vocabulary_write(self, file)

    def clear_words(self):
        return _varikn.Vocabulary_clear_words(self)

    def copy_vocab_to(self, Voc):
        return _varikn.Vocabulary_copy_vocab_to(self, Voc)

    def copy_helper(self, ind, w):
        return _varikn.Vocabulary_copy_helper(self, ind, w)
    __swig_destroy__ = _varikn.delete_Vocabulary

# Register Vocabulary in _varikn:
_varikn.Vocabulary_swigregister(Vocabulary)
class NGram(Vocabulary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    BACKOFF = _varikn.NGram_BACKOFF
    INTERPOLATED = _varikn.NGram_INTERPOLATED
    __swig_destroy__ = _varikn.delete_NGram

    def order(self):
        return _varikn.NGram_order(self)

    def last_order(self):
        return _varikn.NGram_last_order(self)

    def set_last_order(self, o):
        return _varikn.NGram_set_last_order(self, o)

    def set_type(self, type):
        return _varikn.NGram_set_type(self, type)

    def get_type(self):
        return _varikn.NGram_get_type(self)

    def read(self, _in, binary=False):
        return _varikn.NGram_read(self, _in, binary)

    def write(self, *args):
        return _varikn.NGram_write(self, *args)

    def log_prob(self, *args):
        return _varikn.NGram_log_prob(self, *args)

    def log_prob_bo(self, *args):
        return _varikn.NGram_log_prob_bo(self, *args)

    def log_prob_i(self, *args):
        return _varikn.NGram_log_prob_i(self, *args)

# Register NGram in _varikn:
_varikn.NGram_swigregister(NGram)
class NotImplemented(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _varikn.NotImplemented_swiginit(self, _varikn.new_NotImplemented())
    __swig_destroy__ = _varikn.delete_NotImplemented

# Register NotImplemented in _varikn:
_varikn.NotImplemented_swigregister(NotImplemented)
class InterTreeGram(NGram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _varikn.InterTreeGram_swiginit(self, _varikn.new_InterTreeGram(arg2, arg3))
    __swig_destroy__ = _varikn.delete_InterTreeGram

    def log_prob(self, gram):
        return _varikn.InterTreeGram_log_prob(self, gram)

    def read(self, arg2, arg3):
        return _varikn.InterTreeGram_read(self, arg2, arg3)

    def write(self, arg2, arg3, arg4):
        return _varikn.InterTreeGram_write(self, arg2, arg3, arg4)

    def log_prob_bo(self, *args):
        return _varikn.InterTreeGram_log_prob_bo(self, *args)

    def log_prob_i(self, *args):
        return _varikn.InterTreeGram_log_prob_i(self, *args)

    def fetch_bigram_list(self, arg2, arg3, arg4):
        return _varikn.InterTreeGram_fetch_bigram_list(self, arg2, arg3, arg4)

    def test_write(self, fname, idx):
        return _varikn.InterTreeGram_test_write(self, fname, idx)

# Register InterTreeGram in _varikn:
_varikn.InterTreeGram_swigregister(InterTreeGram)
class Perplexity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _varikn.Perplexity_swiginit(self, _varikn.new_Perplexity(*args))

    def logprob_file(self, _in, out, interval=1):
        return _varikn.Perplexity_logprob_file(self, _in, out, interval)

    def logprob(self, word, cur_word_lp):
        return _varikn.Perplexity_logprob(self, word, cur_word_lp)

    def token_logprob(self, word):
        return _varikn.Perplexity_token_logprob(self, word)

    def word_logprob(self, word):
        return _varikn.Perplexity_word_logprob(self, word)

    def processed_tokens(self):
        return _varikn.Perplexity_processed_tokens(self)

    def processed_words(self):
        return _varikn.Perplexity_processed_words(self)

    def sentence_logprob(self, sentence):
        return _varikn.Perplexity_sentence_logprob(self, sentence)

    def print_hitrates(self, out):
        return _varikn.Perplexity_print_hitrates(self, out)

    def print_results(self, out):
        return _varikn.Perplexity_print_results(self, out)
    EVERYTIME = _varikn.Perplexity_EVERYTIME
    LISTED = _varikn.Perplexity_LISTED
    MB_LISTED = _varikn.Perplexity_MB_LISTED

    def set_wb_type(self, type):
        return _varikn.Perplexity_set_wb_type(self, type)

    def set_unk_warn(self, w):
        return _varikn.Perplexity_set_unk_warn(self, w)
    bryan_wc = property(_varikn.Perplexity_bryan_wc_get, _varikn.Perplexity_bryan_wc_set)

    def set_alpha(self, a):
        return _varikn.Perplexity_set_alpha(self, a)

    def set_interpolation(self, lm_name):
        return _varikn.Perplexity_set_interpolation(self, lm_name)

    def set_init_hist(self, i):
        return _varikn.Perplexity_set_init_hist(self, i)

    def reset_hitrates(self):
        return _varikn.Perplexity_reset_hitrates(self)

    def get_hitorder(self, i):
        return _varikn.Perplexity_get_hitorder(self, i)

    def init_variables(self):
        return _varikn.Perplexity_init_variables(self)

    def clear_history(self):
        return _varikn.Perplexity_clear_history(self)

    def get_num_tunks(self):
        return _varikn.Perplexity_get_num_tunks(self)
    __swig_destroy__ = _varikn.delete_Perplexity

# Register Perplexity in _varikn:
_varikn.Perplexity_swigregister(Perplexity)
class Varigram(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _varikn.delete_Varigram

    def set_datacost_scale(self, f):
        return _varikn.Varigram_set_datacost_scale(self, f)

    def set_datacost_scale2(self, f):
        return _varikn.Varigram_set_datacost_scale2(self, f)

    def set_ngram_prune_target(self, i):
        return _varikn.Varigram_set_ngram_prune_target(self, i)

    def set_max_order(self, i):
        return _varikn.Varigram_set_max_order(self, i)

    def initialize(self, *args):
        return _varikn.Varigram_initialize(self, *args)

    def grow(self, iter2_lim=1):
        return _varikn.Varigram_grow(self, iter2_lim)

    def write_narpa(self, out):
        return _varikn.Varigram_write_narpa(self, out)

    def write_debug_counts(self, out):
        return _varikn.Varigram_write_debug_counts(self, out)

    def write(self, out, arpa):
        return _varikn.Varigram_write(self, out, arpa)

    def set_clear_symbol(self, s):
        return _varikn.Varigram_set_clear_symbol(self, s)

    def set_zeroprobgrams(self, arg2):
        return _varikn.Varigram_set_zeroprobgrams(self, arg2)

    def set_cutoffs(self, v):
        return _varikn.Varigram_set_cutoffs(self, v)

    def set_discard_unks(self, x):
        return _varikn.Varigram_set_discard_unks(self, x)

    def set_all_discounts(self, x):
        return _varikn.Varigram_set_all_discounts(self, x)
    absolute = property(_varikn.Varigram_absolute_get, _varikn.Varigram_absolute_set)

    def write_vocab(self, out):
        return _varikn.Varigram_write_vocab(self, out)

    def write_file(self, lmname, arpa):
        return _varikn.Varigram_write_file(self, lmname, arpa)

# Register Varigram in _varikn:
_varikn.Varigram_swigregister(Varigram)
class VarigramTrainer(Varigram):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, use_3nzero, absolute=False):
        _varikn.VarigramTrainer_swiginit(self, _varikn.new_VarigramTrainer(use_3nzero, absolute))
    __swig_destroy__ = _varikn.delete_VarigramTrainer

    def initialize(self, *args):
        return _varikn.VarigramTrainer_initialize(self, *args)

    def grow(self, iter2_lim=1):
        return _varikn.VarigramTrainer_grow(self, iter2_lim)

    def write_narpa(self, out):
        return _varikn.VarigramTrainer_write_narpa(self, out)

    def write_debug_counts(self, out):
        return _varikn.VarigramTrainer_write_debug_counts(self, out)

    def set_zeroprobgrams(self, x):
        return _varikn.VarigramTrainer_set_zeroprobgrams(self, x)

    def write(self, out, arpa):
        return _varikn.VarigramTrainer_write(self, out, arpa)

    def set_clear_symbol(self, s):
        return _varikn.VarigramTrainer_set_clear_symbol(self, s)

    def set_cutoffs(self, v):
        return _varikn.VarigramTrainer_set_cutoffs(self, v)

    def set_discard_unks(self, x):
        return _varikn.VarigramTrainer_set_discard_unks(self, x)

    def set_all_discounts(self, x):
        return _varikn.VarigramTrainer_set_all_discounts(self, x)

# Register VarigramTrainer in _varikn:
_varikn.VarigramTrainer_swigregister(VarigramTrainer)

