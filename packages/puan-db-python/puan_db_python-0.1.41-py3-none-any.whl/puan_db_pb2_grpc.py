# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import puan_db_pb2 as puan__db__pb2


class ModelingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ModelSelect = channel.unary_unary(
                '/ModelingService/ModelSelect',
                request_serializer=puan__db__pb2.SelectModelRequest.SerializeToString,
                response_deserializer=puan__db__pb2.ModelResponse.FromString,
                )
        self.ModelCreate = channel.unary_unary(
                '/ModelingService/ModelCreate',
                request_serializer=puan__db__pb2.CreateModelRequest.SerializeToString,
                response_deserializer=puan__db__pb2.ModelResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/ModelingService/Get',
                request_serializer=puan__db__pb2.IDRequest.SerializeToString,
                response_deserializer=puan__db__pb2.VariableResponse.FromString,
                )
        self.GetMetaInformation = channel.unary_unary(
                '/ModelingService/GetMetaInformation',
                request_serializer=puan__db__pb2.Empty.SerializeToString,
                response_deserializer=puan__db__pb2.MetaInformationResponse.FromString,
                )
        self.GetDependencies = channel.unary_unary(
                '/ModelingService/GetDependencies',
                request_serializer=puan__db__pb2.IDRequest.SerializeToString,
                response_deserializer=puan__db__pb2.IDsResponse.FromString,
                )
        self.GetIDFromAlias = channel.unary_unary(
                '/ModelingService/GetIDFromAlias',
                request_serializer=puan__db__pb2.AliasRequest.SerializeToString,
                response_deserializer=puan__db__pb2.IDResponse.FromString,
                )
        self.GetPrimitive = channel.unary_unary(
                '/ModelingService/GetPrimitive',
                request_serializer=puan__db__pb2.IDRequest.SerializeToString,
                response_deserializer=puan__db__pb2.Primitive.FromString,
                )
        self.GetPrimitives = channel.unary_unary(
                '/ModelingService/GetPrimitives',
                request_serializer=puan__db__pb2.Empty.SerializeToString,
                response_deserializer=puan__db__pb2.Primitives.FromString,
                )
        self.GetPrimitiveIds = channel.unary_unary(
                '/ModelingService/GetPrimitiveIds',
                request_serializer=puan__db__pb2.Empty.SerializeToString,
                response_deserializer=puan__db__pb2.IDsResponse.FromString,
                )
        self.GetComposite = channel.unary_unary(
                '/ModelingService/GetComposite',
                request_serializer=puan__db__pb2.IDRequest.SerializeToString,
                response_deserializer=puan__db__pb2.Composite.FromString,
                )
        self.GetComposites = channel.unary_unary(
                '/ModelingService/GetComposites',
                request_serializer=puan__db__pb2.Empty.SerializeToString,
                response_deserializer=puan__db__pb2.Composites.FromString,
                )
        self.GetCompositeIds = channel.unary_unary(
                '/ModelingService/GetCompositeIds',
                request_serializer=puan__db__pb2.Empty.SerializeToString,
                response_deserializer=puan__db__pb2.IDsResponse.FromString,
                )
        self.Find = channel.unary_unary(
                '/ModelingService/Find',
                request_serializer=puan__db__pb2.Predicate.SerializeToString,
                response_deserializer=puan__db__pb2.IDsResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/ModelingService/Delete',
                request_serializer=puan__db__pb2.IDRequest.SerializeToString,
                response_deserializer=puan__db__pb2.BooleanSetResponse.FromString,
                )
        self.SetPrimitive = channel.unary_unary(
                '/ModelingService/SetPrimitive',
                request_serializer=puan__db__pb2.Primitive.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetPrimitives = channel.unary_unary(
                '/ModelingService/SetPrimitives',
                request_serializer=puan__db__pb2.SetPrimitivesRequest.SerializeToString,
                response_deserializer=puan__db__pb2.IDsResponse.FromString,
                )
        self.SetAtLeast = channel.unary_unary(
                '/ModelingService/SetAtLeast',
                request_serializer=puan__db__pb2.AtLeast.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetAtMost = channel.unary_unary(
                '/ModelingService/SetAtMost',
                request_serializer=puan__db__pb2.AtMost.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetAnd = channel.unary_unary(
                '/ModelingService/SetAnd',
                request_serializer=puan__db__pb2.And.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetOr = channel.unary_unary(
                '/ModelingService/SetOr',
                request_serializer=puan__db__pb2.Or.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetXor = channel.unary_unary(
                '/ModelingService/SetXor',
                request_serializer=puan__db__pb2.Xor.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetNot = channel.unary_unary(
                '/ModelingService/SetNot',
                request_serializer=puan__db__pb2.Not.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetImply = channel.unary_unary(
                '/ModelingService/SetImply',
                request_serializer=puan__db__pb2.Imply.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetEqual = channel.unary_unary(
                '/ModelingService/SetEqual',
                request_serializer=puan__db__pb2.Equal.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.SetEquivalent = channel.unary_unary(
                '/ModelingService/SetEquivalent',
                request_serializer=puan__db__pb2.Equivalent.SerializeToString,
                response_deserializer=puan__db__pb2.SetResponse.FromString,
                )
        self.Cut = channel.unary_unary(
                '/ModelingService/Cut',
                request_serializer=puan__db__pb2.CutRequest.SerializeToString,
                response_deserializer=puan__db__pb2.ModelResponse.FromString,
                )
        self.Sub = channel.unary_unary(
                '/ModelingService/Sub',
                request_serializer=puan__db__pb2.SubRequest.SerializeToString,
                response_deserializer=puan__db__pb2.ModelResponse.FromString,
                )
        self.CutSub = channel.unary_unary(
                '/ModelingService/CutSub',
                request_serializer=puan__db__pb2.CutSubRequest.SerializeToString,
                response_deserializer=puan__db__pb2.ModelResponse.FromString,
                )
        self.Propagate = channel.unary_unary(
                '/ModelingService/Propagate',
                request_serializer=puan__db__pb2.Interpretation.SerializeToString,
                response_deserializer=puan__db__pb2.Interpretation.FromString,
                )
        self.PropagateUpstream = channel.unary_unary(
                '/ModelingService/PropagateUpstream',
                request_serializer=puan__db__pb2.Interpretation.SerializeToString,
                response_deserializer=puan__db__pb2.Interpretation.FromString,
                )
        self.PropagateBidirectional = channel.unary_unary(
                '/ModelingService/PropagateBidirectional',
                request_serializer=puan__db__pb2.Interpretation.SerializeToString,
                response_deserializer=puan__db__pb2.Interpretation.FromString,
                )
        self.Solve = channel.unary_unary(
                '/ModelingService/Solve',
                request_serializer=puan__db__pb2.SolveRequest.SerializeToString,
                response_deserializer=puan__db__pb2.SolveResponse.FromString,
                )


class ModelingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ModelSelect(self, request, context):
        """Model auth selection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModelCreate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Model information operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetaInformation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIDFromAlias(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimitive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimitives(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPrimitiveIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetComposite(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetComposites(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositeIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Model modification operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPrimitive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPrimitives(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAtLeast(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAtMost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAnd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOr(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetXor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetNot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetImply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEqual(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetEquivalent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Cut(self, request, context):
        """Model cutting operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CutSub(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Propagate(self, request, context):
        """Model computation operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PropagateUpstream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PropagateBidirectional(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Solve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ModelSelect': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelSelect,
                    request_deserializer=puan__db__pb2.SelectModelRequest.FromString,
                    response_serializer=puan__db__pb2.ModelResponse.SerializeToString,
            ),
            'ModelCreate': grpc.unary_unary_rpc_method_handler(
                    servicer.ModelCreate,
                    request_deserializer=puan__db__pb2.CreateModelRequest.FromString,
                    response_serializer=puan__db__pb2.ModelResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=puan__db__pb2.IDRequest.FromString,
                    response_serializer=puan__db__pb2.VariableResponse.SerializeToString,
            ),
            'GetMetaInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetaInformation,
                    request_deserializer=puan__db__pb2.Empty.FromString,
                    response_serializer=puan__db__pb2.MetaInformationResponse.SerializeToString,
            ),
            'GetDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDependencies,
                    request_deserializer=puan__db__pb2.IDRequest.FromString,
                    response_serializer=puan__db__pb2.IDsResponse.SerializeToString,
            ),
            'GetIDFromAlias': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIDFromAlias,
                    request_deserializer=puan__db__pb2.AliasRequest.FromString,
                    response_serializer=puan__db__pb2.IDResponse.SerializeToString,
            ),
            'GetPrimitive': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimitive,
                    request_deserializer=puan__db__pb2.IDRequest.FromString,
                    response_serializer=puan__db__pb2.Primitive.SerializeToString,
            ),
            'GetPrimitives': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimitives,
                    request_deserializer=puan__db__pb2.Empty.FromString,
                    response_serializer=puan__db__pb2.Primitives.SerializeToString,
            ),
            'GetPrimitiveIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPrimitiveIds,
                    request_deserializer=puan__db__pb2.Empty.FromString,
                    response_serializer=puan__db__pb2.IDsResponse.SerializeToString,
            ),
            'GetComposite': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComposite,
                    request_deserializer=puan__db__pb2.IDRequest.FromString,
                    response_serializer=puan__db__pb2.Composite.SerializeToString,
            ),
            'GetComposites': grpc.unary_unary_rpc_method_handler(
                    servicer.GetComposites,
                    request_deserializer=puan__db__pb2.Empty.FromString,
                    response_serializer=puan__db__pb2.Composites.SerializeToString,
            ),
            'GetCompositeIds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompositeIds,
                    request_deserializer=puan__db__pb2.Empty.FromString,
                    response_serializer=puan__db__pb2.IDsResponse.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=puan__db__pb2.Predicate.FromString,
                    response_serializer=puan__db__pb2.IDsResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=puan__db__pb2.IDRequest.FromString,
                    response_serializer=puan__db__pb2.BooleanSetResponse.SerializeToString,
            ),
            'SetPrimitive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPrimitive,
                    request_deserializer=puan__db__pb2.Primitive.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetPrimitives': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPrimitives,
                    request_deserializer=puan__db__pb2.SetPrimitivesRequest.FromString,
                    response_serializer=puan__db__pb2.IDsResponse.SerializeToString,
            ),
            'SetAtLeast': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAtLeast,
                    request_deserializer=puan__db__pb2.AtLeast.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetAtMost': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAtMost,
                    request_deserializer=puan__db__pb2.AtMost.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetAnd': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAnd,
                    request_deserializer=puan__db__pb2.And.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetOr': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOr,
                    request_deserializer=puan__db__pb2.Or.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetXor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetXor,
                    request_deserializer=puan__db__pb2.Xor.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetNot': grpc.unary_unary_rpc_method_handler(
                    servicer.SetNot,
                    request_deserializer=puan__db__pb2.Not.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetImply': grpc.unary_unary_rpc_method_handler(
                    servicer.SetImply,
                    request_deserializer=puan__db__pb2.Imply.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetEqual': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEqual,
                    request_deserializer=puan__db__pb2.Equal.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'SetEquivalent': grpc.unary_unary_rpc_method_handler(
                    servicer.SetEquivalent,
                    request_deserializer=puan__db__pb2.Equivalent.FromString,
                    response_serializer=puan__db__pb2.SetResponse.SerializeToString,
            ),
            'Cut': grpc.unary_unary_rpc_method_handler(
                    servicer.Cut,
                    request_deserializer=puan__db__pb2.CutRequest.FromString,
                    response_serializer=puan__db__pb2.ModelResponse.SerializeToString,
            ),
            'Sub': grpc.unary_unary_rpc_method_handler(
                    servicer.Sub,
                    request_deserializer=puan__db__pb2.SubRequest.FromString,
                    response_serializer=puan__db__pb2.ModelResponse.SerializeToString,
            ),
            'CutSub': grpc.unary_unary_rpc_method_handler(
                    servicer.CutSub,
                    request_deserializer=puan__db__pb2.CutSubRequest.FromString,
                    response_serializer=puan__db__pb2.ModelResponse.SerializeToString,
            ),
            'Propagate': grpc.unary_unary_rpc_method_handler(
                    servicer.Propagate,
                    request_deserializer=puan__db__pb2.Interpretation.FromString,
                    response_serializer=puan__db__pb2.Interpretation.SerializeToString,
            ),
            'PropagateUpstream': grpc.unary_unary_rpc_method_handler(
                    servicer.PropagateUpstream,
                    request_deserializer=puan__db__pb2.Interpretation.FromString,
                    response_serializer=puan__db__pb2.Interpretation.SerializeToString,
            ),
            'PropagateBidirectional': grpc.unary_unary_rpc_method_handler(
                    servicer.PropagateBidirectional,
                    request_deserializer=puan__db__pb2.Interpretation.FromString,
                    response_serializer=puan__db__pb2.Interpretation.SerializeToString,
            ),
            'Solve': grpc.unary_unary_rpc_method_handler(
                    servicer.Solve,
                    request_deserializer=puan__db__pb2.SolveRequest.FromString,
                    response_serializer=puan__db__pb2.SolveResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ModelingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ModelSelect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/ModelSelect',
            puan__db__pb2.SelectModelRequest.SerializeToString,
            puan__db__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ModelCreate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/ModelCreate',
            puan__db__pb2.CreateModelRequest.SerializeToString,
            puan__db__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Get',
            puan__db__pb2.IDRequest.SerializeToString,
            puan__db__pb2.VariableResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetaInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetMetaInformation',
            puan__db__pb2.Empty.SerializeToString,
            puan__db__pb2.MetaInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetDependencies',
            puan__db__pb2.IDRequest.SerializeToString,
            puan__db__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetIDFromAlias(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetIDFromAlias',
            puan__db__pb2.AliasRequest.SerializeToString,
            puan__db__pb2.IDResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimitive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetPrimitive',
            puan__db__pb2.IDRequest.SerializeToString,
            puan__db__pb2.Primitive.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimitives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetPrimitives',
            puan__db__pb2.Empty.SerializeToString,
            puan__db__pb2.Primitives.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPrimitiveIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetPrimitiveIds',
            puan__db__pb2.Empty.SerializeToString,
            puan__db__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetComposite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetComposite',
            puan__db__pb2.IDRequest.SerializeToString,
            puan__db__pb2.Composite.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetComposites(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetComposites',
            puan__db__pb2.Empty.SerializeToString,
            puan__db__pb2.Composites.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositeIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/GetCompositeIds',
            puan__db__pb2.Empty.SerializeToString,
            puan__db__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Find',
            puan__db__pb2.Predicate.SerializeToString,
            puan__db__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Delete',
            puan__db__pb2.IDRequest.SerializeToString,
            puan__db__pb2.BooleanSetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPrimitive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetPrimitive',
            puan__db__pb2.Primitive.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPrimitives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetPrimitives',
            puan__db__pb2.SetPrimitivesRequest.SerializeToString,
            puan__db__pb2.IDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAtLeast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetAtLeast',
            puan__db__pb2.AtLeast.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAtMost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetAtMost',
            puan__db__pb2.AtMost.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAnd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetAnd',
            puan__db__pb2.And.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetOr',
            puan__db__pb2.Or.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetXor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetXor',
            puan__db__pb2.Xor.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetNot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetNot',
            puan__db__pb2.Not.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetImply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetImply',
            puan__db__pb2.Imply.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEqual(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetEqual',
            puan__db__pb2.Equal.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetEquivalent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/SetEquivalent',
            puan__db__pb2.Equivalent.SerializeToString,
            puan__db__pb2.SetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Cut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Cut',
            puan__db__pb2.CutRequest.SerializeToString,
            puan__db__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Sub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Sub',
            puan__db__pb2.SubRequest.SerializeToString,
            puan__db__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CutSub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/CutSub',
            puan__db__pb2.CutSubRequest.SerializeToString,
            puan__db__pb2.ModelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Propagate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Propagate',
            puan__db__pb2.Interpretation.SerializeToString,
            puan__db__pb2.Interpretation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PropagateUpstream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/PropagateUpstream',
            puan__db__pb2.Interpretation.SerializeToString,
            puan__db__pb2.Interpretation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PropagateBidirectional(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/PropagateBidirectional',
            puan__db__pb2.Interpretation.SerializeToString,
            puan__db__pb2.Interpretation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ModelingService/Solve',
            puan__db__pb2.SolveRequest.SerializeToString,
            puan__db__pb2.SolveResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
