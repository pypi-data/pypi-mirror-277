{"version":3,"file":"dfcells_lib_index_js.6aa2f25aca0588510138.js","mappings":"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","sources":["webpack://@dfnotebook/dfnotebook-extension/../dfcells/src/index.ts","webpack://@dfnotebook/dfnotebook-extension/../dfcells/src/inputarea.ts","webpack://@dfnotebook/dfnotebook-extension/../dfcells/src/widget.ts","webpack://@dfnotebook/dfnotebook-extension/../dfoutputarea/src/widget.ts"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * @packageDocumentation\n * @module dfcells\n */\n\nexport * from './inputarea';\nexport * from './widget';\n","import {\n  ICellModel,\n  IInputPrompt,\n  InputArea,\n  InputPrompt\n} from '@jupyterlab/cells';\n\nexport class DataflowInputArea extends InputArea {\n  // kind of annoying as model still needs to be set later\n  constructor(options: InputArea.IOptions) {\n    super(options);\n    (this.prompt as DataflowInputPrompt).model = this.model;\n  }\n\n  get prompt(): DataflowInputPrompt {\n    //@ts-ignore\n    return this._prompt;\n  }\n\n  set prompt(value: DataflowInputPrompt) {\n    (value as DataflowInputPrompt).model = this.model;\n    //@ts-ignore\n    this._prompt = value;\n  }\n\n  public addTag(value: string | null) {\n    this.model?.setMetadata('tag', value);\n    this.prompt.updatePromptNode(this.prompt.executionCount);\n  }\n}\n\nexport namespace DataflowInputArea {\n  export class ContentFactory extends InputArea.ContentFactory {\n    /**\n     * Create an input prompt.\n     */\n    createInputPrompt(): IInputPrompt {\n      return new DataflowInputPrompt();\n    }\n  }\n}\n\nexport class DataflowInputPrompt extends InputPrompt {\n  constructor(model: ICellModel | null = null) {\n    super();\n    this.model = model;\n  }\n\n  public updatePromptNode(value: string | null) {\n    if (this.model?.getMetadata('tag')) {\n      this.node.textContent = `[${this.model.getMetadata('tag')}]:`;\n    } else if (value === null) {\n      this.node.textContent = ' ';\n    } else {\n      this.node.textContent = `[${value || ' '}]:`;\n    }\n  }\n\n  /**\n   * The execution count for the prompt.\n   */\n  get executionCount(): string | null {\n    return super.executionCount;\n  }\n  set executionCount(value: string | null) {\n    super.executionCount = value;\n    this.updatePromptNode(value);\n  }\n\n  get model(): ICellModel | null {\n    return this._model;\n  }\n\n  set model(value: ICellModel | null) {\n    this._model = value;\n    if (this._model) {\n      this.updatePromptNode(this.executionCount);\n    }\n  }\n\n  private _model: ICellModel | null;\n}\n","import { Kernel, KernelMessage } from '@jupyterlab/services';\nimport {\n  AttachmentsCell,\n  Cell,\n  CodeCell,\n  IAttachmentsCellModel,\n  ICellModel,\n  ICodeCellModel,\n  IInputPrompt,\n  MarkdownCell,\n  RawCell\n} from '@jupyterlab/cells';\nimport { DataflowInputArea, DataflowInputPrompt } from './inputarea';\nimport { IOutputAreaModel, IOutputPrompt } from '@jupyterlab/outputarea';\nimport {\n  DataflowOutputArea,\n  DataflowOutputPrompt\n} from '@dfnotebook/dfoutputarea';\nimport { IChangedArgs } from '@jupyterlab/coreutils';\nimport { ISessionContext } from '@jupyterlab/apputils';\nimport { JSONObject } from '@lumino/coreutils';\nimport { Panel } from '@lumino/widgets';\n\n// FIXME need to add this back when dfgraph is working\nimport { Manager as GraphManager } from '@dfnotebook/dfgraph';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n\nfunction setInputArea<T extends ICellModel = ICellModel>(cell: Cell) {\n  // FIXME may be able to get panel via (this.layout as PanelLayout).widgets?\n  //@ts-expect-error\n  const inputWrapper = cell._inputWrapper as Panel;\n  const input = cell.inputArea;\n\n  // find the input area widget\n  let inputIdx = -1;\n  if (input) {\n    const { id } = input;\n    inputWrapper.widgets.forEach((widget, idx) => {\n      if (widget.id === id) {\n        inputIdx = idx;\n      }\n    });\n  }\n\n  const dfInput = new DataflowInputArea({\n    model: cell.model,\n    contentFactory: cell.contentFactory,\n    editorOptions: { config: cell.editorConfig }\n  });\n  dfInput.addClass(CELL_INPUT_AREA_CLASS);\n\n  inputWrapper.insertWidget(inputIdx, dfInput);\n  input?.dispose();\n  //@ts-expect-error\n  cell._input = dfInput;\n}\n\nfunction setOutputArea(cell: CodeCell) {\n  //@ts-expect-error\n  const outputWrapper = cell._outputWrapper as Panel;\n  const output = cell.outputArea;\n\n  // find the output area widget\n  const { id } = output;\n  let outputIdx = -1;\n  outputWrapper.widgets.forEach((widget, idx) => {\n    if (widget.id === id) {\n      outputIdx = idx;\n    }\n  });\n\n  const dfOutput = new DataflowOutputArea(\n    {\n      model: cell.model.outputs,\n      rendermime: output.rendermime,\n      contentFactory: cell.contentFactory,\n      maxNumberOutputs: output.maxNumberOutputs,\n      //@ts-expect-error\n      translator: output._translator,\n      promptOverlay: true,\n      //@ts-expect-error\n      inputHistoryScope: output._inputHistoryScope\n    },\n    // FIXME move this to a function to unify with the code below and in dfnotebook/actions.tsx\n    cell.model.id.replace(/-/g, '').substring(0, 8)\n  );\n\n  dfOutput.addClass(CELL_OUTPUT_AREA_CLASS);\n\n  output.toggleScrolling.disconnect(() => {\n    cell.outputsScrolled = !cell.outputsScrolled;\n  });\n  dfOutput.toggleScrolling.connect(() => {\n    cell.outputsScrolled = !cell.outputsScrolled;\n  });\n\n  // output.initialize.disconnect();\n  // dfOutput.initialize.connect(() => {\n  //   this.updatePromptOverlayIcon();\n  // });\n\n  output.outputLengthChanged.disconnect(\n    //@ts-expect-error\n    cell._outputLengthHandler,\n    cell\n  );\n  //@ts-expect-error\n  dfOutput.outputLengthChanged.connect(cell._outputLengthHandler, cell);\n\n  outputWrapper.insertWidget(outputIdx, dfOutput);\n  output.dispose();\n  //@ts-expect-error\n  cell._output = dfOutput;\n}\n\nexport class DataflowCell<T extends ICellModel = ICellModel> extends Cell<T> {\n  protected initializeDOM(): void {\n    super.initializeDOM();\n    setInputArea(this);\n    this.addClass('df-cell');\n  }\n}\n\nexport namespace DataflowCell {\n  export class ContentFactory extends Cell.ContentFactory {\n    /**\n     * Create an input prompt.\n     */\n    createInputPrompt(): IInputPrompt {\n      return new DataflowInputPrompt();\n    }\n\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt(): IOutputPrompt {\n      return new DataflowOutputPrompt();\n    }\n  }\n}\n\nexport class DataflowMarkdownCell extends MarkdownCell {\n  protected initializeDOM(): void {\n    super.initializeDOM();\n    setInputArea(this);\n    this.addClass('df-cell');\n  }\n}\n\nexport class DataflowRawCell extends RawCell {\n  protected initializeDOM(): void {\n    super.initializeDOM();\n    setInputArea(this);\n    this.addClass('df-cell');\n  }\n}\n\nexport abstract class DataflowAttachmentsCell<\n  T extends IAttachmentsCellModel\n> extends AttachmentsCell<T> {\n  protected initializeDOM(): void {\n    super.initializeDOM();\n    setInputArea(this);\n    this.addClass('df-cell');\n  }\n}\n\nexport class DataflowCodeCell extends CodeCell {\n  protected initializeDOM(): void {\n    super.initializeDOM();\n    setInputArea(this);\n    setOutputArea(this);\n    this.setPromptToId();\n    this.addClass('df-cell');\n  }\n\n  public setPromptToId() {\n    // FIXME move this to a function to unify with the code in dfnotebook/actions.tsx\n    this.setPrompt(`${this.model.id.replace(/-/g, '').substring(0, 8) || ''}`);\n  }\n\n  initializeState(): this {\n    super.initializeState();\n    this.setPromptToId();\n    return this;\n  }\n\n  protected onStateChanged(model: ICellModel, args: IChangedArgs<any>): void {\n    super.onStateChanged(model, args);\n    switch (args.name) {\n      case 'executionCount':\n        this.setPromptToId();\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport namespace DataflowCodeCell {\n  /**\n   * Execute a cell given a client session.\n   */\n  export async function execute(\n    cell: DataflowCodeCell,\n    sessionContext: ISessionContext,\n    metadata?: JSONObject,\n    dfData?: JSONObject,\n    cellIdModelMap?: { [key: string]: ICodeCellModel }\n  ): Promise<KernelMessage.IExecuteReplyMsg | void> {\n    const model = cell.model;\n    const code = model.sharedModel.getSource();\n    if (!code.trim() || !sessionContext.session?.kernel) {\n      model.sharedModel.transact(() => {\n        model.clearExecution();\n      }, false);\n      return;\n    }\n    const cellId = { cellId: model.sharedModel.getId() };\n    metadata = {\n      ...model.metadata,\n      ...metadata,\n      ...cellId\n    };\n    const { recordTiming } = metadata;\n    model.sharedModel.transact(() => {\n      model.clearExecution();\n      cell.outputHidden = false;\n    }, false);\n    cell.setPrompt('*');\n    model.trusted = true;\n    let future:\n      | Kernel.IFuture<\n          KernelMessage.IExecuteRequestMsg,\n          KernelMessage.IExecuteReplyMsg\n        >\n      | undefined;\n    try {\n      const cellIdOutputsMap: { [key: string]: IOutputAreaModel } = {};\n      if (cellIdModelMap) {\n        for (const cellId in cellIdModelMap) {\n          cellIdOutputsMap[cellId] = cellIdModelMap[cellId].outputs;\n        }\n      }\n\n      const msgPromise = DataflowOutputArea.execute(\n        code,\n        cell.outputArea,\n        sessionContext,\n        metadata,\n        dfData,\n        cellIdOutputsMap\n      );\n      // cell.outputArea.future assigned synchronously in `execute`\n      if (recordTiming) {\n        const recordTimingHook = (msg: KernelMessage.IIOPubMessage) => {\n          let label: string;\n          switch (msg.header.msg_type) {\n            case 'status':\n              label = `status.${\n                (msg as KernelMessage.IStatusMsg).content.execution_state\n              }`;\n              break;\n            case 'execute_input':\n              label = 'execute_input';\n              break;\n            default:\n              return true;\n          }\n          // If the data is missing, estimate it to now\n          // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n          const value = msg.header.date || new Date().toISOString();\n          const timingInfo: any = Object.assign(\n            {},\n            model.getMetadata('execution')\n          );\n          timingInfo[`iopub.${label}`] = value;\n          model.setMetadata('execution', timingInfo);\n          return true;\n        };\n        cell.outputArea.future.registerMessageHook(recordTimingHook);\n      } else {\n        model.deleteMetadata('execution');\n      }\n\n      const clearOutput = (msg: KernelMessage.IIOPubMessage) => {\n        switch (msg.header.msg_type) {\n          case 'execute_input':\n            const executionCount = (msg as KernelMessage.IExecuteInputMsg)\n              .content.execution_count;\n            if (executionCount !== null) {\n              const cellId = executionCount.toString(16).padStart(8, '0');\n              if (cellIdModelMap) {\n                const cellModel = cellIdModelMap[cellId];\n                cellModel.sharedModel.setSource(\n                  (msg as KernelMessage.IExecuteInputMsg).content.code\n                );\n                cellModel.outputs.clear();\n              }\n            }\n            break;\n          default:\n            return true;\n        }\n        return true;\n      };\n      cell.outputArea.future.registerMessageHook(clearOutput);\n\n      // Save this execution's future so we can compare in the catch below.\n      future = cell.outputArea.future;\n      const msg = (await msgPromise)!;\n      model.executionCount = msg.content.execution_count;\n      if (recordTiming) {\n        const timingInfo = Object.assign(\n          {},\n          model.getMetadata('execution') as any\n        );\n        const started = msg.metadata.started as string;\n        // Started is not in the API, but metadata IPyKernel sends\n        if (started) {\n          timingInfo['shell.execute_reply.started'] = started;\n        }\n        // Per above, the 5.0 spec does not assume date, so we estimate is required\n        const finished = msg.header.date as string;\n        timingInfo['shell.execute_reply'] =\n          finished || new Date().toISOString();\n        model.setMetadata('execution', timingInfo);\n      }\n\n      let content = (msg.content as any)\n      let nodes = content.nodes;\n      let uplinks = content.links;\n      let cells = content.cells;\n      let downlinks = content.imm_downstream_deps;\n      let allUps = content.upstream_deps;\n      let internalNodes = content.internal_nodes;\n      let sessId = sessionContext.session.id;\n      //Set information about the graph based on sessionid\n      GraphManager.graphs[sessId].updateCellContents(dfData?.code_dict);\n      GraphManager.graphs[sessId].updateGraph(cells,nodes,uplinks,downlinks,`${cell.model.id.substr(0, 8) || ''}`,allUps,internalNodes);\n      GraphManager.updateDepViews(false);\n       if (content.update_downstreams) {\n                    GraphManager.graphs[sessId].updateDownLinks(content.update_downstreams);\n      }\n\n      return msg;\n    } catch (e) {\n      // If we started executing, and the cell is still indicating this\n      // execution, clear the prompt.\n      if (future && !cell.isDisposed && cell.outputArea.future === future) {\n        // cell.setPrompt('');\n        // FIXME is this necessary?\n        cell.setPromptToId();\n        // cell.setPrompt(`${cell.model.id.substring(0, 8) || ''}`);\n      }\n      throw e;\n    }\n  }\n}\n","import {\n  IOutputAreaModel,\n  IOutputPrompt,\n  OutputArea,\n  OutputPrompt\n} from '@jupyterlab/outputarea';\nimport { IOutputModel } from '@jupyterlab/rendermime';\nimport { ISessionContext } from '@jupyterlab/apputils';\nimport { Kernel, KernelMessage } from '@jupyterlab/services';\nimport * as nbformat from '@jupyterlab/nbformat';\nimport { JSONObject } from '@lumino/coreutils';\nimport { Panel, Widget } from '@lumino/widgets';\n\nexport interface IStreamWithExecCountMsg extends KernelMessage.IStreamMsg {\n  content: {\n    name: 'stdout' | 'stderr';\n    text: string;\n    execution_count?: number | null;\n  };\n}\n\nexport interface IErrorWithExecCountMsg extends KernelMessage.IErrorMsg {\n  content: {\n    ename: string;\n    evalue: string;\n    traceback: string[];\n    execution_count?: number | null;\n  };\n}\n\nexport class DataflowOutputArea extends OutputArea {\n  constructor(options: OutputArea.IOptions, cellId: string) {\n    super({\n      contentFactory: DataflowOutputArea.defaultContentFactory,\n      ...options\n    });\n    this.cellId = cellId;\n  }\n\n  /**\n   * The cellIdModelMap is a hack to map outputs to other cells.\n   */\n  static cellIdModelMap: { [key: string]: IOutputAreaModel } | undefined;\n\n  /*\n   * The cell's id\n   */\n  cellId: string;\n\n  get future(): Kernel.IShellFuture<\n    KernelMessage.IExecuteRequestMsg,\n    KernelMessage.IExecuteReplyMsg\n  > {\n    return super.future;\n  }\n\n  set future(\n    value: Kernel.IShellFuture<\n      KernelMessage.IExecuteRequestMsg,\n      KernelMessage.IExecuteReplyMsg\n    >\n  ) {\n    super.future = value;\n    super.future.onIOPub = this.onIOPub;\n  }\n\n  public onIOPub = (msg: KernelMessage.IIOPubMessage) => {\n    const model = this.model;\n    const msgType = msg.header.msg_type;\n    let execCountMsg: KernelMessage.IExecuteResultMsg | KernelMessage.IDisplayDataMsg | IStreamWithExecCountMsg | IErrorWithExecCountMsg;\n    let output: nbformat.IOutput;\n    const transient = ((msg.content as any).transient || {}) as JSONObject;\n    const displayId = transient['display_id'] as string;\n    let targets: number[];\n    \n    switch (msgType) {\n      case 'execute_result':\n        execCountMsg = msg as KernelMessage.IExecuteResultMsg;\n      case 'display_data':\n        execCountMsg = msg as KernelMessage.IDisplayDataMsg;\n      case 'stream':\n        execCountMsg = msg as IStreamWithExecCountMsg;\n      case 'error':\n        execCountMsg = msg as IErrorWithExecCountMsg;        \n        if (execCountMsg.content.execution_count) {\n          const cellId = execCountMsg.content.execution_count.toString(16).padStart(8, '0');\n          if (msgType === 'stream' || msgType === 'error') {\n            delete execCountMsg.content.execution_count;\n          }\n          output = { ...execCountMsg.content, output_type: msgType };\n          if (cellId != this.cellId) {\n            if (DataflowOutputArea.cellIdModelMap) {\n              const cellModel = DataflowOutputArea.cellIdModelMap[cellId];\n              cellModel.add(output);\n            }\n          } else {\n            model.add(output);\n          }\n        } else {\n          output = { ...execCountMsg.content, output_type: msgType };\n          model.add(output);\n        }\n        // FIXME do we have to do the displayId && msgType === 'display_data' stuff?\n        // is this only for update-display-data?\n        if (displayId && msgType === 'display_data') {\n          //@ts-expect-error\n          targets = this._displayIdMap.get(displayId) || [];\n          targets.push(model.length - 1);\n          //@ts-expect-error\n          this._displayIdMap.set(displayId, targets);\n        }\n        break;\n      default:\n        //@ts-expect-error\n        this._onIOPub(msg);\n        break;\n      };\n  };\n\n  protected createOutputItem(model: IOutputModel): Widget | null {\n    const panel = super.createOutputItem(model) as Panel;\n    if (panel) {\n      if (model.metadata['output_tag']) {\n        const prompt = panel.widgets[0] as DataflowOutputPrompt;\n        prompt.outputTag = model.metadata['output_tag'] as string;\n      }\n    }\n    return panel;\n  }\n}\n\nexport class DataflowOutputPrompt extends OutputPrompt {\n  updatePrompt() {\n    if (this._outputTag) {\n      this.node.textContent = `${this._outputTag}:`;\n    } else if (this.executionCount === null) {\n      this.node.textContent = '';\n    } else {\n      const cellId = this.executionCount.toString(16).padStart(8, '0');\n      // .substr(0, 3);\n      this.node.textContent = `[${cellId}]:`;\n    }\n  }\n\n  get executionCount(): nbformat.ExecutionCount {\n    return super.executionCount;\n  }\n  set executionCount(value: nbformat.ExecutionCount) {\n    super.executionCount = value;\n    this.updatePrompt();\n  }\n\n  get outputTag(): string {\n    return this._outputTag;\n  }\n\n  set outputTag(value: string) {\n    this._outputTag = value;\n    this.updatePrompt();\n  }\n\n  private _outputTag: string = '';\n}\n\nexport namespace DataflowOutputArea {\n  export async function execute(\n    code: string,\n    output: OutputArea,\n    sessionContext: ISessionContext,\n    metadata?: JSONObject,\n    dfData?: JSONObject,\n    cellIdModelMap?: { [key: string]: IOutputAreaModel }\n  ): Promise<KernelMessage.IExecuteReplyMsg | undefined> {\n    // Override the default for `stop_on_error`.\n    let stopOnError = true;\n    if (\n      metadata &&\n      Array.isArray(metadata.tags) &&\n      metadata.tags.indexOf('raises-exception') !== -1\n    ) {\n      stopOnError = false;\n    }\n    if (dfData === undefined) {\n      // FIXME not sure if this works or not...\n      dfData = {} as JSONObject;\n    }\n    const content: KernelMessage.IExecuteRequestMsg['content'] = {\n      code,\n      stop_on_error: stopOnError,\n      user_expressions: { __dfkernel_data__: dfData } as JSONObject\n    };\n\n    const kernel = sessionContext.session?.kernel;\n    if (!kernel) {\n      throw new Error('Session has no kernel.');\n    }\n    const future = kernel.requestExecute(content, false, metadata);\n    output.future = future;\n\n    DataflowOutputArea.cellIdModelMap = cellIdModelMap;\n\n    return future.done;\n  }\n\n  /**\n   * The default implementation of `IContentFactory`.\n   */\n  export class ContentFactory extends OutputArea.ContentFactory {\n    /**\n     * Create the output prompt for the widget.\n     */\n    createOutputPrompt(): IOutputPrompt {\n      return new DataflowOutputPrompt();\n    }\n  }\n\n  export const defaultContentFactory = new ContentFactory();\n}\n"],"names":[],"sourceRoot":""}