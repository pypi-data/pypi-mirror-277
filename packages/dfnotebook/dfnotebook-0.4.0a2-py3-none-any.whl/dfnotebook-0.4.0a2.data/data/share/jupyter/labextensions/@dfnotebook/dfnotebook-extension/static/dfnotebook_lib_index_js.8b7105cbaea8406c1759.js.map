{"version":3,"file":"dfnotebook_lib_index_js.8b7105cbaea8406c1759.js","mappings":"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","sources":["webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/cellexecutor.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/index.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/model.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/modelfactory.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/panel.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/tokens.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/widget.ts","webpack://@dfnotebook/dfnotebook-extension/../dfnotebook/src/widgetfactory.ts"],"sourcesContent":["import { Dialog, showDialog } from '@jupyterlab/apputils';\nimport {\n    CodeCell,\n  type Cell,\n  type ICodeCellModel,\n  type MarkdownCell\n} from '@jupyterlab/cells';\nimport type { KernelMessage } from '@jupyterlab/services';\nimport { nullTranslator } from '@jupyterlab/translation';\nimport { findIndex } from '@lumino/algorithm';\nimport { KernelError, INotebookModel, INotebookCellExecutor } from '@jupyterlab/notebook';\nimport { DataflowCodeCell } from '@dfnotebook/dfcells';\nimport { DataflowNotebookModel } from './model';\n\n/**\n * Run a single notebook cell.\n *\n * @param options Cell execution options\n * @returns Execution status\n */\nexport async function runCell({\n    cell,\n    notebook,\n    notebookConfig,\n    onCellExecuted,\n    onCellExecutionScheduled,\n    sessionContext,\n    sessionDialogs,\n    translator\n  }: INotebookCellExecutor.IRunCellOptions): Promise<boolean> {\n    translator = translator ?? nullTranslator;\n    const trans = translator.load('jupyterlab');\n    switch (cell.model.type) {\n      case 'markdown':\n        (cell as MarkdownCell).rendered = true;\n        cell.inputHidden = false;\n        onCellExecuted({ cell, success: true });\n        break;\n      case 'code':\n        if (sessionContext) {\n          if (sessionContext.isTerminating) {\n            await showDialog({\n              title: trans.__('Kernel Terminating'),\n              body: trans.__(\n                'The kernel for %1 appears to be terminating. You can not run any cell for now.',\n                sessionContext.session?.path\n              ),\n              buttons: [Dialog.okButton()]\n            });\n            break;\n          }\n          if (sessionContext.pendingInput) {\n            await showDialog({\n              title: trans.__('Cell not executed due to pending input'),\n              body: trans.__(\n                'The cell has not been executed to avoid kernel deadlock as there is another pending input! Submit your pending input and try again.'\n              ),\n              buttons: [Dialog.okButton()]\n            });\n            return false;\n          }\n          if (sessionContext.hasNoKernel) {\n            const shouldSelect = await sessionContext.startKernel();\n            if (shouldSelect && sessionDialogs) {\n              await sessionDialogs.selectKernel(sessionContext);\n            }\n          }\n  \n          if (sessionContext.hasNoKernel) {\n            cell.model.sharedModel.transact(() => {\n              (cell.model as ICodeCellModel).clearExecution();\n            });\n            return true;\n          }\n  \n          const deletedCells = notebook.deletedCells;\n\n          onCellExecutionScheduled({ cell });\n  \n          let ran = false;\n          try {\n            let reply: KernelMessage.IExecuteReplyMsg | void;\n            // !!! DATAFLOW NOTEBOOK CODE !!!\n            if (notebook instanceof DataflowNotebookModel) {\n                const codeDict: { [key: string]: string } = {};\n                const cellIdModelMap: { [key: string]: any } = {};\n                const outputTags: { [key: string]: string[] } = {};\n                const inputTags: { [key: string]: string } = {};\n                    if (notebook) {\n                    for (let index = 0; index < notebook.cells.length; index++) {\n                    const cAny = notebook.cells.get(index);\n                    if (cAny.type === 'code') {\n                        const c = cAny as ICodeCellModel;\n                        // FIXME replace with utility function (see dfcells/widget)\n                        const cId = c.id.replace(/-/g, '').substring(0, 8);\n                        const inputTag = c.getMetadata('tag');\n                        if (inputTag) {\n                        // FIXME need to check for duplicates!\n                        inputTags[inputTag as string] = cId;\n                        }\n                        codeDict[cId] = c.sharedModel.getSource();\n                        cellIdModelMap[cId] = c;\n                        let cellOutputTags: string[] = [];\n                        for (let i = 0; i < c.outputs.length; ++i) {\n                        const out = c.outputs.get(i);\n                        if (out.metadata['output_tag']) {\n                            cellOutputTags.push(out.metadata['output_tag'] as string);\n                        }\n                        }\n                        outputTags[cId] = cellOutputTags;\n                    }\n                    };\n                }\n                // console.log('codeDict:', codeDict);\n                // console.log('cellIdWidgetMap:', cellIdWidgetMap);\n                // console.log('outputTags:', outputTags);\n                // console.log('inputTags:', inputTags);\n    \n                const dfData = {\n                    // FIXME replace with utility function (see dfcells/widget)\n                    uuid: cell.model.id.replace(/-/g, '').substring(0, 8) || '',\n                    code_dict: codeDict,\n                    output_tags: outputTags, // this.notebook.get_output_tags(Object.keys(code_dict)),\n                    input_tags: inputTags,\n                    auto_update_flags: {}, // this.notebook.get_auto_update_flags(),\n                    force_cached_flags: {} // this.notebook.get_force_cached_flags()})\n                };\n    \n                reply = await DataflowCodeCell.execute(\n                    cell as DataflowCodeCell,\n                    sessionContext,\n                    {\n                    deletedCells,\n                    recordTiming: notebookConfig.recordTiming\n                    },\n                    dfData,\n                    cellIdModelMap\n                );\n            } else {\n                reply = await CodeCell.execute(\n                cell as CodeCell,\n                sessionContext,\n                {\n                    deletedCells,\n                    recordTiming: notebookConfig.recordTiming\n                }\n                );\n            }\n            // !!! END DATAFLOW NOTEBOOK CODE !!!\n              \n            deletedCells.splice(0, deletedCells.length);\n  \n            ran = (() => {\n              if (cell.isDisposed) {\n                return false;\n              }\n  \n              if (!reply) {\n                return true;\n              }\n              if (reply.content.status === 'ok') {\n                const content = reply.content;\n  \n                if (content.payload && content.payload.length) {\n                  handlePayload(content, notebook, cell);\n                }\n  \n                return true;\n              } else {\n                throw new KernelError(reply.content);\n              }\n            })();\n          } catch (reason) {\n            if (cell.isDisposed || reason.message.startsWith('Canceled')) {\n              ran = false;\n            } else {\n              onCellExecuted({\n                cell,\n                success: false,\n                error: reason\n              });\n              throw reason;\n            }\n          }\n  \n          if (ran) {\n            onCellExecuted({ cell, success: true });\n          }\n  \n          return ran;\n        }\n        cell.model.sharedModel.transact(() => {\n          (cell.model as ICodeCellModel).clearExecution();\n        }, false);\n        break;\n      default:\n        break;\n    }\n  \n    return Promise.resolve(true);\n  }\n  \n  /**\n   * Handle payloads from an execute reply.\n   *\n   * #### Notes\n   * Payloads are deprecated and there are no official interfaces for them in\n   * the kernel type definitions.\n   * See [Payloads (DEPRECATED)](https://jupyter-client.readthedocs.io/en/latest/messaging.html#payloads-deprecated).\n   */\n  function handlePayload(\n    content: KernelMessage.IExecuteReply,\n    notebook: INotebookModel,\n    cell: Cell\n  ) {\n    const setNextInput = content.payload?.filter(i => {\n      return (i as any).source === 'set_next_input';\n    })[0];\n  \n    if (!setNextInput) {\n      return;\n    }\n  \n    const text = setNextInput.text as string;\n    const replace = setNextInput.replace;\n  \n    if (replace) {\n      cell.model.sharedModel.setSource(text);\n      return;\n    }\n  \n    // Create a new code cell and add as the next cell.\n    const notebookModel = notebook.sharedModel;\n    const cells = notebook.cells;\n    const index = findIndex(cells, model => model === cell.model);\n  \n    // While this cell has no outputs and could be trusted following the letter\n    // of Jupyter trust model, its content comes from kernel and hence is not\n    // necessarily controlled by the user; if we set it as trusted, a user\n    // executing cells in succession could end up with unwanted trusted output.\n    if (index === -1) {\n      notebookModel.insertCell(notebookModel.cells.length, {\n        cell_type: 'code',\n        source: text,\n        metadata: {\n          trusted: false\n        }\n      });\n    } else {\n      notebookModel.insertCell(index + 1, {\n        cell_type: 'code',\n        source: text,\n        metadata: {\n          trusted: false\n        }\n      });\n    }\n  }","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module dfnotebook\n */\n\nexport * from './cellexecutor';\nexport * from './model';\nexport * from './modelfactory';\nexport * from './panel';\nexport * from './widget';\nexport * from './tokens';\nexport * from './widgetfactory';","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { NotebookModel } from '@jupyterlab/notebook';\nimport * as nbformat from '@jupyterlab/nbformat';\n\n\nexport class DataflowNotebookModel extends NotebookModel {\n\n  fromJSON(value: nbformat.INotebookContent): void {\n    let isDataflow = true;\n    if (value.metadata?.kernelspec?.name && value.metadata.kernelspec.name != 'dfpython3') {\n      isDataflow = false;\n    }\n    super.fromJSON(value);\n    this.setMetadata('dfnotebook', isDataflow);\n  }\n\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { DataflowNotebookModel } from './model';\nimport { INotebookModel, NotebookModelFactory } from '@jupyterlab/notebook';\nimport type { ISharedNotebook } from '@jupyter/ydoc';\nimport { DocumentRegistry } from '@jupyterlab/docregistry';\n\n/**\n * A model factory for notebooks.\n */\nexport class DataflowNotebookModelFactory extends NotebookModelFactory {\n\n  /**\n   * Create a new model for a given path.\n   *\n   * @param languagePreference - An optional kernel language preference.\n   *\n   * @returns A new document model.\n   */\n  createNew(\n    options: DocumentRegistry.IModelOptions<ISharedNotebook> = {}\n  ): INotebookModel {\n    return new DataflowNotebookModel({\n      languagePreference: options.languagePreference,\n      sharedModel: options.sharedModel,\n      collaborationEnabled: options.collaborationEnabled && this.collaborative,\n      //@ts-ignore\n      disableDocumentWideUndoRedo: this._disableDocumentWideUndoRedo\n    });\n  }\n\n  /**\n   * The name of the model.\n   */\n   get name(): string {\n    return 'dfnotebook';\n  }\n\n  // FIXME: Can only assign to notebook | file | directory\n  //\n  // /**\n  //  * The content type of the file.\n  //  */\n  // get contentType(): Contents.ContentType {\n  //   return 'dfnotebook';\n  // }  \n}\n\nexport namespace DataflowNotebookModelFactory {\n  export interface IFactory extends DocumentRegistry.IModelFactory<INotebookModel> {\n\n  }\n}","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { Notebook, NotebookPanel } from '@jupyterlab/notebook';\nimport { DataflowNotebook } from './widget';\nimport { Token } from '@lumino/coreutils';\n/**\n * A namespace for `DataflowNotebookPanel` statics.\n */\nexport namespace DataflowNotebookPanel {\n  export interface IContentFactory extends NotebookPanel.IContentFactory {\n\n  }\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n  export class ContentFactory extends DataflowNotebook.ContentFactory implements IContentFactory {\n    /**\n     * Create a new content area for the panel.\n     */\n    createNotebook(options: Notebook.IOptions): Notebook {\n      return new DataflowNotebook(options);\n    }\n  }\n\n  /**\n   * The notebook renderer token.\n   */\n  export const IContentFactory = new Token<IContentFactory>(\n    '@dfnotebook/dfnotebook:IContentFactory',\n    `A factory object that creates new dataflow notebooks.\n    Use this if you want to create and host dataflow notebooks in your own UI elements.`\n  )\n}\n\n\n","import { Token } from '@lumino/coreutils';\nimport { DataflowNotebookWidgetFactory } from './widgetfactory';\n\n/**\n * The dfnotebook widget factory token.\n */\nexport const IDataflowNotebookWidgetFactory = new Token<DataflowNotebookWidgetFactory.IFactory>(\n    '@dfnotebook/dfnotebook:DataflowNotebookWidgetFactory',\n    'A service to create the dataflow notebook viewer.'\n);","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport {\n  CodeCell,\n  MarkdownCell,\n  RawCell,\n} from '@jupyterlab/cells';\nimport { Notebook, StaticNotebook } from '@jupyterlab/notebook';\n\nimport {\n  DataflowCell,\n  DataflowCodeCell,\n  DataflowMarkdownCell,\n  DataflowRawCell,\n} from '@dfnotebook/dfcells';\n\n/**\n * The namespace for the `StaticNotebook` class statics.\n */\nexport namespace DataflowStaticNotebook {\n\n  /**\n   * The default implementation of an `IContentFactory`.\n   */\n   export class ContentFactory extends DataflowCell.ContentFactory implements StaticNotebook.IContentFactory {\n    /**\n     * Create a new code cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createCodeCell(\n      options: CodeCell.IOptions    \n    ): CodeCell {      \n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowCodeCell(options).initializeState();\n    }\n\n    /**\n     * Create a new markdown cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createMarkdownCell(\n      options: MarkdownCell.IOptions,\n    ): MarkdownCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowMarkdownCell(options).initializeState();\n    }\n\n    /**\n     * Create a new raw cell widget.\n     *\n     * #### Notes\n     * If no cell content factory is passed in with the options, the one on the\n     * notebook content factory is used.\n     */\n    createRawCell(options: RawCell.IOptions): RawCell {\n      if (!options.contentFactory) {\n        options.contentFactory = this;\n      }\n      return new DataflowRawCell(options).initializeState();\n    }\n  }\n}\n\nexport class DataflowNotebook extends Notebook { }\n\nexport namespace DataflowNotebook {\n  /**\n   * The default implementation of a notebook content factory..\n   *\n   * #### Notes\n   * Override methods on this class to customize the default notebook factory\n   * methods that create notebook content.\n   */\n  export class ContentFactory extends DataflowStaticNotebook.ContentFactory {}\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\n// import { DocumentRegistry } from \"@jupyterlab/docregistry\";\nimport { NotebookWidgetFactory } from \"@jupyterlab/notebook\";\n\n/**\n * A widget factory for notebook panels.\n */\nexport class DataflowNotebookWidgetFactory extends NotebookWidgetFactory {\n\n  // What matters here is that the contentFactory gets set to use\n  // DataflowNotebookPanel, so we don't need to override this\n  \n  // protected createNewWidget(\n  //   context: DocumentRegistry.IContext<INotebookModel>,\n  //   source?: NotebookPanel\n  // ): NotebookPanel {\n  //   const translator = (context as any).translator;\n  //   const nbOptions = {\n  //     rendermime: source\n  //       ? source.content.rendermime\n  //       : this.rendermime.clone({ resolver: context.urlResolver }),\n  //     contentFactory: this.contentFactory,\n  //     mimeTypeService: this.mimeTypeService,\n  //     editorConfig: source ? source.content.editorConfig : this.editorConfig,\n  //     notebookConfig: source\n  //       ? source.content.notebookConfig\n  //       : this.notebookConfig,\n  //     translator\n  //   };\n  //   const content = this.contentFactory.createNotebook(nbOptions);\n\n  //   return new NotebookPanel({ context, content });\n  // }\n\n\n}\n\nexport namespace DataflowNotebookWidgetFactory {\n  export interface IFactory extends NotebookWidgetFactory.IFactory {\n\n  }\n}"],"names":[],"sourceRoot":""}