# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional

import numpy as np

from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
from .HeroColumn import HeroColumn
from .CustomSerializers.DataFrameSerializer import DataFrameSerializer

from .HeroData import HeroData


class HeroTable(HeroData):

    def __init__(self, df: "pandas.DataFrame"):
        HeroData.__init__(self)
        self._validate_table(df)
        self._data = df
        if hasattr(df, 'name'):
            self._name = df.name
        else:
            self._name = ""

    @staticmethod
    def create(obj):
        import pandas as pd
        if not isinstance(obj, pd.DataFrame):
            raise Exception(f"Could not interpret an object of type {type(obj).__name__} as a HeroTable.")
        return HeroTable(obj)

    @staticmethod
    def _validate_table(df):

        # Check that columns has names that are string:
        if np.issubdtype(df.columns.values.dtype, np.integer):
            raise RuntimeError("Hero requires table columns to have explicit titles of type 'str'. Cannot create "
                               f"titles from Dataframe column labels of data type: {df.columns.values.dtype}")

        for c_name in df:
            HeroColumn.validate_column(df[c_name])

    @staticmethod
    def create_from_dict(data: dict):
        df = data['_data']
        df.name = data['_name']
        return df

    def __eq__(self, other: HeroTable):
        if not super(HeroTable, self).__eq__(other):
            return False
        return self._data.equals(other._data)

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "HeroTable"

    # Datatype attributes.
    _attributes = Attributes("HT", version=0, member_count=2)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(HeroTable, self).serialize(writer_fun)
        writer_fun(self._data, "DataFrame", "_data", DataFrameSerializer())
        writer_fun(self._name, "String", "Name", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(HeroTable, HeroTable).deserialize(reader_fun)
        data["_data"], _ = reader_fun("DataFrame", DataFrameSerializer())
        data["_name"], _ = reader_fun("String", None)
        return data
