# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .SettingsValue import SettingsValue


class SettingsVector3D(SettingsValue):

    def __init__(self,  value, labels, unit="mm", min_value = float('-inf'), max_value =float('inf'), require_integer=False, allow_nan=True,
            read_only=False, visible=True, description="", can_be_input=False, is_input=False, full_input_name=True):

        SettingsValue.__init__(self, min_value, max_value, read_only, visible, description, can_be_input, is_input, full_input_name)
        self._labels = labels
        self._unit = unit
        self._min_value = min_value
        self._max_value = max_value
        self._allow_nan = allow_nan
        self._require_integer = require_integer
        self._value = value

    @staticmethod
    def create_from_dict(data: dict):
        s = SettingsVector3D(data["_value"], data["_labels"], data["_unit"], data["_min_value"], data["_max_value"], data["_allow_nan"], data["_require_integer"], data["_read_only"], data["_visible"], data["_description"], data["_can_be_input"], 
                     data["_is_input"], data["_full_input_name"])
        s._id = data["_id"]
        return s

    def __eq__(self, other):
        return super(SettingsVector3D, self).__eq__(other) and \
            self._compare_lists(self._value, other._value) and \
            self._compare_lists(self._labels, other._labels) and \
            self._unit == other._unit and \
            self._min_value == other._min_value and \
            self._max_value == other._max_value and \
            self._allow_nan == other._allow_nan and \
            self._require_integer == other._require_integer

    @staticmethod
    def _compare_lists(x, y):
        if len(x) != len(y):
            return False
        for i in range(len(x)):
            if x[i] != y[i]:
                return False
        return True

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsVector3D"

    # Datatype attributes.
    _attributes = Attributes("SettingsVector3D", version=0, member_count=14)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsVector3D, self).serialize(writer_fun)
        writer_fun(self._labels, "String[]", "L", None)
        writer_fun(self._max_value, "Double", "Max", None)
        writer_fun(self._min_value, "Double", "Min", None)
        writer_fun(self._allow_nan, "Boolean", "NaN", None)
        writer_fun(self._require_integer, "Boolean", "RI", None)
        writer_fun(self._unit, "String", "U", None)
        writer_fun(self._value, "Double[]", "V", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsVector3D, SettingsVector3D).deserialize(reader_fun)
        data["_labels"], _ = reader_fun("String[]", None)
        data["_max_value"], _ = reader_fun("Double", None)
        data["_min_value"], _ = reader_fun("Double", None)
        data["_allow_nan"], _ = reader_fun("Boolean", None)
        data["_require_integer"], _ = reader_fun("Boolean", None)
        data["_unit"], _ = reader_fun("String", None)
        data["_value"], _ = reader_fun("Double[]", None)
        return data
