# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
import numpy as np
from .HeroDataType import HeroDataType

from abc import ABC


class _Initializer:
    def __init__(self):
        from heropytools import HeroArray, HeroString
        self.default_string = HeroString("")
        self.default_numbers = HeroArray(3)

    def create_string(self, x):
        self.default_string._value = x
        return self.default_string

    def create_numbers(self, x):
        if not isinstance(x, np.ndarray):
            x = np.array(x)
        self.default_numbers._value = x
        return self.default_numbers

    @staticmethod
    def create_struct(x):
        from .HeroStruct import HeroStruct
        return HeroStruct(x)

    @staticmethod
    def create_list(x):
        from .HeroList import HeroList
        return HeroList(x)

    @staticmethod
    def create_column(x):
        from .HeroColumn import HeroColumn
        return HeroColumn(x)

    @staticmethod
    def create_table(x):
        from .HeroTable import HeroTable
        return HeroTable(x)


class HeroData(ABC):

    _type2element_data_type = {
                                'HeroString': HeroDataType.String, 'str': HeroDataType.String,
                                'HeroStruct': HeroDataType.Struct, 'dict': HeroDataType.Struct,
                                'HeroList': HeroDataType.List, 'HeroTable': HeroDataType.Table,
                                'DataFrame': HeroDataType.Table, 'HeroContour': HeroDataType.Contour,
                                'HeroImage': HeroDataType.Image, 'HeroColumn': HeroDataType.Column,
                                'Series': HeroDataType.Column, 'HeroArray': HeroDataType.Array,
                                'int': HeroDataType.Array, 'bool': HeroDataType.Array,
                                'float': HeroDataType.Array, 'complex': HeroDataType.Array,
                                'ndarray': HeroDataType.Array, 'list': HeroDataType.List
                               }

    _initializer = None

    # Crate the object with all values initialized to defaults.
    def __init__(self):
        pass

    @staticmethod
    def create(obj):
        if HeroData._initializer is None:
            HeroData._initializer = _Initializer()
        if isinstance(obj, str):
            return HeroData._initializer.create_string(obj)
        elif isinstance(obj, float) or isinstance(obj, int) or isinstance(obj, complex) or isinstance(obj, bool) or isinstance(obj, np.ndarray):
            return HeroData._initializer.create_numbers(obj)
        elif isinstance(obj, dict):
            return HeroData._initializer.create_struct(obj)
        elif isinstance(obj, list):
            return HeroData._initializer.create_list(obj)
        # Avoid loading pandas which is really slow.
        elif HeroData._full_name(obj) == 'pandas.core.frame.DataFrame':
            return HeroData._initializer.create_table(obj)
        elif HeroData._full_name(obj) == 'pandas.core.frame.Series':
            return HeroData._initializer.create_column(obj)
            
    def __eq__(self, other: HeroData):
        return type(self) == type(other)

    def get_container_id(self):
        pass

    @staticmethod
    def _full_name(obj):
        type_obj = type(obj)
        module = type_obj.__module__
        type_name = type_obj.__qualname__
        return f"{module}.{type_name}"

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "HeroData"

    # Datatype attributes.
    _attributes = Attributes("HeroData", version=0, member_count=0)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        pass

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        return data
