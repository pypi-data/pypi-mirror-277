# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional

import numpy as np
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer


class SubjectInformation:

    # Create the object with all values initialized to defaults. 
    def __init__(self, ID="", Name="", BirthDate="", Sex="", Weight=0.0):
        self._id = ID
        self._name = Name
        self._birth_date = BirthDate
        self._sex = Sex
        self._weight = Weight

    @staticmethod
    def create_from_dict(data: dict):
        s = SubjectInformation()
        s._id = data['_id']
        s._name = data['_name']
        s._birth_date = data['_birth_date']
        s._sex = data['_sex']
        s._weight = data['_weight']
        return s

    def to_dict(self)->dict:
        d = {}
        d['ID'] = self._id
        d['Name'] = self._name
        d['BirthDate'] = self._birth_date
        d['Sex'] = self._sex
        d['Weight'] = self._weight
        return d

    def __eq__(self, other: SubjectInformation):
        return self._id == other._id and \
        self._name == other._name and \
        self._birth_date == other._birth_date and \
        self._sex == other._sex and \
        self._weight == other._weight

    def get_container_id(self):
        pass

    
    def __repr__(self):
        string = "SubjectInformation("
        string += f"subject_id=\"{self._id}\", "
        string += f"name=\"{self._name}\", "
        string += f"birth_date=\"{self._birth_date}\", "
        string += f"sex=\"{self._sex}\", "
        string += f"weight={self._weight}, "
        string += ")"

        return string

    def __str__(self):
        string = f'SubjectInformation:\n'
        string += f'  ----------------------------------\n'
        string += f'  ID: {self._id}\n'
        string += f'  Name: {self._name}\n'
        string += f'  Birth Date: {self._birth_date}\n'
        string += f'  Sex: {self._sex}\n'
        string += f'  Weight: {self._weight}\n'
        string += f'  ----------------------------------\n'

        return string

    @property
    def ID(self):
        return self._id

    @ID.setter
    def ID(self, value):
        if not isinstance(str, value):
            raise Exception("The 'ID' attribute must be a string.")
        self._id = value

    @ID.deleter
    def ID(self):
        raise AttributeError("Attribute 'ID' is not deletable.")

    @property
    def Name(self):
        return self._name

    @Name.setter
    def Name(self, value):
        if not isinstance(str, value):
            raise Exception("The 'Name' attribute must be a string.")
        self._name = value

    @Name.deleter
    def Name(self):
        raise AttributeError("Attribute 'Name' is not deletable.")

    @property
    def BirthDate(self):
        return self._birth_date

    @BirthDate.setter
    def BirthDate(self, value):
        if not isinstance(str, value):
            raise Exception("The 'BirthDate' attribute must be a string.")
        self._birth_date = value

    @BirthDate.deleter
    def BirthDate(self):
        raise AttributeError("Attribute 'BirthDate' is not deletable.")

    @property
    def Sex(self):
        return self._sex

    @Sex.setter
    def Sex(self, value):
        if not isinstance(str, value):
            raise Exception("The 'Sex' attribute must be a string.")
        self._sex = value

    @Sex.deleter
    def Sex(self):
        raise AttributeError("Attribute 'Sex' is not deletable.")

    @property
    def Weight(self):
        return self._weight

    @Weight.setter
    def Weight(self, value):
        if isinstance(float, value):
            self._weight = value
        elif isinstance(np.array, value):
            if value.ndim != 0:
                raise Exception("The 'Weight' must be a scalar.")
            self._weight = value
        else:
            raise Exception("The 'Weight' must be a numerical scalar.")

    @Weight.deleter
    def Weight(self):
        raise AttributeError("Attribute 'Weight' is not deletable.")
    
    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SubjectInformation"

    # Datatype attributes.
    _attributes = Attributes("SubjectInformation", version=0, member_count=5)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        writer_fun(self._birth_date, "String", "BirthDate", None)
        writer_fun(self._id, "String", "ID", None)
        writer_fun(self._name, "String", "Name", None)
        writer_fun(self._sex, "String", "Sex", None)
        writer_fun(self._weight, "Double", "Weight", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        data["_birth_date"], _ = reader_fun("String", None)
        data["_id"], _ = reader_fun("String", None)
        data["_name"], _ = reader_fun("String", None)
        data["_sex"], _ = reader_fun("String", None)
        data["_weight"], _ = reader_fun("Double", None)
        return data
