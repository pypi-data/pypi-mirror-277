# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .SettingsValue import SettingsValue


class SettingsColorMap(SettingsValue):

    def __init__(self, value, read_only=False, visible=True, description="", can_be_input=False, is_input=False, full_input_name=True):

        SettingsValue.__init__(self, read_only, visible, description, can_be_input, is_input, full_input_name)
        self._value = value

    @staticmethod
    def create_from_dict(data: dict):
        s = SettingsColorMap(data["_value"], data["_read_only"], data["_visible"], data["_description"], data["_can_be_input"], data["_is_input"], data["_full_input_name"])
        s._id = data["_id"]
        return s

    def __eq__(self, other):
        return super(SettingsColorMap, self).__eq__(other) and self._value == other._value

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsColorMap"

    # Datatype attributes.
    _attributes = Attributes("SettingsColorMap", version=0, member_count=8)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsColorMap, self).serialize(writer_fun)
        writer_fun(self._value, "Double{}[]", "V", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsColorMap, SettingsColorMap).deserialize(reader_fun)
        data["_value"], _ = reader_fun("Double{}[]", None)
        return data
