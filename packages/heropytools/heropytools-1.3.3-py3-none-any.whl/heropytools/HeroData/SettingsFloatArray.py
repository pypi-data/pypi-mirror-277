# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .SettingsValueArray import SettingsValueArray


class SettingsFloatArray(SettingsValueArray):

    def __init__(self,  value, min_value = float('-inf'), max_value =float('inf'), allow_nan=True,  min_number_of_elements=0, max_number_of_elements=64, 
            read_only=False, visible=True, description="", can_be_input=False, is_input=False, full_input_name=True):

        SettingsValueArray.__init__(self, min_number_of_elements, max_number_of_elements, read_only, visible, description, can_be_input, is_input, full_input_name)
        self._min_value = min_value
        self._max_value = max_value
        self._value = value
        self._allow_nan = allow_nan
        
    @property
    def value(self):
        return self._value
    
    @value.setter
    def value(self, value):
        raise AttributeError("Attribute is not writable.")

    @value.deleter
    def value(self):
        raise AttributeError("Attribute is not deletable.")

    @property
    def min_value(self):
        return self._min_value
    
    @min_value.setter
    def min_value(self, value):
        raise AttributeError("Attribute is not writable.")

    @min_value.deleter
    def min_value(self):
        raise AttributeError("Attribute is not deletable.")

    @property
    def max_value(self):
        return self._max_value
    
    @max_value.setter
    def max_value(self, value):
        raise AttributeError("Attribute is not writable.")

    @max_value.deleter
    def max_value(self):
        raise AttributeError("Attribute is not deletable.")

    @property
    def allow_nan(self):
        return self._allow_nan
    
    @allow_nan.setter
    def allow_nan(self, value):
        raise AttributeError("Attribute is not writable.")

    @allow_nan.deleter
    def allow_nan(self):
        raise AttributeError("Attribute is not deletable.")

    @staticmethod
    def create_from_dict(data: dict):
        s = SettingsFloatArray(data["_value"], data["_min_value"], data["_max_value"], data["_allow_nan"], data["_min_number_of_elements"], data["_max_number_of_elements"], data["_read_only"], data["_visible"], data["_description"], data["_can_be_input"], 
                     data["_is_input"], data["_full_input_name"])
        s._id = data["_id"]
        return s

    def __eq__(self, other):
        return super(SettingsFloatArray, self).__eq__(other) and self._compare_lists(self._value, other._value) and self._min_value == other._min_value and \
                self._max_value == other._max_value and self._allow_nan == other._allow_nan

    def __repr__(self) -> str:
        return f'RealLis: [value: {self.value}, min_value: {self.min_value}, max_value: {self.max_value}, allow_nan: {self.allow_nan}, ' + super().__repr__()
    
    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsFloatArray"

    # Datatype attributes.
    _attributes = Attributes("SettingsFloatArray", version=0, member_count=13)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsFloatArray, self).serialize(writer_fun)
        writer_fun(self._max_value, "Double", "Max", None)
        writer_fun(self._min_value, "Double", "Min", None)
        writer_fun(self._allow_nan, "Boolean", "NaN", None)
        writer_fun(self._value, "Double[]", "V", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsFloatArray, SettingsFloatArray).deserialize(reader_fun)
        data["_max_value"], _ = reader_fun("Double", None)
        data["_min_value"], _ = reader_fun("Double", None)
        data["_allow_nan"], _ = reader_fun("Boolean", None)
        data["_value"], _ = reader_fun("Double[]", None)
        return data
