# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional, Union
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
from .HeroData import HeroData


# Cannot use the built-in list since it is not possible to figure out the type from an empty list.
class HeroList(HeroData):

    def __init__(self, value: Union[list, tuple, HeroList] = None):
        
        HeroData.__init__(self)
    
        if value is None:
            self._data = list()
        elif isinstance(value, HeroList):  
            self._data = list()
            for v in value._data:
                self._data.append(v)
        else:
            self._data = list(value);

    def __len__(self):
        return len(self._data)

    @staticmethod
    def create(obj):
        if isinstance(obj, list):
            return HeroList(obj)
        else:
            raise Exception("Failed to interpret an object of type {type(obj)} as a {HeroList.__name__}.")

    @staticmethod
    def create_from_dict(data: dict):
        return data['_data']

    def __getitem__(self, key):
        return self._data[key]

    def __iter__(self):
        return iter(self._data)

    def __eq__(self, other: HeroList):
        if not super(HeroList, self).__eq__(other):
            return False
        for i in range(len(self)):
            if not self._cmp_elements(self._data[i], other._data[i]):
                return False
        return True  

    @staticmethod
    def _cmp_elements(v1, v2):
        if not isinstance(v1, HeroData):
            v1 = HeroData.create(v1)
        if not isinstance(v2, HeroData):
            v2 = HeroData.create(v2)
        return v1 == v2


    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "HeroList"

    # Datatype attributes.
    _attributes = Attributes("HL", version=1, member_count=1)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(HeroList, self).serialize(writer_fun)
        writer_fun(self._data, "HeroData{}", "_data", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(HeroList, HeroList).deserialize(reader_fun)
        data["_data"], _ = reader_fun("HeroData{}", None)
        return data
