# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional, List, Union
import numpy as np
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
from .HeroList import HeroList
import enum


class ContourType(enum.Enum):
    ClosedPlanar = 1


class Contour:
    def __init__(self, polygon_set: List[np.array] = None, contour_type: ContourType = ContourType.ClosedPlanar):
        if self._validate_polygon_set(polygon_set):
            self._polygon_set = polygon_set
        else:
            raise Exception("The polygon set must be a list of n x 3 numpy arrays of float64 type.")
        self._contour_type = contour_type

    def __repr__(self):
        string = "Contour("
        string += f"polygone_set={{n = {len(self._polygon_set)}}}, "
        string += f"contour_type={self._contour_type} "
        string += ")"

        return string
    
    def __str__(self):
        string = f'Contour: \n'
        string += f'  ----------------------------------\n'
        string += f'  Contour Type: {self._contour_type}\n'
        string += f'  Number of polygons: {len(self._polygon_set)}\n'
        string += f'  ----------------------------------\n'

        return string

    @property
    def ContourType(self):
        return self._contour_type

    @ContourType.setter
    def ContourType(self, value):
        raise AttributeError("Attribute 'ContourType' cannot be changed.")

    @ContourType.deleter
    def ContourType(self):
        raise AttributeError("Attribute 'ContourType' is not deletable.")

    @property
    def PolygonSet(self):
        return self._polygon_set

    @PolygonSet.setter
    def PolygonSet(self, value):
        if self._validate_polygon_set(value):
            self._polygon_set = value
        else:
            raise Exception("The 'PolygonSet' must be a list of n x 3 numpy arrays of float64 type.")

    @PolygonSet.deleter
    def PolygonSet(self):
        raise AttributeError("Attribute 'PolygonSet' is not deletable.")

    @staticmethod
    def _validate_polygon_set(ps: List[np.array]):
        if not isinstance(ps, list):
            return False
        if not all(isinstance(e, np.ndarray) and e.dtype == np.float64 and e.shape[1] == 3 for e in ps):
            return False
        return True

    @staticmethod
    def create_from_dict(data: dict):
        return Contour(data["_polygon_set"], data["_contour_type"])

    def __eq__(self, other: Contour):
        return HeroList(self._polygon_set) == HeroList(other._polygon_set) and self._contour_type == other._contour_type

    def get_container_id(self):
        pass

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "Contour"

    # Datatype attributes.
    _attributes = Attributes("MC", version=0, member_count=2)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        writer_fun(self._polygon_set, "HeroList", "_polygonSet", None)
        writer_fun(self._contour_type, "ContourType", "CT", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        data["_polygon_set"], _ = reader_fun("HeroList", None)
        data["_contour_type"], _ = reader_fun("ContourType", None)
        return data
