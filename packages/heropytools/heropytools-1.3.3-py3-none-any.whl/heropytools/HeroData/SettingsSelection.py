# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .SettingsValue import SettingsValue


class SettingsSelection(SettingsValue):

    def __init__(self, selectedValue="", values=(""), read_only=False, visible=True, description="", can_be_input=False, is_input=False, full_input_name=True):

        SettingsValue.__init__(self, read_only, visible, description, can_be_input, is_input, full_input_name)
        self._value = selectedValue
        self._values = list(values)
        
    @property
    def value(self):
        return self._value
    
    @value.setter
    def value(self, value):
        raise AttributeError("Attribute is not writable.")

    @value.deleter
    def value(self):
        raise AttributeError("Attribute is not deletable.")
    
    @property
    def values(self):
        return self._values
    
    @values.setter
    def values(self, value):
        raise AttributeError("Attribute is not writable.")

    @values.deleter
    def values(self):
        raise AttributeError("Attribute is not deletable.")

    @staticmethod
    def create_from_dict(data: dict):
        s = SettingsSelection(data["_value"], data["_values"], data["_read_only"], data["_visible"], data["_description"], data["_can_be_input"], data["_is_input"], data["_full_input_name"])
        s._id = data["_id"]
        return s

    def __repr__(self) -> str:
        return f'Selection: [value: {self.value}, values: {self.values}, ' + super().__repr__()
    
    
    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsSelection"

    # Datatype attributes.
    _attributes = Attributes("SettingsSelection", version=0, member_count=9)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsSelection, self).serialize(writer_fun)
        writer_fun(self._value, "String", "V", None)
        writer_fun(self._values, "String{}", "VS", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsSelection, SettingsSelection).deserialize(reader_fun)
        data["_value"], _ = reader_fun("String", None)
        data["_values"], _ = reader_fun("String{}", None)
        return data
