# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
from .CustomSerializers.OrderedDictSerializer import OrderedDictSerializer
from collections import OrderedDict
from .SettingsItem import SettingsItem


class SettingsGroup(SettingsItem):

    def __init__(self, collapsed = False, visible: bool = True, description: str = ""):
        SettingsItem.__init__(self, visible, description)
        self._collapsed = collapsed
        self._values = OrderedDict()

    def __getitem__(self, key):
        return self._values[key]

    def __setitem__(self, key, value):
        self._values[key] = value

    def __len__(self):
        return len(self._values)

    def __iter__(self):
        return iter(self._values)

    @staticmethod
    def create_from_dict(data: dict):
        s = SettingsGroup(data["_collapsed"], data["_visible"], data["_description"])
        items = data["_values"]
        for key in items:
            s[key] = items[key]
        s._id = data["_id"]
        return s

    def __eq__(self, other):
        if not super(SettingsGroup, self).__eq__(other):
            return False
        if self._collapsed != other._collapsed:
            return False
        if isinstance(other, SettingsGroup):
            if len(self._values) != len(other):
                return False
            for key in self._values:
                if not self._values[key] == other[key]:
                    return False
        else:
            return False
        return True
     
    def __repr__(self) -> str:
        string = "SettingsGroup({"
        for key, value in self._values.items():
            string+= f"\'{key}\': {value._type_str}, "
        return string[:-2] + "})"
    
    def __str__(self) -> str:
        string = "SettingsGroup:\n"
        string += "-------------------\n"
        for key in self:
            string += f"{key}: {self[key]}\n"
        string += "-------------------\n"
        return string
        
    def get_container_id(self):
        return id(self)

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsGroup"

    # Datatype attributes.
    _attributes = Attributes("SettingsGroup", version=0, member_count=5)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsGroup, self).serialize(writer_fun)
        writer_fun(self._collapsed, "Boolean", "C", None)
        writer_fun(self._values, "OrderedDictionary", "V", OrderedDictSerializer("String", "SettingsItem"))

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsGroup, SettingsGroup).deserialize(reader_fun)
        data["_collapsed"], _ = reader_fun("Boolean", None)
        data["_values"], _ = reader_fun("OrderedDictionary", OrderedDictSerializer("String", "SettingsItem"))
        return data
