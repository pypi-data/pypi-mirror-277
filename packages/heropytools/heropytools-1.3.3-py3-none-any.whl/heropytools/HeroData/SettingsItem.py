# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from abc import ABC
from uuid import uuid4


class SettingsItem(ABC):

    def __init__(self, visible: bool = False, description: str = "", id_value: str = None):
        if id_value is None:
            self._id = str(uuid4())
        else:
            self._id = id_value
        self._description = description
        self._visible = visible
        
    @property
    def visible(self):
        return self._visible
    
    @visible.setter
    def visible(self, value):
        raise AttributeError("Attribute is not writable.")

    @visible.deleter
    def visible(self):
        raise AttributeError("Attribute is not deletable.")
    
    @property
    def description(self):
        return self._description
    
    @description.setter
    def description(self, value):
        raise AttributeError("Attribute is not writable.")

    @description.deleter
    def description(self):
        raise AttributeError("Attribute is not deletable.")

    def __eq__(self, other):
        return self._id == other._id and self._visible == other._visible and self._description == other._description

    def get_container_id(self):
        pass
    
    def __repr__(self) -> str:
        string = f"description: \'{self.description}\', visible: {self.visible}]"
        return string
    

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsItem"

    # Datatype attributes.
    _attributes = Attributes("SettingsItem", version=0, member_count=3)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        writer_fun(self._description, "String", "Desc", None)
        writer_fun(self._id, "String", "ID", None)
        writer_fun(self._visible, "Boolean", "Vis", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        data["_description"], _ = reader_fun("String", None)
        data["_id"], _ = reader_fun("String", None)
        data["_visible"], _ = reader_fun("Boolean", None)
        return data
