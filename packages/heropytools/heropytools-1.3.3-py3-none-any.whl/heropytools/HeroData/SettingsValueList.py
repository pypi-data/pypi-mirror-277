# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer

from .SettingsValue import SettingsValue


class SettingsValueList(SettingsValue):

    def __init__(self, min_number_of_elements, max_number_of_elements, read_only=False, visible=True, description="", can_be_input=False, is_input=False, full_input_name=True):

        SettingsValue.__init__(self, read_only, visible, description, can_be_input, is_input, full_input_name)
        self._min_number_of_elements = min_number_of_elements
        self._max_number_of_elements = max_number_of_elements

    @property
    def min_number_of_elements(self):
        return self._min_number_of_elements
    
    @min_number_of_elements.setter
    def min_number_of_elements(self, value):
        raise AttributeError("Attribute is not writable.")

    @min_number_of_elements.deleter
    def min_number_of_elements(self):
        raise AttributeError("Attribute is not deletable.")
    
    @property
    def max_number_of_elements(self):
        return self._max_number_of_elements
    
    @max_number_of_elements.setter
    def max_number_of_elements(self, value):
        raise AttributeError("Attribute is not writable.")

    @max_number_of_elements.deleter
    def max_number_of_elements(self):
        raise AttributeError("Attribute is not deletable.")

    def __eq__(self, other: SettingsValueList):
        if not super(SettingsValueList, self).__eq__(other): 
            return False

        return self._min_number_of_elements == other._min_number_of_elements and self._max_number_of_elements == other._max_number_of_elements

    def __repr__(self) -> str:
        return f"min_number_of_elements: {self.min_number_of_elements}, max_number_of_elements: {self.max_number_of_elements}, " + super().__repr__()

    
    @staticmethod
    def _compare_lists(x, y):
            if len(x) != len(y):
                return False
            for i in range(len(x)):
                if x[i] != y[i]:
                    return False
            return True

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "SettingsValueList"

    # Datatype attributes.
    _attributes = Attributes("SettingsValueList", version=0, member_count=9)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        super(SettingsValueList, self).serialize(writer_fun)
        writer_fun(self._max_number_of_elements, "Int32", "MaxE", None)
        writer_fun(self._min_number_of_elements, "Int32", "MinE", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = super(SettingsValueList, SettingsValueList).deserialize(reader_fun)
        data["_max_number_of_elements"], _ = reader_fun("Int32", None)
        data["_min_number_of_elements"], _ = reader_fun("Int32", None)
        return data
