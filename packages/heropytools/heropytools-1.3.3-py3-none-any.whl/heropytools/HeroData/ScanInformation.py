# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer


class ScanInformation:

    # Create the object with all values initialized to defaults. 
    def __init__(self, Positioning="", Date="", FrameOfReference=""):
        self._positioning = Positioning
        self._date = Date
        self._frame_of_reference = FrameOfReference

    @staticmethod
    def create_from_dict(data: dict):
        s = ScanInformation()
        s._positioning = data['_positioning']
        s._date = data['_date']
        s._frame_of_reference = data['_frame_of_reference']
        return s

    def to_dict(self)->dict:
        d = {}
        d['Positioning'] = self._positioning
        d['Date'] = self._date
        d['FrameOfReference'] = self._frame_of_reference
        return d

    def __eq__(self, other: ScanInformation):
        return self._positioning == other._positioning and \
        self._date == other._date and \
        self._frame_of_reference == other._frame_of_reference

    def get_container_id(self):
        pass

    def __repr__(self):
        string = "ScanInformation("
        string += f"positioning=\"{self._positioning}\", "
        string += f"date=\"{self._date}\", "
        string += f"frame_of_reference=\"{self._frame_of_reference}\""
        string += ")"

        return string

    def __str__(self):
        string = f'ScanInformation:\n'
        string += f'  ----------------------------------\n'
        string += f'  Positioning: {self._positioning}\n'
        string += f'  Date: {self._date}\n'
        string += f'  Frame of Rererence: {self._frame_of_reference}\n'
        string += f'  ----------------------------------\n'

        return string

    @property
    def Positioning(self):
        return self._positioning

    @Positioning.setter
    def Positioning(self, value):
        if not isinstance(str, value):
            raise Exception("The 'Positioning' must be a string.")
        self._positioning = value

    @Positioning.deleter
    def Positioning(self):
        raise AttributeError("Attribute 'Positioning' is not deletable.")

    @property
    def Date(self):
        return self._date

    @Date.setter
    def Date(self, value):
        if not isinstance(str, value):
            raise Exception("The 'Date' must be a string.")
        self._date = value

    @Date.deleter
    def Date(self):
        raise AttributeError("Attribute 'Date' is not deletable.")

    @property
    def FrameOfReference(self):
        return self._frame_of_reference

    @FrameOfReference.setter
    def FrameOfReference(self, value):
        if not isinstance(str, value):
            raise Exception("The 'FrameOfReference' must be a string.")
        self._frame_of_reference = value

    @FrameOfReference.deleter
    def FrameOfReference(self):
        raise AttributeError("Attribute 'FrameOfReference' is not deletable.")
    
    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "ScanInformation"

    # Datatype attributes.
    _attributes = Attributes("ScanInformation", version=0, member_count=3)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        writer_fun(self._date, "String", "Date", None)
        writer_fun(self._frame_of_reference, "String", "FrameOfReference", None)
        writer_fun(self._positioning, "String", "Positioning", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        data["_date"], _ = reader_fun("String", None)
        data["_frame_of_reference"], _ = reader_fun("String", None)
        data["_positioning"], _ = reader_fun("String", None)
        return data
