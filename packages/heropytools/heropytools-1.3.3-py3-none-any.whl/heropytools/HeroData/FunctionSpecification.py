# *************************************************************** #
#               Copyright Â© Hero Imaging AB 2022. 				  #
#  					  All Rights Reserved.						  #
# *************************************************************** #

from __future__ import annotations
from typing import Callable, Any, Optional
from heropytools.Serialization.Attributes import Attributes
from heropytools.Serialization.CustomSerializer import CustomSerializer
from .InputList import InputList
from .OutputList import OutputList
from .SettingsGroup import SettingsGroup


class FunctionSpecification:

    def __init__(self):
        self._title = ""
        self._sub_title = ""
        self._tool_tip = ""
        self._inputs = InputList()
        self._outputs = OutputList()
        self._settings = SettingsGroup()
        self._general_inputs = InputList()
        self._general_outputs = OutputList()
        self._general_settings = SettingsGroup()

    @staticmethod
    def create_from_dict(data: dict):
        fs = FunctionSpecification()
        fs._inputs = data["_inputs"]
        fs._outputs = data["_outputs"]
        fs._settings = data["_settings"]
        fs._general_inputs = data["_general_inputs"]
        fs._general_outputs = data["_general_outputs"]
        fs._general_settings = data["_general_settings"]
        fs._sub_title = data["_sub_title"]
        fs._title = data["_title"]
        fs._tool_tip = data["_tool_tip"]
        return fs

    def __eq__(self, other):
        return self._inputs == other._inputs and \
               self._outputs == other._outputs and \
               self._settings == other._settings and \
               self._general_inputs == other._general_inputs and \
               self._general_outputs == other._general_outputs and \
               self._general_settings == other._general_settings and \
               self._sub_title == other._sub_title and \
               self._title == other._title and \
               self._tool_tip == other._tool_tip

    def get_container_id(self):
        pass

    # --- Autogenerated --- #

    # Name of the type.
    _type_str = "FunctionSpecification"

    # Datatype attributes.
    _attributes = Attributes("FunctionSpecification", version=0, member_count=9)

    # Serialization.
    def serialize(self, writer_fun: Callable[[Any, str, str, Optional[CustomSerializer]], None]):
        writer_fun(self._general_inputs, "InputList", "GeneralInputs", None)
        writer_fun(self._general_outputs, "OutputList", "GeneralOutputs", None)
        writer_fun(self._general_settings, "SettingsGroup", "GeneralSettings", None)
        writer_fun(self._inputs, "InputList", "Inputs", None)
        writer_fun(self._outputs, "OutputList", "Outputs", None)
        writer_fun(self._settings, "SettingsGroup", "Settings", None)
        writer_fun(self._sub_title, "String", "SubTitle", None)
        writer_fun(self._title, "String", "Title", None)
        writer_fun(self._tool_tip, "String", "ToolTip", None)

    # Deserialization.
    @staticmethod
    def deserialize(reader_fun: Callable[[str, Optional[CustomSerializer]], Any]):
        data = dict()
        data["_general_inputs"], _ = reader_fun("InputList", None)
        data["_general_outputs"], _ = reader_fun("OutputList", None)
        data["_general_settings"], _ = reader_fun("SettingsGroup", None)
        data["_inputs"], _ = reader_fun("InputList", None)
        data["_outputs"], _ = reader_fun("OutputList", None)
        data["_settings"], _ = reader_fun("SettingsGroup", None)
        data["_sub_title"], _ = reader_fun("String", None)
        data["_title"], _ = reader_fun("String", None)
        data["_tool_tip"], _ = reader_fun("String", None)
        return data
