"""
    Qdrant API

    API description for Qdrant vector search engine.  This document describes CRUD and search operations on collections of points (vectors with payload).  Qdrant supports any combinations of `should`, `must` and `must_not` conditions, which makes it possible to use in applications when object could not be described solely by vector. It could be location features, availability flags, and other custom properties businesses should take into account. ## Examples This examples cover the most basic use-cases - collection creation and basic vector search. ### Create collection First - let's create a collection with dot-production metric. ``` curl -X PUT 'http://localhost:6333/collections/test_collection' \\   -H 'Content-Type: application/json' \\   --data-raw '{     \"vectors\": {       \"size\": 4,       \"distance\": \"Dot\"     }   }'  ``` Expected response: ``` {     \"result\": true,     \"status\": \"ok\",     \"time\": 0.031095451 } ``` We can ensure that collection was created: ``` curl 'http://localhost:6333/collections/test_collection' ``` Expected response: ``` {   \"result\": {     \"status\": \"green\",     \"vectors_count\": 0,     \"segments_count\": 5,     \"disk_data_size\": 0,     \"ram_data_size\": 0,     \"config\": {       \"params\": {         \"vectors\": {           \"size\": 4,           \"distance\": \"Dot\"         }       },       \"hnsw_config\": {         \"m\": 16,         \"ef_construct\": 100,         \"full_scan_threshold\": 10000       },       \"optimizer_config\": {         \"deleted_threshold\": 0.2,         \"vacuum_min_vector_number\": 1000,         \"max_segment_number\": 5,         \"memmap_threshold\": 50000,         \"indexing_threshold\": 20000,         \"flush_interval_sec\": 1       },       \"wal_config\": {         \"wal_capacity_mb\": 32,         \"wal_segments_ahead\": 0       }     }   },   \"status\": \"ok\",   \"time\": 2.1199e-05 } ```  ### Add points Let's now add vectors with some payload: ``` curl -L -X PUT 'http://localhost:6333/collections/test_collection/points?wait=true' \\ -H 'Content-Type: application/json' \\ --data-raw '{   \"points\": [     {\"id\": 1, \"vector\": [0.05, 0.61, 0.76, 0.74], \"payload\": {\"city\": \"Berlin\"}},     {\"id\": 2, \"vector\": [0.19, 0.81, 0.75, 0.11], \"payload\": {\"city\": [\"Berlin\", \"London\"] }},     {\"id\": 3, \"vector\": [0.36, 0.55, 0.47, 0.94], \"payload\": {\"city\": [\"Berlin\", \"Moscow\"] }},     {\"id\": 4, \"vector\": [0.18, 0.01, 0.85, 0.80], \"payload\": {\"city\": [\"London\", \"Moscow\"] }},     {\"id\": 5, \"vector\": [0.24, 0.18, 0.22, 0.44], \"payload\": {\"count\": [0]}},     {\"id\": 6, \"vector\": [0.35, 0.08, 0.11, 0.44]}   ] }' ``` Expected response: ``` {     \"result\": {         \"operation_id\": 0,         \"status\": \"completed\"     },     \"status\": \"ok\",     \"time\": 0.000206061 } ``` ### Search with filtering Let's start with a basic request: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"vector\": [0.2,0.1,0.9,0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 1, \"score\": 1.273, \"payload\": null, \"version\": 0 },         { \"id\": 3, \"score\": 1.208, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000055785 } ``` But result is different if we add a filter: ``` curl -L -X POST 'http://localhost:6333/collections/test_collection/points/search' \\ -H 'Content-Type: application/json' \\ --data-raw '{     \"filter\": {         \"should\": [             {                 \"key\": \"city\",                 \"match\": {                     \"value\": \"London\"                 }             }         ]     },     \"vector\": [0.2, 0.1, 0.9, 0.7],     \"top\": 3 }' ``` Expected response: ``` {     \"result\": [         { \"id\": 4, \"score\": 1.362, \"payload\": null, \"version\": 0 },         { \"id\": 2, \"score\": 0.871, \"payload\": null, \"version\": 0 }     ],     \"status\": \"ok\",     \"time\": 0.000093972 } ```   # noqa: E501

    The version of the OpenAPI document: v1.7.x
    Contact: andrey@vasnetsov.com
    Generated by: https://openapi-generator.tech
"""


import unittest

import qdrant_openapi
from qdrant_openapi.api.collections_api import CollectionsApi  # noqa: E501


class TestCollectionsApi(unittest.TestCase):
    """CollectionsApi unit test stubs"""

    def setUp(self):
        self.api = CollectionsApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_collection_cluster_info(self):
        """Test case for collection_cluster_info

        Collection cluster info  # noqa: E501
        """
        pass

    def test_create_collection(self):
        """Test case for create_collection

        Create collection  # noqa: E501
        """
        pass

    def test_create_field_index(self):
        """Test case for create_field_index

        Create index for field in collection  # noqa: E501
        """
        pass

    def test_create_shard_key(self):
        """Test case for create_shard_key

        Create shard key  # noqa: E501
        """
        pass

    def test_create_shard_snapshot(self):
        """Test case for create_shard_snapshot

        Create shard snapshot  # noqa: E501
        """
        pass

    def test_create_snapshot(self):
        """Test case for create_snapshot

        Create collection snapshot  # noqa: E501
        """
        pass

    def test_delete_collection(self):
        """Test case for delete_collection

        Delete collection  # noqa: E501
        """
        pass

    def test_delete_field_index(self):
        """Test case for delete_field_index

        Delete index for field in collection  # noqa: E501
        """
        pass

    def test_delete_shard_key(self):
        """Test case for delete_shard_key

        Delete shard key  # noqa: E501
        """
        pass

    def test_delete_shard_snapshot(self):
        """Test case for delete_shard_snapshot

        Delete shard snapshot  # noqa: E501
        """
        pass

    def test_delete_snapshot(self):
        """Test case for delete_snapshot

        Delete collection snapshot  # noqa: E501
        """
        pass

    def test_get_collection(self):
        """Test case for get_collection

        Collection info  # noqa: E501
        """
        pass

    def test_get_collection_aliases(self):
        """Test case for get_collection_aliases

        List aliases for collection  # noqa: E501
        """
        pass

    def test_get_collections(self):
        """Test case for get_collections

        List collections  # noqa: E501
        """
        pass

    def test_get_collections_aliases(self):
        """Test case for get_collections_aliases

        List collections aliases  # noqa: E501
        """
        pass

    def test_get_shard_snapshot(self):
        """Test case for get_shard_snapshot

        Download collection snapshot  # noqa: E501
        """
        pass

    def test_get_snapshot(self):
        """Test case for get_snapshot

        Download collection snapshot  # noqa: E501
        """
        pass

    def test_list_shard_snapshots(self):
        """Test case for list_shard_snapshots

        List shards snapshots for a collection  # noqa: E501
        """
        pass

    def test_list_snapshots(self):
        """Test case for list_snapshots

        List collection snapshots  # noqa: E501
        """
        pass

    def test_recover_from_snapshot(self):
        """Test case for recover_from_snapshot

        Recover from a snapshot  # noqa: E501
        """
        pass

    def test_recover_from_uploaded_snapshot(self):
        """Test case for recover_from_uploaded_snapshot

        Recover from an uploaded snapshot  # noqa: E501
        """
        pass

    def test_recover_shard_from_snapshot(self):
        """Test case for recover_shard_from_snapshot

        Recover from a snapshot  # noqa: E501
        """
        pass

    def test_recover_shard_from_uploaded_snapshot(self):
        """Test case for recover_shard_from_uploaded_snapshot

        Recover shard from an uploaded snapshot  # noqa: E501
        """
        pass

    def test_update_aliases(self):
        """Test case for update_aliases

        Update aliases of the collections  # noqa: E501
        """
        pass

    def test_update_collection(self):
        """Test case for update_collection

        Update collection parameters  # noqa: E501
        """
        pass

    def test_update_collection_cluster(self):
        """Test case for update_collection_cluster

        Update collection cluster setup  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
