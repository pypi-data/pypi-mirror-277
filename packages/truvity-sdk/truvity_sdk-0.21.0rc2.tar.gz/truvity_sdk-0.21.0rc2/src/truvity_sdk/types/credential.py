# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .credential_id import CredentialId
from .credential_issuer import CredentialIssuer
from .credential_type import CredentialType
from .credential_valid_from import CredentialValidFrom
from .credential_valid_until import CredentialValidUntil
from .credentil_holder import CredentilHolder
from .data_model_credential import DataModelCredential
from .link_to_credential import LinkToCredential
from .link_to_file import LinkToFile

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Credential(pydantic.BaseModel):
    """
    A generic representation of a verifiable crendential. [Terminology](https://www.w3.org/TR/vc-json-schema/#terminology).
    """

    type: typing.Optional[CredentialType] = None
    data_model: typing.Optional[DataModelCredential] = None
    has_proof: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates whether the credential has proof. If it's true the proof property is placed in the used flavor type.
    """

    holder: typing.Optional[CredentilHolder] = None
    id: typing.Optional[CredentialId] = None
    issuer: typing.Optional[CredentialIssuer] = None
    linked_credentials: typing.Optional[typing.List[LinkToCredential]] = pydantic.Field(default=None)
    """
    A list of linked credentials.
    """

    linked_files: typing.Optional[typing.List[LinkToFile]] = pydantic.Field(default=None)
    """
    A list of linked files.
    """

    valid_from: typing.Optional[CredentialValidFrom] = None
    valid_until: typing.Optional[CredentialValidUntil] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
