# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .annotations import Annotations
from .e_tag import ETag
from .key import Key
from .labels import Labels
from .resource_id import ResourceId
from .resource_kind import ResourceKind
from .revision import Revision
from .timestamp import Timestamp

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class KeyResource(pydantic.BaseModel):
    """
    The key's resource (with general for all resources' fields).
    """

    kind: ResourceKind
    id: ResourceId
    revision: Revision
    created_at: Timestamp
    modified_at: Timestamp
    labels: Labels
    annotations: Annotations
    etag: ETag
    data: Key
    deleted_at: typing.Optional[Timestamp] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
