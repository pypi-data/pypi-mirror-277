# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .annotations import Annotations
from .file import File
from .labels import Labels

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class FileInput(pydantic.BaseModel):
    """
    Create or update file's resource.
    If `labels` or `annotations` are omitted in an create request, the default empty object (`{}`) will be used.
    If `labels` or `annotations` are omitted in an update request, the current values remain untouched. Providing specific values updates the resoruce accordingly, while an empty object (`{}`) for either field clears its stored data.
    """

    data: File
    annotations: typing.Optional[Annotations] = None
    labels: typing.Optional[Labels] = None

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
