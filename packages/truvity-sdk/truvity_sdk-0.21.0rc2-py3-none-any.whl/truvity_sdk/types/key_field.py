# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class KeyField(str, enum.Enum):
    """
    Enum of all available values.
    """

    KIND_NAME = "KIND_NAME"
    ID = "ID"
    REVISION = "REVISION"
    CREATED_AT = "CREATED_AT"
    MODIFIED_AT = "MODIFIED_AT"
    ETAG = "ETAG"
    DATA_SPEC = "DATA_SPEC"
    DATA_PUBLIC = "DATA_PUBLIC"
    DATA_PRIVATE = "DATA_PRIVATE"
    DELETED_AT = "DELETED_AT"

    def visit(
        self,
        kind_name: typing.Callable[[], T_Result],
        id: typing.Callable[[], T_Result],
        revision: typing.Callable[[], T_Result],
        created_at: typing.Callable[[], T_Result],
        modified_at: typing.Callable[[], T_Result],
        etag: typing.Callable[[], T_Result],
        data_spec: typing.Callable[[], T_Result],
        data_public: typing.Callable[[], T_Result],
        data_private: typing.Callable[[], T_Result],
        deleted_at: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is KeyField.KIND_NAME:
            return kind_name()
        if self is KeyField.ID:
            return id()
        if self is KeyField.REVISION:
            return revision()
        if self is KeyField.CREATED_AT:
            return created_at()
        if self is KeyField.MODIFIED_AT:
            return modified_at()
        if self is KeyField.ETAG:
            return etag()
        if self is KeyField.DATA_SPEC:
            return data_spec()
        if self is KeyField.DATA_PUBLIC:
            return data_public()
        if self is KeyField.DATA_PRIVATE:
            return data_private()
        if self is KeyField.DELETED_AT:
            return deleted_at()
