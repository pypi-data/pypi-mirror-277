# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class KeySpec(str, enum.Enum):
    """
    All possible types of assymetrical key.
    [OpenSSL- Generate Key](https://www.openssl.org/docs/manmaster/man1/openssl-genpkey.html).
    [OpenSSL - Elliptic Curves](https://www.openssl.org/docs/man1.0.2/man1/ec.html)
    [FIPS 186-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf).
    [SEC2](https://www.secg.org/sec2-v2.pdf).
    """

    ED_25519 = "ED25519"
    ECC_NIST_P_256 = "ECC_NIST_P256"
    ECC_NIST_P_384 = "ECC_NIST_P384"
    ECC_SECG_P_256_K_1 = "ECC_SECG_P256K1"

    def visit(
        self,
        ed_25519: typing.Callable[[], T_Result],
        ecc_nist_p_256: typing.Callable[[], T_Result],
        ecc_nist_p_384: typing.Callable[[], T_Result],
        ecc_secg_p_256_k_1: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is KeySpec.ED_25519:
            return ed_25519()
        if self is KeySpec.ECC_NIST_P_256:
            return ecc_nist_p_256()
        if self is KeySpec.ECC_NIST_P_384:
            return ecc_nist_p_384()
        if self is KeySpec.ECC_SECG_P_256_K_1:
            return ecc_secg_p_256_k_1()
