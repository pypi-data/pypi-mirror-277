Metadata-Version: 2.1
Name: textmater
Version: 0.1
Summary: Extract Structured Data from text
Author-email: Phillip Harry T <philliptinsley44@gmail.com>
License: Apache NON-AI License, Version 2.0
        
        TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
        1. Definitions.
        
        “License” shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
        
        “Licensor” shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
        
        “Legal Entity” shall mean the union of the acting entity and all other entities that control, are controlled by,
        or are under common control with that entity. For the purposes of this definition, “control” means (i) the power, direct or indirect,
        to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%)
        or more of the outstanding shares, or (iii) beneficial ownership of such entity.
        
        “You” (or “Your”) shall mean an individual or Legal Entity exercising permissions granted by this License.
        
        “Source” form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source,
        and configuration files.
        
        “Object” form shall mean any form resulting from mechanical transformation or translation of a Source form, including
        but not limited to compiled object code, generated documentation, and conversions to other media types.
        
        “Work” shall mean the work of authorship, whether in Source or Object form, made available under the License,
        as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).
        
        “Derivative Works” shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and
        for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship.
        For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name)
        to the interfaces of, the Work and Derivative Works thereof.
        
        “Contribution” shall mean any work of authorship, including the original version of the Work and any modifications or additions to
        that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or
        by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, “submitted”
        means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to
        communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of,
        the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated
        in writing by the copyright owner as “Not a Contribution.”
        
        “Contributor” shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and
        subsequently incorporated within the Work.
        
        2. Grant of Copyright License.
        
        Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive,
        no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform,
        sublicense, and distribute the Work and such Derivative Works in Source or Object form,
        under the following conditions:
        
          2.1. You shall not use the Covered Software in the creation of an Artificial Intelligence training dataset,
          including but not limited to any use that contributes to the training or development of an AI model or algorithm,
          unless You obtain explicit written permission from the Contributor to do so.
        
          2.2. You acknowledge that the Covered Software is not intended for use in the creation of an Artificial Intelligence training dataset,
          and that the Contributor has no obligation to provide support or assistance for any use that violates this license.
        
        3. Grant of Patent License.
        
        Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge,
        royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import,
        and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are
        necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which
        such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit)
        alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement,
        then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.
        
        4. Redistribution.
        
        You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications,
        and in Source or Object form, provided that You meet the following conditions:
        
          1. You must give any other recipients of the Work or Derivative Works a copy of this License; and
        
          2. You must cause any modified files to carry prominent notices stating that You changed the files; and
        
          3. You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark,
          and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
          
          4. If the Work includes a “NOTICE” text file as part of its distribution, then any Derivative Works that You distribute
          must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that
          do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works;
          or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear.
          The contents of the NOTICE file are for informational purposes only and do not modify the License.
        
        You may add Your own attribution notices within Derivative Works that You distribute,
        alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as
        modifying the License.
        You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use,
        reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction,
        and distribution of the Work otherwise complies with the conditions stated in this License.
        
        5. Submission of Contributions.
        
        Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor
        shall be under the terms and conditions of this License, without any additional terms or conditions.
        Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed
        with Licensor regarding such Contributions.
        
        6. Trademarks.
        
        This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor,
        except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.
        
        7. Disclaimer of Warranty.
        
        Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions)
        on an “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation,
        any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.
        You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated
        with Your exercise of permissions under this License.
        
        8. Limitation of Liability.
        
        In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise,
        unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing,
        shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages
        of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages
        for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses),
        even if such Contributor has been advised of the possibility of such damages.
        
        9. Accepting Warranty or Additional Liability.
        
        While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support,
        warranty, indemnity, or other liability obligations and/or rights consistent with this License.
        However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility,
        not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by,
        or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
        
        END OF TERMS AND CONDITIONS
Keywords: text,extract,structured,data,key,value,pair,json,csv,scrape,pdf,ocr
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: Financial and Insurance Industry
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE

# Textmater

### Don't need to know where you're going, just need to know where you've been 
Extract structured data (key values, grouped into sections) from text. (Runs backwards through text.. hence the name)
Useful for creating configurations for extracting data from a file, which can then be applied to large numbers of these documents. 

## Overview
The general application of this is to construct a configuration of the Textmater class that pulls details out of a format of text. 
This configuration can then be fed further instances of the text and build up a structure of data, which can then be saved to .json or .csv 

## Example
Say we have an example of text like this 

example_text = 
> -Shops-  
> Pete's: Grocers  
> KFC: Fast Food  
> Newsman: Newsagents  
> -Sports-  
> Football: Round Ball  
> AFL: Egg Ball  
> Cricket:Round Ball  

and we want to get every key and value, with keys being anything before a : and values being anything after :.
We also want them to be grouped according to their headers, and we want the output in json
We could create an instance with 

```resource = Textmater(section_header_regex = '_[a-zA-Z]*_')```

then run 
```resource.drive(example_text)```
the resulting resource.section_dict would look like this 
```
{
    '-Shops-': [{"Pete's": "Grocers", "KFC": "Fast Food", "Newsman": "Newsagents"}]
    '-Sports-': [{"Football": "Round Ball", 'AFL": "Egg Ball", "Cricket" : "Round Ball"}]
}
```
If you ran it again on a similarly formatted section of text, '-Shops-' list would be appended to, as would '-Sports-'

then ```resource.write_results_to_json()``` would save it as a json file. One file per section (key in the section_dict)

## importing
``` from textmater import Textmater, tools```

(tools is optional but has useful functions for working with text)

## configuring and running 
```resource = Textmater()```
will instantiate the class, there are a lot of options here. Ones relating to functions run in order of appearance.All are optional
- __filter_functions__: **[function]** takes a list of functions used to skip (or not) an instance of text passed in, each must take in a string and return true or false. E.g you pass in a function that returns false if 'denied' is present in the text anywhere. Then when you run drive this resource over a corpus of documents you can skip the ones with 'denied' in them. 
- __transformation_functions__: **[function]** takes a list of functions that are applied to transform the incoming text before further processing. Functions must take a string and return a string
- __section_header_regex__: **str(regex_pattern)** 1st of 2 ways of specifying section headers. Provided pattern is run through the text to build the list of headers. Not to be used in conjunction with the next argument
- __section_header_list__: **[str]** 2nd of 2 ways of specifying section headers. Direct values that if found in the text will be used to divide items found in the text. In the example, the same effect could have been achieved by passing in ['-Shops-', '-Sports-'] to this parameter instead 
- __sections_to_skip__: **[str]** list of sections headers that if found will promp Textmater to skip over the values in the section. Useful for improving output when there is a large section of a text you don't require the contents of. 
- __cleanup_functions__: **[function]** list of functions applied to each record before it is added to the section_dict. Must take a [current_record_dict](#current_record_dict) (\<section header\>: {dict of items within it}) and return the same. No need to make deepcopies as this is done automatically before passing the dict in. 
- __overwrite_duplicate_keys__: **bool** If set to false will generate a unique version of any key that is already present when trying to add to the current_record_dict. It will add _i where i is an integer, starting at 2. In the unlikely occassion \<key\>_i is also a collision, it increments i until it's not 
- __spread_keys__: **[(str, str)]** list of tuples representing keys in sections that you want to spread (e,g you find a value in one section and want it present in all of them, perhaps as an identifier). 
[0]: section name 
[1]: key 
example, you have a key 'patient id' in a section 'identifiers', you want this id shared across all the sections to use as a primary key. Your value for spread_keys would be [('identifiers', 'patient id')].   
If you don't know the section that a key is in but you still want to spread it if it's found, leaving the section name empty, which would look like ('', 'patient id'), will result in Textmater searching for the key across all sections then spreading it. 
- delimiter: **str** the character/s you want to use as delimiters between keys and values. 



## Appendix 

#### current_record_dict: 
a dict where keys are section headers and values are dicts of items in that section: 
```
{
    'section 1': {'key1' : 'value1', 'key2': 'value2', 'primary_key': '0'},
    'section 2': {'other key 1': 'value 1', 'other key 2': 'value 2', 'primary_key': '0'} 
}
```
resource.current_record_dict stores the result of the most recent extraction in this format

#### section_dict: 
dict for storing combined current_record_dicts. keys are section headers and values are lists of dicts
```
{
    'section 1' : [{'key1' : 'value1', 'key2': 'value2', 'primary_key': '0'},
                {'key1' : 'value3', 'key2': 'value4', 'primary_key': '1'}],
    'section 2' : [{'other key 1' : 'value 1', 'primary_key': '0'},
                    {'other key 1': 'value z', 'primary_key': '1'}] 
}
```
resource.section_dict stores this 



